import { __decorate, __values } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, Input, OnChanges, Renderer2, ViewChild } from '@angular/core';
import QRCode from 'qrcode';
import { NgxQrcodeElementTypes } from './qrcode.types';
import { DEFAULT_VALUES } from './qrcode.constants';
import * as ɵngcc0 from '@angular/core';

var _c0 = ["qrcElement"];
var QrcodeComponent = /** @class */ (function () {
    function QrcodeComponent(renderer) {
        this.renderer = renderer;
        this.elementType = DEFAULT_VALUES.elementType;
        this.cssClass = DEFAULT_VALUES.cssClass;
        this.value = DEFAULT_VALUES.value;
        this.version = DEFAULT_VALUES.version;
        this.errorCorrectionLevel = DEFAULT_VALUES.errorCorrectionLevel;
        this.margin = DEFAULT_VALUES.margin;
        this.scale = DEFAULT_VALUES.scale;
        this.width = DEFAULT_VALUES.width;
        this.colorDark = DEFAULT_VALUES.colorDark;
        this.colorLight = DEFAULT_VALUES.colorLight;
    }
    QrcodeComponent.prototype.ngOnChanges = function () {
        this.createQRCode();
    };
    QrcodeComponent.prototype.createQRCode = function () {
        var _this = this;
        if (!this.value) {
            return;
        }
        var element;
        switch (this.elementType) {
            case NgxQrcodeElementTypes.CANVAS:
                element = this.renderer.createElement('canvas');
                this.toCanvas(element).then(function () {
                    _this.renderElement(element);
                }).catch(function (e) {
                    _this.removeElementChildren();
                    console.error(e);
                });
                break;
            default:
                element = this.renderer.createElement('img');
                this.toDataURL().then(function (src) {
                    element.setAttribute('src', src);
                    if (_this.alt) {
                        element.setAttribute('alt', _this.alt);
                    }
                    _this.renderElement(element);
                }).catch(function (e) {
                    _this.removeElementChildren();
                    console.error(e);
                });
        }
    };
    QrcodeComponent.prototype.toDataURL = function () {
        return QRCode.toDataURL(this.value, {
            version: this.version,
            errorCorrectionLevel: this.errorCorrectionLevel,
            margin: this.margin,
            scale: this.scale,
            width: this.width,
            color: {
                dark: this.colorDark,
                light: this.colorLight
            }
        });
    };
    QrcodeComponent.prototype.toCanvas = function (canvas) {
        return QRCode.toCanvas(canvas, this.value, {
            version: this.version,
            errorCorrectionLevel: this.errorCorrectionLevel,
            margin: this.margin,
            scale: this.scale,
            width: this.width,
            color: {
                dark: this.colorDark,
                light: this.colorLight
            }
        });
    };
    QrcodeComponent.prototype.renderElement = function (element) {
        this.removeElementChildren();
        this.renderer.appendChild(this.qrcElement.nativeElement, element);
    };
    QrcodeComponent.prototype.removeElementChildren = function () {
        var e_1, _a;
        try {
            for (var _b = __values(this.qrcElement.nativeElement.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {
                var node = _c.value;
                this.renderer.removeChild(this.qrcElement.nativeElement, node);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    QrcodeComponent.ctorParameters = function () { return [
        { type: Renderer2 }
    ]; };
    __decorate([
        Input()
    ], QrcodeComponent.prototype, "elementType", void 0);
    __decorate([
        Input()
    ], QrcodeComponent.prototype, "cssClass", void 0);
    __decorate([
        Input()
    ], QrcodeComponent.prototype, "alt", void 0);
    __decorate([
        Input()
    ], QrcodeComponent.prototype, "value", void 0);
    __decorate([
        Input()
    ], QrcodeComponent.prototype, "version", void 0);
    __decorate([
        Input()
    ], QrcodeComponent.prototype, "errorCorrectionLevel", void 0);
    __decorate([
        Input()
    ], QrcodeComponent.prototype, "margin", void 0);
    __decorate([
        Input()
    ], QrcodeComponent.prototype, "scale", void 0);
    __decorate([
        Input()
    ], QrcodeComponent.prototype, "width", void 0);
    __decorate([
        Input()
    ], QrcodeComponent.prototype, "colorDark", void 0);
    __decorate([
        Input()
    ], QrcodeComponent.prototype, "colorLight", void 0);
    __decorate([
        ViewChild('qrcElement')
    ], QrcodeComponent.prototype, "qrcElement", void 0);
QrcodeComponent.ɵfac = function QrcodeComponent_Factory(t) { return new (t || QrcodeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
QrcodeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: QrcodeComponent, selectors: [["ngx-qrcode"]], viewQuery: function QrcodeComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.qrcElement = _t.first);
    } }, inputs: { elementType: "elementType", cssClass: "cssClass", value: "value", version: "version", errorCorrectionLevel: "errorCorrectionLevel", margin: "margin", scale: "scale", width: "width", colorDark: "colorDark", colorLight: "colorLight", alt: "alt" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 2, consts: [["qrcElement", ""]], template: function QrcodeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "div", null, 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.cssClass);
    } }, encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(QrcodeComponent, [{
        type: Component,
        args: [{
                selector: 'ngx-qrcode',
                template: "<div #qrcElement [class]=\"cssClass\"></div>",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }]; }, { elementType: [{
            type: Input
        }], cssClass: [{
            type: Input
        }], value: [{
            type: Input
        }], version: [{
            type: Input
        }], errorCorrectionLevel: [{
            type: Input
        }], margin: [{
            type: Input
        }], scale: [{
            type: Input
        }], width: [{
            type: Input
        }], colorDark: [{
            type: Input
        }], colorLight: [{
            type: Input
        }], alt: [{
            type: Input
        }], qrcElement: [{
            type: ViewChild,
            args: ['qrcElement']
        }] }); })();
    return QrcodeComponent;
}());
export { QrcodeComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXJjb2RlLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiQHRlY2hpZWRpYXJpZXMvbmd4LXFyY29kZS9saWIvcXJjb2RlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXZILE9BQU8sTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUU1QixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN2RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7Ozs7QUFPcEQ7QUFBbUQsSUFnQmpELHlCQUFvQixRQUFtQjtBQUN6QyxRQURzQixhQUFRLEdBQVIsUUFBUSxDQUFXO0FBQUMsUUFkL0IsZ0JBQVcsR0FBRyxjQUFjLENBQUMsV0FBVyxDQUFDO0FBQ3BELFFBQVcsYUFBUSxHQUFHLGNBQWMsQ0FBQyxRQUFRLENBQUM7QUFDOUMsUUFDVyxVQUFLLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQztBQUN4QyxRQUFXLFlBQU8sR0FBRyxjQUFjLENBQUMsT0FBTyxDQUFDO0FBQzVDLFFBQVcseUJBQW9CLEdBQUcsY0FBYyxDQUFDLG9CQUFvQixDQUFDO0FBQ3RFLFFBQVcsV0FBTSxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUM7QUFDMUMsUUFBVyxVQUFLLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQztBQUN4QyxRQUFXLFVBQUssR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDO0FBQ3hDLFFBQVcsY0FBUyxHQUFHLGNBQWMsQ0FBQyxTQUFTLENBQUM7QUFDaEQsUUFBVyxlQUFVLEdBQUcsY0FBYyxDQUFDLFVBQVUsQ0FBQztBQUNsRCxJQUlFLENBQUM7QUFDSCxJQUNFLHFDQUFXLEdBQVg7QUFBYyxRQUNaLElBQUksQ0FBQyxZQUFZLEVBQUUs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LElBQVU7QUFBYSxRQUFyQixLQUFLLEVBQUU7QUFBQyxtREFBK0I7QUFDekMsSUFBVTtBQUFhLFFBQXJCLEtBQUssRUFBRTtBQUFDLGtEQUE2QjtBQUN2QyxJQUFVO0FBQWEsUUFBckIsS0FBSyxFQUFFO0FBQUMsa0RBQTZCO0FBQ3ZDLElBQVU7QUFBYSxRQUFyQixLQUFLLEVBQUU7QUFBQyxzREFBcUM7QUFDL0MsSUFBVTtBQUFhLFFBQXJCLEtBQUssRUFBRTtBQUFDLHVEQUF1QztBQUVsRCxJQUEyQjtBQUFhLFFBQXJDLFNBQVMsQ0FBQyxZQUFZLENBQUM7QUFBQyx1REFBdUI7SUFkckMsZUFBZSx3QkFMM0IsU0FBUyxDQUFDLGNBQ1QsUUFBUSxFQUFFLFlBQVksY0FDdEIsUUFBUSxFQUFFO2dCQUE0QyxjQUN0RCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTSxVQUNoRCxDQUFDLFFBQ1csZUFBZSxDQStGM0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFDRDtBQUFDLElBREQsc0JBQUM7QUFDQSxDQURBLEFBL0ZELElBK0ZDO0FBQ0QsU0FoR2EsZUFBZTtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIE9uQ2hhbmdlcywgUmVuZGVyZXIyLCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IFFSQ29kZSBmcm9tICdxcmNvZGUnO1xuXG5pbXBvcnQgeyBOZ3hRcmNvZGVFbGVtZW50VHlwZXMgfSBmcm9tICcuL3FyY29kZS50eXBlcyc7XG5pbXBvcnQgeyBERUZBVUxUX1ZBTFVFUyB9IGZyb20gJy4vcXJjb2RlLmNvbnN0YW50cyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25neC1xcmNvZGUnLFxuICB0ZW1wbGF0ZTogYDxkaXYgI3FyY0VsZW1lbnQgW2NsYXNzXT1cImNzc0NsYXNzXCI+PC9kaXY+YCxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgUXJjb2RlQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcblxuICBASW5wdXQoKSBlbGVtZW50VHlwZSA9IERFRkFVTFRfVkFMVUVTLmVsZW1lbnRUeXBlO1xuICBASW5wdXQoKSBjc3NDbGFzcyA9IERFRkFVTFRfVkFMVUVTLmNzc0NsYXNzO1xuICBASW5wdXQoKSBhbHQ6IHN0cmluZztcbiAgQElucHV0KCkgdmFsdWUgPSBERUZBVUxUX1ZBTFVFUy52YWx1ZTtcbiAgQElucHV0KCkgdmVyc2lvbiA9IERFRkFVTFRfVkFMVUVTLnZlcnNpb247XG4gIEBJbnB1dCgpIGVycm9yQ29ycmVjdGlvbkxldmVsID0gREVGQVVMVF9WQUxVRVMuZXJyb3JDb3JyZWN0aW9uTGV2ZWw7XG4gIEBJbnB1dCgpIG1hcmdpbiA9IERFRkFVTFRfVkFMVUVTLm1hcmdpbjtcbiAgQElucHV0KCkgc2NhbGUgPSBERUZBVUxUX1ZBTFVFUy5zY2FsZTtcbiAgQElucHV0KCkgd2lkdGggPSBERUZBVUxUX1ZBTFVFUy53aWR0aDtcbiAgQElucHV0KCkgY29sb3JEYXJrID0gREVGQVVMVF9WQUxVRVMuY29sb3JEYXJrO1xuICBASW5wdXQoKSBjb2xvckxpZ2h0ID0gREVGQVVMVF9WQUxVRVMuY29sb3JMaWdodDtcblxuICBAVmlld0NoaWxkKCdxcmNFbGVtZW50JykgcXJjRWxlbWVudDogRWxlbWVudFJlZjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKCkge1xuICAgIHRoaXMuY3JlYXRlUVJDb2RlKCk7XG4gIH1cblxuICBjcmVhdGVRUkNvZGUoKSB7XG4gICAgaWYgKCF0aGlzLnZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGVsZW1lbnQ6IEVsZW1lbnQ7XG5cbiAgICBzd2l0Y2ggKHRoaXMuZWxlbWVudFR5cGUpIHtcblxuICAgICAgY2FzZSBOZ3hRcmNvZGVFbGVtZW50VHlwZXMuQ0FOVkFTOlxuICAgICAgICBlbGVtZW50ID0gdGhpcy5yZW5kZXJlci5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgdGhpcy50b0NhbnZhcyhlbGVtZW50KS50aGVuKCgpID0+IHtcbiAgICAgICAgICB0aGlzLnJlbmRlckVsZW1lbnQoZWxlbWVudCk7XG4gICAgICAgIH0pLmNhdGNoKGUgPT4ge1xuICAgICAgICAgIHRoaXMucmVtb3ZlRWxlbWVudENoaWxkcmVuKCk7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgZWxlbWVudCA9IHRoaXMucmVuZGVyZXIuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG4gICAgICAgIHRoaXMudG9EYXRhVVJMKCkudGhlbigoc3JjOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnc3JjJywgc3JjKTtcbiAgICAgICAgICBpZiAodGhpcy5hbHQpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhbHQnLCB0aGlzLmFsdCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMucmVuZGVyRWxlbWVudChlbGVtZW50KTtcbiAgICAgICAgfSkuY2F0Y2goZSA9PiB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVFbGVtZW50Q2hpbGRyZW4oKTtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHRvRGF0YVVSTCgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybiBRUkNvZGUudG9EYXRhVVJMKHRoaXMudmFsdWUsXG4gICAgICB7XG4gICAgICAgIHZlcnNpb246IHRoaXMudmVyc2lvbixcbiAgICAgICAgZXJyb3JDb3JyZWN0aW9uTGV2ZWw6IHRoaXMuZXJyb3JDb3JyZWN0aW9uTGV2ZWwsXG4gICAgICAgIG1hcmdpbjogdGhpcy5tYXJnaW4sXG4gICAgICAgIHNjYWxlOiB0aGlzLnNjYWxlLFxuICAgICAgICB3aWR0aDogdGhpcy53aWR0aCxcbiAgICAgICAgY29sb3I6IHtcbiAgICAgICAgICBkYXJrOiB0aGlzLmNvbG9yRGFyayxcbiAgICAgICAgICBsaWdodDogdGhpcy5jb2xvckxpZ2h0XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSB0b0NhbnZhcyhjYW52YXMpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiBRUkNvZGUudG9DYW52YXMoY2FudmFzLCB0aGlzLnZhbHVlLCB7XG4gICAgICB2ZXJzaW9uOiB0aGlzLnZlcnNpb24sXG4gICAgICBlcnJvckNvcnJlY3Rpb25MZXZlbDogdGhpcy5lcnJvckNvcnJlY3Rpb25MZXZlbCxcbiAgICAgIG1hcmdpbjogdGhpcy5tYXJnaW4sXG4gICAgICBzY2FsZTogdGhpcy5zY2FsZSxcbiAgICAgIHdpZHRoOiB0aGlzLndpZHRoLFxuICAgICAgY29sb3I6IHtcbiAgICAgICAgZGFyazogdGhpcy5jb2xvckRhcmssXG4gICAgICAgIGxpZ2h0OiB0aGlzLmNvbG9yTGlnaHRcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyRWxlbWVudChlbGVtZW50KTogdm9pZCB7XG4gICAgdGhpcy5yZW1vdmVFbGVtZW50Q2hpbGRyZW4oKTtcbiAgICB0aGlzLnJlbmRlcmVyLmFwcGVuZENoaWxkKHRoaXMucXJjRWxlbWVudC5uYXRpdmVFbGVtZW50LCBlbGVtZW50KTtcbiAgfVxuXG4gIHByaXZhdGUgcmVtb3ZlRWxlbWVudENoaWxkcmVuKCk6IHZvaWQge1xuICAgIGZvciAoY29uc3Qgbm9kZSBvZiB0aGlzLnFyY0VsZW1lbnQubmF0aXZlRWxlbWVudC5jaGlsZE5vZGVzKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNoaWxkKHRoaXMucXJjRWxlbWVudC5uYXRpdmVFbGVtZW50LCBub2RlKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==