import * as tslib_1 from "tslib";
import { Directive, ElementRef, EventEmitter, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';
import * as Hammer from 'hammerjs';
// const LONG_PRESS_DEFAULT_TIMEOUT = 500;
// const MIN_LONG_PRESS_TIMEOUT = 40;
import * as ɵngcc0 from '@angular/core';
var LongPressDirective = /** @class */ (function () {
    function LongPressDirective(zone, el) {
        this.zone = zone;
        this.pressed = new EventEmitter();
        this.longPressed = new EventEmitter();
        this.pressEnded = new EventEmitter();
        this.el = el.nativeElement;
    }
    LongPressDirective.prototype.ngOnInit = function () {
        var _this = this;
        if (!this.interval)
            this.interval = 500;
        if (this.interval < 40) {
            throw new Error("A limit of 40ms is imposed so you don't destroy device performance. If you need less than a 40ms interval, please file an issue explaining your use case.");
        }
        this._hammer = new Hammer.Manager(this.el, {
            recognizers: [[Hammer.Pan, { direction: Hammer.DIRECTION_VERTICAL }], [Hammer.Press], [Hammer.Tap]],
        });
        this._hammer.on('pan', function (e) {
            _this.onPressEnd();
        });
        this._hammer.on('press', function (e) {
            _this.pressed.emit(e);
            _this.clearInt();
            _this.int = setInterval(function () {
                _this.longPressed.emit();
            }, _this.interval);
        });
        this._hammer.on('pressup', function (e) {
            _this.onPressEnd();
        });
        this._hammer.on('release', function (e) {
            _this.onPressEnd();
        });
        this.el.addEventListener('mouseleave', function (e) {
            _this.onPressEnd();
        });
        this.el.addEventListener('mouseout', function (e) {
            _this.onPressEnd();
        });
    };
    LongPressDirective.prototype.clearInt = function () {
        if (this.int !== undefined) {
            clearInterval(this.int);
            this.int = undefined;
        }
    };
    LongPressDirective.prototype.onPressEnd = function () {
        this.clearInt();
        this.pressEnded.emit();
    };
    LongPressDirective.prototype.ngOnDestroy = function () {
        this.onPressEnd();
        if (this._hammer) {
            this._hammer.destroy();
            this._hammer = null;
        }
    };
    LongPressDirective.ctorParameters = function () { return [
        { type: NgZone },
        { type: ElementRef }
    ]; };
    tslib_1.__decorate([
        Input()
    ], LongPressDirective.prototype, "interval", void 0);
    tslib_1.__decorate([
        Output()
    ], LongPressDirective.prototype, "pressed", void 0);
    tslib_1.__decorate([
        Output()
    ], LongPressDirective.prototype, "longPressed", void 0);
    tslib_1.__decorate([
        Output()
    ], LongPressDirective.prototype, "pressEnded", void 0);
LongPressDirective.ɵfac = function LongPressDirective_Factory(t) { return new (t || LongPressDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
LongPressDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LongPressDirective, selectors: [["", "ion-long-press", ""]], inputs: { interval: "interval" }, outputs: { pressed: "pressed", longPressed: "longPressed", pressEnded: "pressEnded" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LongPressDirective, [{
        type: Directive,
        args: [{
                selector: '[ion-long-press]'
            }]
    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }]; }, { pressed: [{
            type: Output
        }], longPressed: [{
            type: Output
        }], pressEnded: [{
            type: Output
        }], interval: [{
            type: Input
        }] }); })();
    return LongPressDirective;
}());
export { LongPressDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9uZy1wcmVzcy5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbImlvbmljLWxvbmctcHJlc3MvZGlyZWN0aXZlcy9sb25nLXByZXNzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFDN0csT0FBTyxLQUFLLE1BQU0sTUFBTSxVQUFVLENBQUE7QUFFbEMsMENBQTBDO0FBRTFDLHFDQUFxQzs7QUFLckM7QUFBc0QsSUFXcEQsNEJBQW1CLElBQVksRUFBRSxFQUFjO0FBQ2pELFFBRHFCLFNBQUksR0FBSixJQUFJLENBQVE7QUFBQyxRQVJ0QixZQUFPLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUE7QUFDM0QsUUFBWSxnQkFBVyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFBO0FBQy9ELFFBQVksZUFBVSxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFBO0FBQzlELFFBTUksSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFBO0FBQzlCLElBQUUsQ0FBQztBQUNILElBQ0UscUNBQVEsR0FBUjtBQUFjLFFBQWQsaUJBdUNDO0FBQ0gsUUF2Q0ksSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRO0FBQUUsWUFBQSxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQTtBQUMzQyxRQUFJLElBQUksSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLEVBQUU7QUFDNUIsWUFBTSxNQUFNLElBQUksS0FBSyxDQUNiLDJKQUEySixDQUM1SixDQUFBO0FBQ1AsU0FBSztBQUNMLFFBQ0ksSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRTtBQUMvQyxZQUFNLFdBQVcsRUFBRSxDQUFDLENBQUMs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RTtBQUFDLDBEQUFrRDtJQUxqRCxrQkFBa0IsZ0NBSDlCLFNBQVMsQ0FBQyxjQUNULFFBQVEsRUFBRSxrQkFBa0IsV0FDN0IsQ0FBQyxRQUNXLGtCQUFrQixDQTJFOUI7Ozs7Ozs7Ozs7Ozs7OztvQkFDRDtBQUFDLElBREQseUJBQUM7QUFDQSxDQURBLEFBM0VELElBMkVDO0FBQ0QsU0E1RWEsa0JBQWtCO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE5nWm9uZSwgT25EZXN0cm95LCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnXG5pbXBvcnQgKiBhcyBIYW1tZXIgZnJvbSAnaGFtbWVyanMnXG5cbi8vIGNvbnN0IExPTkdfUFJFU1NfREVGQVVMVF9USU1FT1VUID0gNTAwO1xuXG4vLyBjb25zdCBNSU5fTE9OR19QUkVTU19USU1FT1VUID0gNDA7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tpb24tbG9uZy1wcmVzc10nLFxufSlcbmV4cG9ydCBjbGFzcyBMb25nUHJlc3NEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpIGludGVydmFsOiBudW1iZXJcblxuICBAT3V0cHV0KCkgcHJlc3NlZDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKClcbiAgQE91dHB1dCgpIGxvbmdQcmVzc2VkOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKVxuICBAT3V0cHV0KCkgcHJlc3NFbmRlZDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKClcblxuICBwcml2YXRlIHJlYWRvbmx5IGVsOiBIVE1MRWxlbWVudFxuICBwcml2YXRlIF9oYW1tZXI6IEhhbW1lck1hbmFnZXJcbiAgcHJpdmF0ZSBpbnQ6IG51bWJlclxuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyB6b25lOiBOZ1pvbmUsIGVsOiBFbGVtZW50UmVmKSB7XG4gICAgdGhpcy5lbCA9IGVsLm5hdGl2ZUVsZW1lbnRcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5pbnRlcnZhbCkgdGhpcy5pbnRlcnZhbCA9IDUwMFxuICAgIGlmICh0aGlzLmludGVydmFsIDwgNDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgXCJBIGxpbWl0IG9mIDQwbXMgaXMgaW1wb3NlZCBzbyB5b3UgZG9uJ3QgZGVzdHJveSBkZXZpY2UgcGVyZm9ybWFuY2UuIElmIHlvdSBuZWVkIGxlc3MgdGhhbiBhIDQwbXMgaW50ZXJ2YWwsIHBsZWFzZSBmaWxlIGFuIGlzc3VlIGV4cGxhaW5pbmcgeW91ciB1c2UgY2FzZS5cIlxuICAgICAgKVxuICAgIH1cblxuICAgIHRoaXMuX2hhbW1lciA9IG5ldyBIYW1tZXIuTWFuYWdlcih0aGlzLmVsLCB7XG4gICAgICByZWNvZ25pemVyczogW1tIYW1tZXIuUGFuLCB7IGRpcmVjdGlvbjogSGFtbWVyLkRJUkVDVElPTl9WRVJUSUNBTCB9XSwgW0hhbW1lci5QcmVzc10sIFtIYW1tZXIuVGFwXV0sXG4gICAgfSlcblxuICAgIHRoaXMuX2hhbW1lci5vbigncGFuJywgKGU6IGFueSkgPT4ge1xuICAgICAgdGhpcy5vblByZXNzRW5kKClcbiAgICB9KVxuXG4gICAgdGhpcy5faGFtbWVyLm9uKCdwcmVzcycsIChlOiBhbnkpID0+IHtcbiAgICAgIHRoaXMucHJlc3NlZC5lbWl0KGUpXG4gICAgICB0aGlzLmNsZWFySW50KClcbiAgICAgIHRoaXMuaW50ID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICB0aGlzLmxvbmdQcmVzc2VkLmVtaXQoKVxuICAgICAgfSwgdGhpcy5pbnRlcnZhbCkgYXMgYW55XG4gICAgfSlcblxuICAgIHRoaXMuX2hhbW1lci5vbigncHJlc3N1cCcsIChlOiBhbnkpID0+IHtcbiAgICAgIHRoaXMub25QcmVzc0VuZCgpXG4gICAgfSlcblxuICAgIHRoaXMuX2hhbW1lci5vbigncmVsZWFzZScsIChlOiBhbnkpID0+IHtcbiAgICAgIHRoaXMub25QcmVzc0VuZCgpXG4gICAgfSlcblxuICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIChlOiBhbnkpID0+IHtcbiAgICAgIHRoaXMub25QcmVzc0VuZCgpXG4gICAgfSlcblxuICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdXQnLCAoZTogYW55KSA9PiB7XG4gICAgICB0aGlzLm9uUHJlc3NFbmQoKVxuICAgIH0pXG4gIH1cblxuICBjbGVhckludCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmludClcbiAgICAgIHRoaXMuaW50ID0gdW5kZWZpbmVkXG4gICAgfVxuICB9XG5cbiAgb25QcmVzc0VuZCgpOiB2b2lkIHtcbiAgICB0aGlzLmNsZWFySW50KClcbiAgICB0aGlzLnByZXNzRW5kZWQuZW1pdCgpXG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLm9uUHJlc3NFbmQoKVxuICAgIGlmICh0aGlzLl9oYW1tZXIpIHtcbiAgICAgIHRoaXMuX2hhbW1lci5kZXN0cm95KClcbiAgICAgIHRoaXMuX2hhbW1lciA9IG51bGxcbiAgICB9XG4gIH1cbn1cbiJdfQ==