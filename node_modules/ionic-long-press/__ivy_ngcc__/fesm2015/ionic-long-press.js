import { __decorate } from 'tslib';
import { EventEmitter, NgZone, ElementRef, Input, Output, Directive, NgModule } from '@angular/core';
import { Manager, Pan, DIRECTION_VERTICAL, Press, Tap } from 'hammerjs';
import { CommonModule } from '@angular/common';

// const LONG_PRESS_DEFAULT_TIMEOUT = 500;
// const MIN_LONG_PRESS_TIMEOUT = 40;
import * as ɵngcc0 from '@angular/core';
let LongPressDirective = class LongPressDirective {
    constructor(zone, el) {
        this.zone = zone;
        this.pressed = new EventEmitter();
        this.longPressed = new EventEmitter();
        this.pressEnded = new EventEmitter();
        this.el = el.nativeElement;
    }
    ngOnInit() {
        if (!this.interval)
            this.interval = 500;
        if (this.interval < 40) {
            throw new Error("A limit of 40ms is imposed so you don't destroy device performance. If you need less than a 40ms interval, please file an issue explaining your use case.");
        }
        this._hammer = new Manager(this.el, {
            recognizers: [[Pan, { direction: DIRECTION_VERTICAL }], [Press], [Tap]],
        });
        this._hammer.on('pan', (e) => {
            this.onPressEnd();
        });
        this._hammer.on('press', (e) => {
            this.pressed.emit(e);
            this.clearInt();
            this.int = setInterval(() => {
                this.longPressed.emit();
            }, this.interval);
        });
        this._hammer.on('pressup', (e) => {
            this.onPressEnd();
        });
        this._hammer.on('release', (e) => {
            this.onPressEnd();
        });
        this.el.addEventListener('mouseleave', (e) => {
            this.onPressEnd();
        });
        this.el.addEventListener('mouseout', (e) => {
            this.onPressEnd();
        });
    }
    clearInt() {
        if (this.int !== undefined) {
            clearInterval(this.int);
            this.int = undefined;
        }
    }
    onPressEnd() {
        this.clearInt();
        this.pressEnded.emit();
    }
    ngOnDestroy() {
        this.onPressEnd();
        if (this._hammer) {
            this._hammer.destroy();
            this._hammer = null;
        }
    }
};
LongPressDirective.ɵfac = function LongPressDirective_Factory(t) { return new (t || LongPressDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
LongPressDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LongPressDirective, selectors: [["", "ion-long-press", ""]], inputs: { interval: "interval" }, outputs: { pressed: "pressed", longPressed: "longPressed", pressEnded: "pressEnded" } });
LongPressDirective.ctorParameters = () => [
    { type: NgZone },
    { type: ElementRef }
];
__decorate([
    Input()
], LongPressDirective.prototype, "interval", void 0);
__decorate([
    Output()
], LongPressDirective.prototype, "pressed", void 0);
__decorate([
    Output()
], LongPressDirective.prototype, "longPressed", void 0);
__decorate([
    Output()
], LongPressDirective.prototype, "pressEnded", void 0);

let LongPressModule = class LongPressModule {
};
LongPressModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: LongPressModule });
LongPressModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function LongPressModule_Factory(t) { return new (t || LongPressModule)(); }, imports: [[CommonModule]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LongPressDirective, [{
        type: Directive,
        args: [{
                selector: '[ion-long-press]'
            }]
    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }]; }, { pressed: [{
            type: Output
        }], longPressed: [{
            type: Output
        }], pressEnded: [{
            type: Output
        }], interval: [{
            type: Input
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LongPressModule, { declarations: function () { return [LongPressDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [LongPressDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LongPressModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [LongPressDirective],
                exports: [LongPressDirective]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { LongPressDirective, LongPressModule };

//# sourceMappingURL=ionic-long-press.js.map