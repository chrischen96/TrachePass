/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngx-ionic-image-viewer.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, HostListener, Input, Renderer2 } from '@angular/core';
import { ModalController } from '@ionic/angular';
import { ViewerModalComponent } from './viewer-modal/viewer-modal.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ionic/angular';
export class NgxIonicImageViewerDirective {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} modalController
     */
    constructor(el, renderer, modalController) {
        this.el = el;
        this.renderer = renderer;
        this.modalController = modalController;
    }
    /**
     * @return {?}
     */
    onClick() {
        this.viewImage(this.src, this.srcFallback, this.srcHighRes, this.title, this.titleSize, this.text, this.scheme, this.slideOptions, this.swipeToClose);
    }
    /**
     * @param {?} error
     * @return {?}
     */
    onError(error) {
        if (this.src !== this.el.nativeElement.src) {
            this.src = this.el.nativeElement.src;
        }
        if (this.srcFallback) {
            this.renderer.setAttribute(this.el.nativeElement, 'src', this.srcFallback);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.el.nativeElement.hasAttribute('src')) {
            this.renderer.setAttribute(this.el.nativeElement, 'src', this.src);
        }
    }
    /**
     * @param {?} src
     * @param {?=} srcFallback
     * @param {?=} srcHighRes
     * @param {?=} title
     * @param {?=} titleSize
     * @param {?=} text
     * @param {?=} scheme
     * @param {?=} slideOptions
     * @param {?=} swipeToClose
     * @return {?}
     */
    viewImage(src, srcFallback = '', srcHighRes = '', title = '', titleSize = '', text = '', scheme = 'auto', slideOptions = {}, swipeToClose = true) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const modal = yield this.modalController.create({
                component: ViewerModalComponent,
                componentProps: {
                    src,
                    srcFallback,
                    srcHighRes,
                    title,
                    titleSize,
                    text,
                    scheme,
                    slideOptions,
                    swipeToClose
                },
                cssClass: this.cssClass instanceof Array ? ['ion-img-viewer', ...this.cssClass] : ['ion-img-viewer', this.cssClass],
                keyboardClose: true,
                showBackdrop: true
            });
            return yield modal.present();
        });
    }
}
NgxIonicImageViewerDirective.ɵfac = function NgxIonicImageViewerDirective_Factory(t) { return new (t || NgxIonicImageViewerDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ModalController)); };
NgxIonicImageViewerDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgxIonicImageViewerDirective, selectors: [["", "ionImgViewer", ""]], hostBindings: function NgxIonicImageViewerDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function NgxIonicImageViewerDirective_click_HostBindingHandler() { return ctx.onClick(); })("error", function NgxIonicImageViewerDirective_error_HostBindingHandler($event) { return ctx.onError($event); });
    } }, inputs: { src: "src", cssClass: "cssClass", scheme: "scheme", slideOptions: "slideOptions", srcFallback: "srcFallback", srcHighRes: "srcHighRes", swipeToClose: "swipeToClose", text: "text", title: "title", titleSize: "titleSize" } });
/** @nocollapse */
NgxIonicImageViewerDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ModalController }
];
NgxIonicImageViewerDirective.propDecorators = {
    cssClass: [{ type: Input }],
    scheme: [{ type: Input }],
    slideOptions: [{ type: Input }],
    src: [{ type: Input }],
    srcFallback: [{ type: Input }],
    srcHighRes: [{ type: Input }],
    swipeToClose: [{ type: Input }],
    text: [{ type: Input }],
    title: [{ type: Input }],
    titleSize: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click',] }],
    onError: [{ type: HostListener, args: ['error', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxIonicImageViewerDirective, [{
        type: Directive,
        args: [{
                selector: '[ionImgViewer]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc1.ModalController }]; }, { 
    /**
     * @return {?}
     */
    onClick: [{
            type: HostListener,
            args: ['click']
        }], 
    /**
     * @param {?} error
     * @return {?}
     */
    onError: [{
            type: HostListener,
            args: ['error', ['$event']]
        }], src: [{
            type: Input
        }], cssClass: [{
            type: Input
        }], scheme: [{
            type: Input
        }], slideOptions: [{
            type: Input
        }], srcFallback: [{
            type: Input
        }], srcHighRes: [{
            type: Input
        }], swipeToClose: [{
            type: Input
        }], text: [{
            type: Input
        }], title: [{
            type: Input
        }], titleSize: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    NgxIonicImageViewerDirective.prototype.cssClass;
    /** @type {?} */
    NgxIonicImageViewerDirective.prototype.scheme;
    /** @type {?} */
    NgxIonicImageViewerDirective.prototype.slideOptions;
    /** @type {?} */
    NgxIonicImageViewerDirective.prototype.src;
    /** @type {?} */
    NgxIonicImageViewerDirective.prototype.srcFallback;
    /** @type {?} */
    NgxIonicImageViewerDirective.prototype.srcHighRes;
    /** @type {?} */
    NgxIonicImageViewerDirective.prototype.swipeToClose;
    /** @type {?} */
    NgxIonicImageViewerDirective.prototype.text;
    /** @type {?} */
    NgxIonicImageViewerDirective.prototype.title;
    /** @type {?} */
    NgxIonicImageViewerDirective.prototype.titleSize;
    /**
     * @type {?}
     * @private
     */
    NgxIonicImageViewerDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    NgxIonicImageViewerDirective.prototype.renderer;
    /** @type {?} */
    NgxIonicImageViewerDirective.prototype.modalController;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWlvbmljLWltYWdlLXZpZXdlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIm5neC1pb25pYy1pbWFnZS12aWV3ZXIvbGliL25neC1pb25pYy1pbWFnZS12aWV3ZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQzlGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQzs7O0FBSzdFLE1BQU0sT0FBTyw0QkFBNEI7QUFBRztBQUFRO0FBQ3pDO0FBQTJCO0FBQWtDO0FBQVEsSUFBOUUsWUFBb0IsRUFBYyxFQUFVLFFBQW1CLEVBQVMsZUFBZ0M7QUFBSSxRQUF4RixPQUFFLEdBQUYsRUFBRSxDQUFZO0FBQUMsUUFBUyxhQUFRLEdBQVIsUUFBUSxDQUFXO0FBQUMsUUFBUSxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7QUFBQyxJQUFFLENBQUM7QUFDOUc7QUFDTztBQUFtQjtBQUFRLElBV1QsT0FBTztBQUNoQyxRQUFJLElBQUksQ0FBQyxTQUFTLENBQ1osSUFBSSxDQUFDLEdBQUcsRUFDUixJQUFJLENBQUMsV0FBVyxFQUNoQixJQUFJLENBQUMsVUFBVSxFQUNmLElBQUksQ0FBQyxLQUFLLEVBQ1YsSUFBSSxDQUFDLFNBQVMsRUFDZCxJQUFJLENBQUMsSUFBSSxFQUNULElBQUksQ0FBQyxNQUFNLEVBQ1gsSUFBSSxDQUFDLFlBQVksRUFDakIsSUFBSSxDQUFDLFlBQVksQ0FDbEIsQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNIO0FBQ087QUFBd0I7QUFBbUI7QUFDOUMsSUFEaUMsT0FBTyxDQUFDLEtBQUs7QUFDbEQsUUFBSSxJQUFJLElBQUksQ0FBQyxHQUFHLEtBQUssSUFBSSxDQUFDLEVB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K0I7QUFDakM7QUFBcUIsSUFBbkIsMkNBQXFCO0FBQ3ZCO0FBQXFCLElBQW5CLG1EQUE4QjtBQUNoQztBQUFxQixJQUFuQixrREFBNkI7QUFDL0I7QUFBcUIsSUFBbkIsb0RBQWdDO0FBQ2xDO0FBQXFCLElBQW5CLDRDQUF1QjtBQUN6QjtBQUFxQixJQUFuQiw2Q0FBd0I7QUFDMUI7QUFBcUIsSUFBbkIsaURBQTRCO0FBQzlCO0FBQ087QUFBaUI7QUFDckI7QUFBUSxJQWRHLDBDQUFzQjtBQUFDO0FBQVE7QUFBaUI7QUFBZ0I7QUFBUSxJQUFoRCxnREFBMkI7QUFBQztBQUFxQixJQUFwQix1REFBdUM7QUFBQztBQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0TGlzdGVuZXIsIElucHV0LCBSZW5kZXJlcjIsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTW9kYWxDb250cm9sbGVyIH0gZnJvbSAnQGlvbmljL2FuZ3VsYXInO1xuaW1wb3J0IHsgVmlld2VyTW9kYWxDb21wb25lbnQgfSBmcm9tICcuL3ZpZXdlci1tb2RhbC92aWV3ZXItbW9kYWwuY29tcG9uZW50JztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2lvbkltZ1ZpZXdlcl0nXG59KVxuZXhwb3J0IGNsYXNzIE5neElvbmljSW1hZ2VWaWV3ZXJEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHB1YmxpYyBtb2RhbENvbnRyb2xsZXI6IE1vZGFsQ29udHJvbGxlcikge31cblxuICBASW5wdXQoKSBjc3NDbGFzcz86IHN0cmluZyB8IHN0cmluZ1tdO1xuICBASW5wdXQoKSBzY2hlbWU/OiBzdHJpbmc7XG4gIEBJbnB1dCgpIHNsaWRlT3B0aW9ucz86IG9iamVjdDtcbiAgQElucHV0KCkgc3JjOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHNyY0ZhbGxiYWNrPzogc3RyaW5nO1xuICBASW5wdXQoKSBzcmNIaWdoUmVzPzogc3RyaW5nO1xuICBASW5wdXQoKSBzd2lwZVRvQ2xvc2U/OiBib29sZWFuO1xuICBASW5wdXQoKSB0ZXh0Pzogc3RyaW5nO1xuICBASW5wdXQoKSB0aXRsZT86IHN0cmluZztcbiAgQElucHV0KCkgdGl0bGVTaXplPzogc3RyaW5nO1xuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJykgb25DbGljaygpIHtcbiAgICB0aGlzLnZpZXdJbWFnZShcbiAgICAgIHRoaXMuc3JjLFxuICAgICAgdGhpcy5zcmNGYWxsYmFjayxcbiAgICAgIHRoaXMuc3JjSGlnaFJlcyxcbiAgICAgIHRoaXMudGl0bGUsXG4gICAgICB0aGlzLnRpdGxlU2l6ZSxcbiAgICAgIHRoaXMudGV4dCxcbiAgICAgIHRoaXMuc2NoZW1lLFxuICAgICAgdGhpcy5zbGlkZU9wdGlvbnMsXG4gICAgICB0aGlzLnN3aXBlVG9DbG9zZVxuICAgICk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdlcnJvcicsIFsnJGV2ZW50J10pIG9uRXJyb3IoZXJyb3IpIHtcbiAgICBpZiAodGhpcy5zcmMgIT09IHRoaXMuZWwubmF0aXZlRWxlbWVudC5zcmMpIHtcbiAgICAgIHRoaXMuc3JjID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnNyYztcbiAgICB9XG4gICAgaWYgKHRoaXMuc3JjRmFsbGJhY2spIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ3NyYycsIHRoaXMuc3JjRmFsbGJhY2spO1xuICAgIH1cbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICghdGhpcy5lbC5uYXRpdmVFbGVtZW50Lmhhc0F0dHJpYnV0ZSgnc3JjJykpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ3NyYycsIHRoaXMuc3JjKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyB2aWV3SW1hZ2UoXG4gICAgc3JjOiBzdHJpbmcsXG4gICAgc3JjRmFsbGJhY2s6IHN0cmluZyA9ICcnLFxuICAgIHNyY0hpZ2hSZXM6IHN0cmluZyA9ICcnLFxuICAgIHRpdGxlOiBzdHJpbmcgPSAnJyxcbiAgICB0aXRsZVNpemU6IHN0cmluZyA9ICcnLFxuICAgIHRleHQ6IHN0cmluZyA9ICcnLFxuICAgIHNjaGVtZTogc3RyaW5nID0gJ2F1dG8nLFxuICAgIHNsaWRlT3B0aW9uczogb2JqZWN0ID0ge30sXG4gICAgc3dpcGVUb0Nsb3NlOiBib29sZWFuID0gdHJ1ZVxuICApIHtcbiAgICBjb25zdCBtb2RhbCA9IGF3YWl0IHRoaXMubW9kYWxDb250cm9sbGVyLmNyZWF0ZSh7XG4gICAgICBjb21wb25lbnQ6IFZpZXdlck1vZGFsQ29tcG9uZW50LFxuICAgICAgY29tcG9uZW50UHJvcHM6IHtcbiAgICAgICAgc3JjLFxuICAgICAgICBzcmNGYWxsYmFjayxcbiAgICAgICAgc3JjSGlnaFJlcyxcbiAgICAgICAgdGl0bGUsXG4gICAgICAgIHRpdGxlU2l6ZSxcbiAgICAgICAgdGV4dCxcbiAgICAgICAgc2NoZW1lLFxuICAgICAgICBzbGlkZU9wdGlvbnMsXG4gICAgICAgIHN3aXBlVG9DbG9zZVxuICAgICAgfSxcbiAgICAgIGNzc0NsYXNzOiB0aGlzLmNzc0NsYXNzIGluc3RhbmNlb2YgQXJyYXkgPyBbJ2lvbi1pbWctdmlld2VyJywgLi4udGhpcy5jc3NDbGFzc10gOiBbJ2lvbi1pbWctdmlld2VyJywgdGhpcy5jc3NDbGFzc10sXG4gICAgICBrZXlib2FyZENsb3NlOiB0cnVlLFxuICAgICAgc2hvd0JhY2tkcm9wOiB0cnVlXG4gICAgfSk7XG5cbiAgICByZXR1cm4gYXdhaXQgbW9kYWwucHJlc2VudCgpO1xuICB9XG59XG4iXX0=