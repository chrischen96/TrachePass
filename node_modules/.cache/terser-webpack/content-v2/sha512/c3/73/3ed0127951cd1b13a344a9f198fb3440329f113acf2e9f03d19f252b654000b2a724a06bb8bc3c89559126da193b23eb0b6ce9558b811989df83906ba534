{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{qVyR:function(module,exports){var StyleNode=function(){this.start=0,this.end=0,this.previous=null,this.parent=null,this.rules=null,this.parsedCssText=\"\",this.cssText=\"\",this.atRule=!1,this.type=0,this.keyframesName=\"\",this.selector=\"\",this.parsedSelector=\"\"};function parse(text){return parseCss(function(text){var root=new StyleNode;root.start=0,root.end=text.length;for(var n=root,i=0,l=text.length;i<l;i++)if(text[i]===OPEN_BRACE){n.rules||(n.rules=[]);var p=n,previous=p.rules[p.rules.length-1]||null;(n=new StyleNode).start=i+1,n.parent=p,n.previous=previous,p.rules.push(n)}else text[i]===CLOSE_BRACE&&(n.end=i+1,n=n.parent||root);return root}(text=text.replace(RX.comments,\"\").replace(RX.port,\"\")),text)}function parseCss(node,text){var t=text.substring(node.start,node.end-1);if(node.parsedCssText=node.cssText=t.trim(),node.parent){t=(t=(t=function(s){return s.replace(/\\\\([0-9a-f]{1,6})\\s/gi,function(){for(var code=arguments[1],repeat=6-code.length;repeat--;)code=\"0\"+code;return\"\\\\\"+code})}(t=text.substring(node.previous?node.previous.end:node.parent.start,node.start-1))).replace(RX.multipleSpaces,\" \")).substring(t.lastIndexOf(\";\")+1);var s=node.parsedSelector=node.selector=t.trim();node.atRule=0===s.indexOf(AT_START),node.atRule?0===s.indexOf(MEDIA_START)?node.type=types.MEDIA_RULE:s.match(RX.keyframesRule)&&(node.type=types.KEYFRAMES_RULE,node.keyframesName=node.selector.split(RX.multipleSpaces).pop()):node.type=0===s.indexOf(VAR_START)?types.MIXIN_RULE:types.STYLE_RULE}var r$=node.rules;if(r$)for(var i=0,l=r$.length,r=void 0;i<l&&(r=r$[i]);i++)parseCss(r,text);return node}var types={STYLE_RULE:1,KEYFRAMES_RULE:7,MEDIA_RULE:4,MIXIN_RULE:1e3},OPEN_BRACE=\"{\",CLOSE_BRACE=\"}\",RX={comments:/\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//gim,port:/@import[^;]*;/gim,customProp:/(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\\n]|$)/gim,mixinProp:/(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\\n]|$)?/gim,mixinApply:/@apply\\s*\\(?[^);]*\\)?\\s*(?:[;\\n]|$)?/gim,varApply:/[^;:]*?:[^;]*?var\\([^;]*\\)(?:[;\\n]|$)?/gim,keyframesRule:/^@[^\\s]*keyframes/,multipleSpaces:/\\s+/g},VAR_START=\"--\",MEDIA_START=\"@media\",AT_START=\"@\";function findRegex(regex,cssText,offset){regex.lastIndex=0;var r=cssText.substring(offset).match(regex);if(r){var start=offset+r.index;return{start:start,end:start+r[0].length}}return null}var VAR_USAGE_START=/\\bvar\\(/,VAR_ASSIGN_START=/\\B--[\\w-]+\\s*:/,COMMENTS=/\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//gim,TRAILING_LINES=/^[\\t ]+\\n/gm;function compileVar(cssText,template,offset){var varMeta=function(cssText,offset){var varPos=findRegex(VAR_USAGE_START,cssText,offset);if(!varPos)return null;var endVar=function(cssText,offset){for(var count=0,i=offset;i<cssText.length;i++){var c=cssText[i];if(\"(\"===c)count++;else if(\")\"===c&&--count<=0)return i+1}return i}(cssText,varPos.start),_a=cssText.substring(varPos.end,endVar-1).split(\",\"),propName=_a[0],fallback=_a.slice(1);return{start:varPos.start,end:endVar,propName:propName.trim(),fallback:fallback.length>0?fallback.join(\",\").trim():void 0}}(cssText,offset);if(!varMeta)return template.push(cssText.substring(offset,cssText.length)),cssText.length;var propName=varMeta.propName,fallback=null!=varMeta.fallback?compileTemplate(varMeta.fallback):void 0;return template.push(cssText.substring(offset,varMeta.start),function(params){return function(props,prop,fallback){return props[prop]?props[prop]:fallback?executeTemplate(fallback,props):\"\"}(params,propName,fallback)}),varMeta.end}function executeTemplate(template,props){for(var final=\"\",i=0;i<template.length;i++){var s=template[i];final+=\"string\"==typeof s?s:s(props)}return final}function findEndValue(cssText,offset){for(var onStr=!1,double=!1,i=offset;i<cssText.length;i++){var c=cssText[i];if(onStr)double&&'\"'===c&&(onStr=!1),double||\"'\"!==c||(onStr=!1);else if('\"'===c)onStr=!0,double=!0;else if(\"'\"===c)onStr=!0,double=!1;else{if(\";\"===c)return i+1;if(\"}\"===c)return i}}return i}function compileTemplate(cssText){var index=0;cssText=function(cssText){for(var final=\"\",offset=0;;){var assignPos=findRegex(VAR_ASSIGN_START,cssText,offset),start=assignPos?assignPos.start:cssText.length;if(final+=cssText.substring(offset,start),!assignPos)break;offset=findEndValue(cssText,start)}return final}(cssText=cssText.replace(COMMENTS,\"\")).replace(TRAILING_LINES,\"\");for(var segments=[];index<cssText.length;)index=compileVar(cssText,segments,index);return segments}function resolveValues(selectors){var props={};selectors.forEach(function(selector){selector.declarations.forEach(function(dec){props[dec.prop]=dec.value})});for(var propsValues={},entries=Object.entries(props),_loop_1=function(i){var dirty=!1;if(entries.forEach(function(_a){var key=_a[0],propValue=executeTemplate(_a[1],propsValues);propValue!==propsValues[key]&&(propsValues[key]=propValue,dirty=!0)}),!dirty)return\"break\"},i=0;i<10&&\"break\"!==_loop_1();i++);return propsValues}function getSelectors(root,index){if(void 0===index&&(index=0),!root.rules)return[];var selectors=[];return root.rules.filter(function(rule){return rule.type===types.STYLE_RULE}).forEach(function(rule){var declarations=function(cssText){for(var xArray,declarations=[];xArray=FIND_DECLARATIONS.exec(cssText.trim());){var _a=normalizeValue(xArray[2]),value=_a.value,important=_a.important;declarations.push({prop:xArray[1].trim(),value:compileTemplate(value),important:important})}return declarations}(rule.cssText);declarations.length>0&&rule.parsedSelector.split(\",\").forEach(function(selector){selector=selector.trim(),selectors.push({selector:selector,declarations:declarations,specificity:1,nu:index})}),index++}),selectors}var FIND_DECLARATIONS=/(?:^|[;\\s{]\\s*)(--[\\w-]*?)\\s*:\\s*(?:((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};{])+)|\\{([^}]*)\\}(?:(?=[;\\s}])|$))/gm;function normalizeValue(value){var important=(value=value.replace(/\\s+/gim,\" \").trim()).endsWith(\"!important\");return important&&(value=value.substr(0,value.length-\"!important\".length).trim()),{value:value,important:important}}function getSelectorsForScopes(scopes){var selectors=[];return scopes.forEach(function(scope){selectors.push.apply(selectors,scope.selectors)}),selectors}function parseCSS(original){var ast=parse(original),template=compileTemplate(original);return{original:original,template:template,selectors:getSelectors(ast),usesCssVars:template.length>1}}function addGlobalStyle(globalScopes,styleEl){if(globalScopes.some(function(css){return css.styleEl===styleEl}))return!1;var css=parseCSS(styleEl.textContent);return css.styleEl=styleEl,globalScopes.push(css),!0}function updateGlobalScopes(scopes){var props=resolveValues(getSelectorsForScopes(scopes));scopes.forEach(function(scope){scope.usesCssVars&&(scope.styleEl.textContent=executeTemplate(scope.template,props))})}function replaceScope(original,oldScopeId,newScopeId){var replace;return replace=\".\"+newScopeId,original.replace(new RegExp(\"\\\\.\"+oldScopeId,\"g\"),replace)}function loadDocumentStyles(doc,globalScopes){return Array.from(doc.querySelectorAll(\"style:not([data-styles]):not([data-no-shim])\")).map(function(style){return addGlobalStyle(globalScopes,style)}).some(Boolean)}function addGlobalLink(doc,globalScopes,linkElm){var url=linkElm.href;return fetch(url).then(function(rsp){return rsp.text()}).then(function(text){if(((css=text).indexOf(\"var(\")>-1||CSS_VARIABLE_REGEXP.test(css))&&linkElm.parentNode){(function(css){return CSS_URL_REGEXP.lastIndex=0,CSS_URL_REGEXP.test(css)})(text)&&(text=function(css,originalUrl){var basePath=originalUrl.replace(/[^/]*$/,\"\");return css.replace(CSS_URL_REGEXP,function(fullMatch,url){return fullMatch.replace(url,basePath+url)})}(text,url));var styleEl=doc.createElement(\"style\");styleEl.setAttribute(\"data-styles\",\"\"),styleEl.textContent=text,addGlobalStyle(globalScopes,styleEl),linkElm.parentNode.insertBefore(styleEl,linkElm),linkElm.remove()}var css}).catch(function(err){console.error(err)})}var win,CSS_VARIABLE_REGEXP=/[\\s;{]--[-a-zA-Z0-9]+\\s*:/m,CSS_URL_REGEXP=/url[\\s]*\\([\\s]*['\"]?(?!(?:https?|data)\\:|\\/)([^\\'\\\"\\)]*)[\\s]*['\"]?\\)[\\s]*/gim,CustomStyle=function(){function CustomStyle(win,doc){this.win=win,this.doc=doc,this.count=0,this.hostStyleMap=new WeakMap,this.hostScopeMap=new WeakMap,this.globalScopes=[],this.scopesMap=new Map,this.didInit=!1}return CustomStyle.prototype.i=function(){var _this=this;return this.didInit||!this.win.requestAnimationFrame?Promise.resolve():(this.didInit=!0,new Promise(function(resolve){_this.win.requestAnimationFrame(function(){var doc,globalScopes;doc=_this.doc,globalScopes=_this.globalScopes,new MutationObserver(function(){loadDocumentStyles(doc,globalScopes)&&updateGlobalScopes(globalScopes)}).observe(document.head,{childList:!0}),function(doc,globalScopes){return loadDocumentStyles(doc,globalScopes),function(doc,globalScopes){for(var promises=[],linkElms=doc.querySelectorAll('link[rel=\"stylesheet\"][href]:not([data-no-shim])'),i=0;i<linkElms.length;i++)promises.push(addGlobalLink(doc,globalScopes,linkElms[i]));return Promise.all(promises)}(doc,globalScopes).then(function(){updateGlobalScopes(globalScopes)})}(_this.doc,_this.globalScopes).then(function(){return resolve()})})}))},CustomStyle.prototype.addLink=function(linkEl){var _this=this;return addGlobalLink(this.doc,this.globalScopes,linkEl).then(function(){_this.updateGlobal()})},CustomStyle.prototype.addGlobalStyle=function(styleEl){addGlobalStyle(this.globalScopes,styleEl)&&this.updateGlobal()},CustomStyle.prototype.createHostStyle=function(hostEl,cssScopeId,cssText,isScoped){if(this.hostScopeMap.has(hostEl))throw new Error(\"host style already created\");var scope,scopeId,template,selectors,baseScope=this.registerHostTemplate(cssText,cssScopeId,isScoped),styleEl=this.doc.createElement(\"style\");return styleEl.setAttribute(\"data-no-shim\",\"\"),baseScope.usesCssVars?isScoped?(styleEl[\"s-sc\"]=cssScopeId=baseScope.scopeId+\"-\"+this.count,styleEl.textContent=\"/*needs update*/\",this.hostStyleMap.set(hostEl,styleEl),this.hostScopeMap.set(hostEl,(scopeId=cssScopeId,template=(scope=baseScope).template.map(function(segment){return\"string\"==typeof segment?replaceScope(segment,scope.scopeId,scopeId):segment}),selectors=scope.selectors.map(function(sel){return Object.assign(Object.assign({},sel),{selector:replaceScope(sel.selector,scope.scopeId,scopeId)})}),Object.assign(Object.assign({},scope),{template:template,selectors:selectors,scopeId:scopeId}))),this.count++):(baseScope.styleEl=styleEl,baseScope.usesCssVars||(styleEl.textContent=executeTemplate(baseScope.template,{})),this.globalScopes.push(baseScope),this.updateGlobal(),this.hostScopeMap.set(hostEl,baseScope)):styleEl.textContent=cssText,styleEl},CustomStyle.prototype.removeHost=function(hostEl){var css=this.hostStyleMap.get(hostEl);css&&css.remove(),this.hostStyleMap.delete(hostEl),this.hostScopeMap.delete(hostEl)},CustomStyle.prototype.updateHost=function(hostEl){var scope=this.hostScopeMap.get(hostEl);if(scope&&scope.usesCssVars&&scope.isScoped){var styleEl=this.hostStyleMap.get(hostEl);if(styleEl){var props=resolveValues(function(hostEl,hostScopeMap,globalScopes){var selectors,scopes=[],scopesForElement=function(hostTemplateMap,node){for(var scopes=[];node;){var scope=hostTemplateMap.get(node);scope&&scopes.push(scope),node=node.parentElement}return scopes}(hostScopeMap,hostEl);return globalScopes.forEach(function(s){return scopes.push(s)}),scopesForElement.forEach(function(s){return scopes.push(s)}),(selectors=getSelectorsForScopes(scopes).filter(function(selector){return function(el,selector){return\":root\"===selector||\"html\"===selector||el.matches(selector)}(hostEl,selector.selector)})).sort(function(a,b){return a.specificity===b.specificity?a.nu-b.nu:a.specificity-b.specificity}),selectors}(hostEl,this.hostScopeMap,this.globalScopes));styleEl.textContent=executeTemplate(scope.template,props)}}},CustomStyle.prototype.updateGlobal=function(){updateGlobalScopes(this.globalScopes)},CustomStyle.prototype.registerHostTemplate=function(cssText,scopeId,isScoped){var scope=this.scopesMap.get(scopeId);return scope||((scope=parseCSS(cssText)).scopeId=scopeId,scope.isScoped=isScoped,this.scopesMap.set(scopeId,scope)),scope},CustomStyle}();!(win=\"undefined\"!=typeof window&&window)||win.__cssshim||win.CSS&&win.CSS.supports&&win.CSS.supports(\"color\",\"var(--c)\")||(win.__cssshim=new CustomStyle(win,win.document))}}]);","name":"stencil-polyfills-css-shim-es2015.5c64aadaa1805cecf74c.js","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[9],{\n\n/***/ \"qVyR\":\n/***/ (function(module, exports) {\n\n/*\nExtremely simple css parser. Intended to be not more than what we need\nand definitely not necessarily correct =).\n*/\n/** @unrestricted */\nvar StyleNode = /** @class */ (function () {\n    function StyleNode() {\n        this.start = 0;\n        this.end = 0;\n        this.previous = null;\n        this.parent = null;\n        this.rules = null;\n        this.parsedCssText = '';\n        this.cssText = '';\n        this.atRule = false;\n        this.type = 0;\n        this.keyframesName = '';\n        this.selector = '';\n        this.parsedSelector = '';\n    }\n    return StyleNode;\n}());\n// given a string of css, return a simple rule tree\n/**\n * @param {string} text\n * @return {StyleNode}\n */\nfunction parse(text) {\n    text = clean(text);\n    return parseCss(lex(text), text);\n}\n// remove stuff we don't care about that may hinder parsing\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction clean(cssText) {\n    return cssText.replace(RX.comments, '').replace(RX.port, '');\n}\n// super simple {...} lexer that returns a node tree\n/**\n * @param {string} text\n * @return {StyleNode}\n */\nfunction lex(text) {\n    var root = new StyleNode();\n    root['start'] = 0;\n    root['end'] = text.length;\n    var n = root;\n    for (var i = 0, l = text.length; i < l; i++) {\n        if (text[i] === OPEN_BRACE) {\n            if (!n['rules']) {\n                n['rules'] = [];\n            }\n            var p = n;\n            var previous = p['rules'][p['rules'].length - 1] || null;\n            n = new StyleNode();\n            n['start'] = i + 1;\n            n['parent'] = p;\n            n['previous'] = previous;\n            p['rules'].push(n);\n        }\n        else if (text[i] === CLOSE_BRACE) {\n            n['end'] = i + 1;\n            n = n['parent'] || root;\n        }\n    }\n    return root;\n}\n// add selectors/cssText to node tree\n/**\n * @param {StyleNode} node\n * @param {string} text\n * @return {StyleNode}\n */\nfunction parseCss(node, text) {\n    var t = text.substring(node['start'], node['end'] - 1);\n    node['parsedCssText'] = node['cssText'] = t.trim();\n    if (node.parent) {\n        var ss = node.previous ? node.previous['end'] : node.parent['start'];\n        t = text.substring(ss, node['start'] - 1);\n        t = _expandUnicodeEscapes(t);\n        t = t.replace(RX.multipleSpaces, ' ');\n        // TODO(sorvell): ad hoc; make selector include only after last ;\n        // helps with mixin syntax\n        t = t.substring(t.lastIndexOf(';') + 1);\n        var s = node['parsedSelector'] = node['selector'] = t.trim();\n        node['atRule'] = (s.indexOf(AT_START) === 0);\n        // note, support a subset of rule types...\n        if (node['atRule']) {\n            if (s.indexOf(MEDIA_START) === 0) {\n                node['type'] = types.MEDIA_RULE;\n            }\n            else if (s.match(RX.keyframesRule)) {\n                node['type'] = types.KEYFRAMES_RULE;\n                node['keyframesName'] = node['selector'].split(RX.multipleSpaces).pop();\n            }\n        }\n        else {\n            if (s.indexOf(VAR_START) === 0) {\n                node['type'] = types.MIXIN_RULE;\n            }\n            else {\n                node['type'] = types.STYLE_RULE;\n            }\n        }\n    }\n    var r$ = node['rules'];\n    if (r$) {\n        for (var i = 0, l = r$.length, r = void 0; (i < l) && (r = r$[i]); i++) {\n            parseCss(r, text);\n        }\n    }\n    return node;\n}\n/**\n * conversion of sort unicode escapes with spaces like `\\33 ` (and longer) into\n * expanded form that doesn't require trailing space `\\000033`\n * @param {string} s\n * @return {string}\n */\nfunction _expandUnicodeEscapes(s) {\n    return s.replace(/\\\\([0-9a-f]{1,6})\\s/gi, function () {\n        var code = arguments[1], repeat = 6 - code.length;\n        while (repeat--) {\n            code = '0' + code;\n        }\n        return '\\\\' + code;\n    });\n}\n/** @enum {number} */\nvar types = {\n    STYLE_RULE: 1,\n    KEYFRAMES_RULE: 7,\n    MEDIA_RULE: 4,\n    MIXIN_RULE: 1000\n};\nvar OPEN_BRACE = '{';\nvar CLOSE_BRACE = '}';\n// helper regexp's\nvar RX = {\n    comments: /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//gim,\n    port: /@import[^;]*;/gim,\n    customProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\\n]|$)/gim,\n    mixinProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\\n]|$)?/gim,\n    mixinApply: /@apply\\s*\\(?[^);]*\\)?\\s*(?:[;\\n]|$)?/gim,\n    varApply: /[^;:]*?:[^;]*?var\\([^;]*\\)(?:[;\\n]|$)?/gim,\n    keyframesRule: /^@[^\\s]*keyframes/,\n    multipleSpaces: /\\s+/g\n};\nvar VAR_START = '--';\nvar MEDIA_START = '@media';\nvar AT_START = '@';\nfunction findRegex(regex, cssText, offset) {\n    regex['lastIndex'] = 0;\n    var r = cssText.substring(offset).match(regex);\n    if (r) {\n        var start = offset + r['index'];\n        return {\n            start: start,\n            end: start + r[0].length\n        };\n    }\n    return null;\n}\nvar VAR_USAGE_START = /\\bvar\\(/;\nvar VAR_ASSIGN_START = /\\B--[\\w-]+\\s*:/;\nvar COMMENTS = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//gim;\nvar TRAILING_LINES = /^[\\t ]+\\n/gm;\nfunction resolveVar(props, prop, fallback) {\n    if (props[prop]) {\n        return props[prop];\n    }\n    if (fallback) {\n        return executeTemplate(fallback, props);\n    }\n    return '';\n}\nfunction findVarEndIndex(cssText, offset) {\n    var count = 0;\n    var i = offset;\n    for (; i < cssText.length; i++) {\n        var c = cssText[i];\n        if (c === '(') {\n            count++;\n        }\n        else if (c === ')') {\n            count--;\n            if (count <= 0) {\n                return i + 1;\n            }\n        }\n    }\n    return i;\n}\nfunction parseVar(cssText, offset) {\n    var varPos = findRegex(VAR_USAGE_START, cssText, offset);\n    if (!varPos) {\n        return null;\n    }\n    var endVar = findVarEndIndex(cssText, varPos.start);\n    var varContent = cssText.substring(varPos.end, endVar - 1);\n    var _a = varContent.split(','), propName = _a[0], fallback = _a.slice(1);\n    return {\n        start: varPos.start,\n        end: endVar,\n        propName: propName.trim(),\n        fallback: fallback.length > 0 ? fallback.join(',').trim() : undefined\n    };\n}\nfunction compileVar(cssText, template, offset) {\n    var varMeta = parseVar(cssText, offset);\n    if (!varMeta) {\n        template.push(cssText.substring(offset, cssText.length));\n        return cssText.length;\n    }\n    var propName = varMeta.propName;\n    var fallback = varMeta.fallback != null ? compileTemplate(varMeta.fallback) : undefined;\n    template.push(cssText.substring(offset, varMeta.start), function (params) { return resolveVar(params, propName, fallback); });\n    return varMeta.end;\n}\nfunction executeTemplate(template, props) {\n    var final = '';\n    for (var i = 0; i < template.length; i++) {\n        var s = template[i];\n        final += (typeof s === 'string')\n            ? s\n            : s(props);\n    }\n    return final;\n}\nfunction findEndValue(cssText, offset) {\n    var onStr = false;\n    var double = false;\n    var i = offset;\n    for (; i < cssText.length; i++) {\n        var c = cssText[i];\n        if (onStr) {\n            if (double && c === '\"') {\n                onStr = false;\n            }\n            if (!double && c === '\\'') {\n                onStr = false;\n            }\n        }\n        else {\n            if (c === '\"') {\n                onStr = true;\n                double = true;\n            }\n            else if (c === '\\'') {\n                onStr = true;\n                double = false;\n            }\n            else if (c === ';') {\n                return i + 1;\n            }\n            else if (c === '}') {\n                return i;\n            }\n        }\n    }\n    return i;\n}\nfunction removeCustomAssigns(cssText) {\n    var final = '';\n    var offset = 0;\n    while (true) {\n        var assignPos = findRegex(VAR_ASSIGN_START, cssText, offset);\n        var start = assignPos ? assignPos.start : cssText.length;\n        final += cssText.substring(offset, start);\n        if (assignPos) {\n            offset = findEndValue(cssText, start);\n        }\n        else {\n            break;\n        }\n    }\n    return final;\n}\nfunction compileTemplate(cssText) {\n    var index = 0;\n    cssText = cssText.replace(COMMENTS, '');\n    cssText = removeCustomAssigns(cssText)\n        .replace(TRAILING_LINES, '');\n    var segments = [];\n    while (index < cssText.length) {\n        index = compileVar(cssText, segments, index);\n    }\n    return segments;\n}\nfunction resolveValues(selectors) {\n    var props = {};\n    selectors.forEach(function (selector) {\n        selector.declarations.forEach(function (dec) {\n            props[dec.prop] = dec.value;\n        });\n    });\n    var propsValues = {};\n    var entries = Object.entries(props);\n    var _loop_1 = function (i) {\n        var dirty = false;\n        entries.forEach(function (_a) {\n            var key = _a[0], value = _a[1];\n            var propValue = executeTemplate(value, propsValues);\n            if (propValue !== propsValues[key]) {\n                propsValues[key] = propValue;\n                dirty = true;\n            }\n        });\n        if (!dirty) {\n            return \"break\";\n        }\n    };\n    for (var i = 0; i < 10; i++) {\n        var state_1 = _loop_1();\n        if (state_1 === \"break\")\n            break;\n    }\n    return propsValues;\n}\nfunction getSelectors(root, index) {\n    if (index === void 0) { index = 0; }\n    if (!root.rules) {\n        return [];\n    }\n    var selectors = [];\n    root.rules\n        .filter(function (rule) { return rule.type === types.STYLE_RULE; })\n        .forEach(function (rule) {\n        var declarations = getDeclarations(rule.cssText);\n        if (declarations.length > 0) {\n            rule.parsedSelector.split(',').forEach(function (selector) {\n                selector = selector.trim();\n                selectors.push({\n                    selector: selector,\n                    declarations: declarations,\n                    specificity: computeSpecificity(),\n                    nu: index\n                });\n            });\n        }\n        index++;\n    });\n    return selectors;\n}\nfunction computeSpecificity(_selector) {\n    return 1;\n}\nvar IMPORTANT = '!important';\nvar FIND_DECLARATIONS = /(?:^|[;\\s{]\\s*)(--[\\w-]*?)\\s*:\\s*(?:((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};{])+)|\\{([^}]*)\\}(?:(?=[;\\s}])|$))/gm;\nfunction getDeclarations(cssText) {\n    var declarations = [];\n    var xArray;\n    while (xArray = FIND_DECLARATIONS.exec(cssText.trim())) {\n        var _a = normalizeValue(xArray[2]), value = _a.value, important = _a.important;\n        declarations.push({\n            prop: xArray[1].trim(),\n            value: compileTemplate(value),\n            important: important,\n        });\n    }\n    return declarations;\n}\nfunction normalizeValue(value) {\n    var regex = /\\s+/gim;\n    value = value.replace(regex, ' ').trim();\n    var important = value.endsWith(IMPORTANT);\n    if (important) {\n        value = value.substr(0, value.length - IMPORTANT.length).trim();\n    }\n    return {\n        value: value,\n        important: important\n    };\n}\nfunction getActiveSelectors(hostEl, hostScopeMap, globalScopes) {\n    // computes the css scopes that might affect this particular element\n    // avoiding using spread arrays to avoid ts helper fns when in es5\n    var scopes = [];\n    var scopesForElement = getScopesForElement(hostScopeMap, hostEl);\n    // globalScopes are always took into account\n    globalScopes.forEach(function (s) { return scopes.push(s); });\n    // the parent scopes are computed by walking parent dom until <html> is reached\n    scopesForElement.forEach(function (s) { return scopes.push(s); });\n    // each scope might have an array of associated selectors\n    // let's flatten the complete array of selectors from all the scopes\n    var selectorSet = getSelectorsForScopes(scopes);\n    // we filter to only the selectors that matches the hostEl\n    var activeSelectors = selectorSet.filter(function (selector) { return matches(hostEl, selector.selector); });\n    // sort selectors by specifity\n    return sortSelectors(activeSelectors);\n}\nfunction getScopesForElement(hostTemplateMap, node) {\n    var scopes = [];\n    while (node) {\n        var scope = hostTemplateMap.get(node);\n        if (scope) {\n            scopes.push(scope);\n        }\n        node = node.parentElement;\n    }\n    return scopes;\n}\nfunction getSelectorsForScopes(scopes) {\n    var selectors = [];\n    scopes.forEach(function (scope) {\n        selectors.push.apply(selectors, scope.selectors);\n    });\n    return selectors;\n}\nfunction sortSelectors(selectors) {\n    selectors.sort(function (a, b) {\n        if (a.specificity === b.specificity) {\n            return a.nu - b.nu;\n        }\n        return a.specificity - b.specificity;\n    });\n    return selectors;\n}\nfunction matches(el, selector) {\n    return selector === ':root' || selector === 'html' || el.matches(selector);\n}\nfunction parseCSS(original) {\n    var ast = parse(original);\n    var template = compileTemplate(original);\n    var selectors = getSelectors(ast);\n    return {\n        original: original,\n        template: template,\n        selectors: selectors,\n        usesCssVars: template.length > 1\n    };\n}\nfunction addGlobalStyle(globalScopes, styleEl) {\n    if (globalScopes.some(function (css) { return css.styleEl === styleEl; })) {\n        return false;\n    }\n    var css = parseCSS(styleEl.textContent);\n    css.styleEl = styleEl;\n    globalScopes.push(css);\n    return true;\n}\nfunction updateGlobalScopes(scopes) {\n    var selectors = getSelectorsForScopes(scopes);\n    var props = resolveValues(selectors);\n    scopes.forEach(function (scope) {\n        if (scope.usesCssVars) {\n            scope.styleEl.textContent = executeTemplate(scope.template, props);\n        }\n    });\n}\nfunction reScope(scope, scopeId) {\n    var template = scope.template.map(function (segment) {\n        return (typeof segment === 'string')\n            ? replaceScope(segment, scope.scopeId, scopeId)\n            : segment;\n    });\n    var selectors = scope.selectors.map(function (sel) {\n        return Object.assign(Object.assign({}, sel), { selector: replaceScope(sel.selector, scope.scopeId, scopeId) });\n    });\n    return Object.assign(Object.assign({}, scope), { template: template,\n        selectors: selectors,\n        scopeId: scopeId });\n}\nfunction replaceScope(original, oldScopeId, newScopeId) {\n    original = replaceAll(original, \"\\\\.\" + oldScopeId, \".\" + newScopeId);\n    return original;\n}\nfunction replaceAll(input, find, replace) {\n    return input.replace(new RegExp(find, 'g'), replace);\n}\nfunction loadDocument(doc, globalScopes) {\n    loadDocumentStyles(doc, globalScopes);\n    return loadDocumentLinks(doc, globalScopes).then(function () {\n        updateGlobalScopes(globalScopes);\n    });\n}\nfunction startWatcher(doc, globalScopes) {\n    var mutation = new MutationObserver(function () {\n        if (loadDocumentStyles(doc, globalScopes)) {\n            updateGlobalScopes(globalScopes);\n        }\n    });\n    mutation.observe(document.head, { childList: true });\n}\nfunction loadDocumentLinks(doc, globalScopes) {\n    var promises = [];\n    var linkElms = doc.querySelectorAll('link[rel=\"stylesheet\"][href]:not([data-no-shim])');\n    for (var i = 0; i < linkElms.length; i++) {\n        promises.push(addGlobalLink(doc, globalScopes, linkElms[i]));\n    }\n    return Promise.all(promises);\n}\nfunction loadDocumentStyles(doc, globalScopes) {\n    var styleElms = Array.from(doc.querySelectorAll('style:not([data-styles]):not([data-no-shim])'));\n    return styleElms\n        .map(function (style) { return addGlobalStyle(globalScopes, style); })\n        .some(Boolean);\n}\nfunction addGlobalLink(doc, globalScopes, linkElm) {\n    var url = linkElm.href;\n    return fetch(url).then(function (rsp) { return rsp.text(); }).then(function (text) {\n        if (hasCssVariables(text) && linkElm.parentNode) {\n            if (hasRelativeUrls(text)) {\n                text = fixRelativeUrls(text, url);\n            }\n            var styleEl = doc.createElement('style');\n            styleEl.setAttribute('data-styles', '');\n            styleEl.textContent = text;\n            addGlobalStyle(globalScopes, styleEl);\n            linkElm.parentNode.insertBefore(styleEl, linkElm);\n            linkElm.remove();\n        }\n    }).catch(function (err) {\n        console.error(err);\n    });\n}\n// This regexp tries to determine when a variable is declared, for example:\n//\n// .my-el { --highlight-color: green; }\n//\n// but we don't want to trigger when a classname uses \"--\" or a pseudo-class is\n// used. We assume that the only characters that can preceed a variable\n// declaration are \"{\", from an opening block, \";\" from a preceeding rule, or a\n// space. This prevents the regexp from matching a word in a selector, since\n// they would need to start with a \".\" or \"#\". (We assume element names don't\n// start with \"--\").\nvar CSS_VARIABLE_REGEXP = /[\\s;{]--[-a-zA-Z0-9]+\\s*:/m;\nfunction hasCssVariables(css) {\n    return css.indexOf('var(') > -1 || CSS_VARIABLE_REGEXP.test(css);\n}\n// This regexp find all url() usages with relative urls\nvar CSS_URL_REGEXP = /url[\\s]*\\([\\s]*['\"]?(?!(?:https?|data)\\:|\\/)([^\\'\\\"\\)]*)[\\s]*['\"]?\\)[\\s]*/gim;\nfunction hasRelativeUrls(css) {\n    CSS_URL_REGEXP.lastIndex = 0;\n    return CSS_URL_REGEXP.test(css);\n}\nfunction fixRelativeUrls(css, originalUrl) {\n    // get the basepath from the original import url\n    var basePath = originalUrl.replace(/[^/]*$/, '');\n    // replace the relative url, with the new relative url\n    return css.replace(CSS_URL_REGEXP, function (fullMatch, url) {\n        // rhe new relative path is the base path + uri\n        // TODO: normalize relative URL\n        var relativeUrl = basePath + url;\n        return fullMatch.replace(url, relativeUrl);\n    });\n}\nvar CustomStyle = /** @class */ (function () {\n    function CustomStyle(win, doc) {\n        this.win = win;\n        this.doc = doc;\n        this.count = 0;\n        this.hostStyleMap = new WeakMap();\n        this.hostScopeMap = new WeakMap();\n        this.globalScopes = [];\n        this.scopesMap = new Map();\n        this.didInit = false;\n    }\n    CustomStyle.prototype.i = function () {\n        var _this = this;\n        if (this.didInit || !this.win.requestAnimationFrame) {\n            return Promise.resolve();\n        }\n        else {\n            this.didInit = true;\n            return new Promise(function (resolve) {\n                _this.win.requestAnimationFrame(function () {\n                    startWatcher(_this.doc, _this.globalScopes);\n                    loadDocument(_this.doc, _this.globalScopes).then(function () { return resolve(); });\n                });\n            });\n        }\n    };\n    CustomStyle.prototype.addLink = function (linkEl) {\n        var _this = this;\n        return addGlobalLink(this.doc, this.globalScopes, linkEl).then(function () {\n            _this.updateGlobal();\n        });\n    };\n    CustomStyle.prototype.addGlobalStyle = function (styleEl) {\n        if (addGlobalStyle(this.globalScopes, styleEl)) {\n            this.updateGlobal();\n        }\n    };\n    CustomStyle.prototype.createHostStyle = function (hostEl, cssScopeId, cssText, isScoped) {\n        if (this.hostScopeMap.has(hostEl)) {\n            throw new Error('host style already created');\n        }\n        var baseScope = this.registerHostTemplate(cssText, cssScopeId, isScoped);\n        var styleEl = this.doc.createElement('style');\n        styleEl.setAttribute('data-no-shim', '');\n        if (!baseScope.usesCssVars) {\n            // This component does not use (read) css variables\n            styleEl.textContent = cssText;\n        }\n        else if (isScoped) {\n            // This component is dynamic: uses css var and is scoped\n            styleEl['s-sc'] = cssScopeId = baseScope.scopeId + \"-\" + this.count;\n            styleEl.textContent = '/*needs update*/';\n            this.hostStyleMap.set(hostEl, styleEl);\n            this.hostScopeMap.set(hostEl, reScope(baseScope, cssScopeId));\n            this.count++;\n        }\n        else {\n            // This component uses css vars, but it's no-encapsulation (global static)\n            baseScope.styleEl = styleEl;\n            if (!baseScope.usesCssVars) {\n                styleEl.textContent = executeTemplate(baseScope.template, {});\n            }\n            this.globalScopes.push(baseScope);\n            this.updateGlobal();\n            this.hostScopeMap.set(hostEl, baseScope);\n        }\n        return styleEl;\n    };\n    CustomStyle.prototype.removeHost = function (hostEl) {\n        var css = this.hostStyleMap.get(hostEl);\n        if (css) {\n            css.remove();\n        }\n        this.hostStyleMap.delete(hostEl);\n        this.hostScopeMap.delete(hostEl);\n    };\n    CustomStyle.prototype.updateHost = function (hostEl) {\n        var scope = this.hostScopeMap.get(hostEl);\n        if (scope && scope.usesCssVars && scope.isScoped) {\n            var styleEl = this.hostStyleMap.get(hostEl);\n            if (styleEl) {\n                var selectors = getActiveSelectors(hostEl, this.hostScopeMap, this.globalScopes);\n                var props = resolveValues(selectors);\n                styleEl.textContent = executeTemplate(scope.template, props);\n            }\n        }\n    };\n    CustomStyle.prototype.updateGlobal = function () {\n        updateGlobalScopes(this.globalScopes);\n    };\n    CustomStyle.prototype.registerHostTemplate = function (cssText, scopeId, isScoped) {\n        var scope = this.scopesMap.get(scopeId);\n        if (!scope) {\n            scope = parseCSS(cssText);\n            scope.scopeId = scopeId;\n            scope.isScoped = isScoped;\n            this.scopesMap.set(scopeId, scope);\n        }\n        return scope;\n    };\n    return CustomStyle;\n}());\n(function (win) {\n    if (win && !win.__cssshim && (!(win.CSS && win.CSS.supports && win.CSS.supports('color', 'var(--c)')))) {\n        win.__cssshim = new CustomStyle(win, win.document);\n    }\n})(typeof window !== 'undefined' && window);\n\n\n/***/ })\n\n}]);","inputSourceMap":null}