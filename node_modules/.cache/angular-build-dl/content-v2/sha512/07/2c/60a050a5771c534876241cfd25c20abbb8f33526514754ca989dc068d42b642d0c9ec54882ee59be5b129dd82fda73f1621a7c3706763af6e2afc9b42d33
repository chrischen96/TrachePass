{"version":3,"sources":["webpack:///src/app/test-field-data-input/test-field-data-input.page.ts","webpack:///src/app/test-field-data-input/test-field-data-input-routing.module.ts","webpack:///src/app/services/user-data.service.ts","webpack:///src/app/test-field-data-input/test-field-data-input.page.html","webpack:///src/app/test-field-data-input/test-field-data-input.module.ts","webpack:///src/app/test-field-data-input/test-field-data-input.page.scss"],"names":["TestFieldDataInputPage","userDataService","formBuilder","router","editInfo","group","patientName","nhsNum","carer","phoneNo","relationship","tubeType","sizeID","shaftLength","suctionLength","notes","loadUserProfile","updateDefault","console","log","patchValue","userProfileValue","Object","keys","controls","forEach","key","get","value","saveUserProfile","navigate","selector","template","routes","path","component","TestFieldDataInputPageRoutingModule","imports","forChild","exports","Storage","UserDataService","userProfileKey","userProfileString","medicalRecordValue","medicalRecordKey","medicalRecordString","versionHistoryValue","versionHistoryKey","exporter","exporterString","JSON","stringify","userProfile","medicalRecord","userProfileGet","parse","versionHistoryGet","oldDataGet","oldDataValue","toSave","time","Date","toISOString","slice","type","saveVersion","set","medicalRecordGet","unshift","length","providedIn","TestFieldDataInputPageModule","declarations"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eAKA;;;UAMaA,sBAAsB;AAIjC;AACA,wCAAmBC,eAAnB,EAA4DC,WAA5D,EAA8FC,MAA9F,EAA8G;AAAA;;AAA3F,eAAAF,eAAA,GAAAA,eAAA;AAAyC,eAAAC,WAAA,GAAAA,WAAA;AAAkC,eAAAC,MAAA,GAAAA,MAAA,CAAgB,CAC5G;;AACA,eAAKC,QAAL,GAAgB,KAAKF,WAAL,CAAiBG,KAAjB,CAAuB;AACrC;AACAC,uBAAW,EAAE,CAAC,EAAD,CAFwB;AAGrCC,kBAAM,EAAE,CAAC,EAAD,CAH6B;AAIrCC,iBAAK,EAAE,CAAC,EAAD,CAJ8B;AAKrCC,mBAAO,EAAE,CAAC,EAAD,CAL4B;AAMrCC,wBAAY,EAAE,CAAC,EAAD,CANuB;AAOrCC,oBAAQ,EAAE,CAAC,EAAD,CAP2B;AAQrCC,kBAAM,EAAC,CAAC,EAAD,CAR8B;AASrCC,uBAAW,EAAC,CAAC,EAAD,CATyB;AAUrCC,yBAAa,EAAC,CAAC,EAAD,CAVuB;AAWrCC,iBAAK,EAAC,CAAC,EAAD;AAX+B,WAAvB,CAAhB;AAaD;;AApBgC;AAAA;AAAA,iBAsB3B,oBAAW;;;;;;;AAEf,6BAAM,KAAKd,eAAL,CAAqBe,eAArB,EAAN;;;AACA;AACA,2BAAKC,aAAL;;;;;;;;;AACD,WA3BgC,CA6BjC;;AA7BiC;AAAA;AAAA,iBA8BjC,yBAAgB;AACdC,mBAAO,CAACC,GAAR,CAAY,UAAZ;AACA,iBAAKf,QAAL,CAAcgB,UAAd,CAAyB;AACvBd,yBAAW,EAAE,KAAKL,eAAL,CAAqBoB,gBAArB,CAAsC,aAAtC,KAAwD,EAD9C;AAEvBd,oBAAM,EAAE,KAAKN,eAAL,CAAqBoB,gBAArB,CAAsC,QAAtC,KAAmD,EAFpC;AAGvBb,mBAAK,EAAE,KAAKP,eAAL,CAAqBoB,gBAArB,CAAsC,OAAtC,KAAkD,EAHlC;AAIvBZ,qBAAO,EAAE,KAAKR,eAAL,CAAqBoB,gBAArB,CAAsC,SAAtC,KAAoD,EAJtC;AAKvBX,0BAAY,EAAE,KAAKT,eAAL,CAAqBoB,gBAArB,CAAsC,cAAtC,KAAyD,EALhD;AAMvBV,sBAAQ,EAAE,KAAKV,eAAL,CAAqBoB,gBAArB,CAAsC,UAAtC,KAAqD,EANxC;AAOvBT,oBAAM,EAAE,KAAKX,eAAL,CAAqBoB,gBAArB,CAAsC,QAAtC,KAAmD,EAPpC;AAQvBR,yBAAW,EAAE,KAAKZ,eAAL,CAAqBoB,gBAArB,CAAsC,aAAtC,KAAwD,EAR9C;AASvBP,2BAAa,EAAE,KAAKb,eAAL,CAAqBoB,gBAArB,CAAsC,eAAtC,KAA0D,EATlD;AAUvBN,mBAAK,EAAE,KAAKd,eAAL,CAAqBoB,gBAArB,CAAsC,OAAtC,KAAkD;AAVlC,aAAzB;AAYD,WA5CgC,CA8CjC;;AA9CiC;AAAA;AAAA,iBA+C3B,uBAAc;;;;;;;;AAClBC,4BAAM,CAACC,IAAP,CAAY,KAAKnB,QAAL,CAAcoB,QAA1B,EAAoCC,OAApC,CAA4C,UAAAC,GAAG,EAAI;AACjD;AACA;AACA;AACA,6BAAI,CAACzB,eAAL,CAAqBoB,gBAArB,CAAsCK,GAAtC,IAA6C,KAAI,CAACtB,QAAL,CAAcuB,GAAd,CAAkBD,GAAlB,EAAuBE,KAApE;AACAV,+BAAO,CAACC,GAAR,CAAYO,GAAZ,EAAiB,KAAI,CAACtB,QAAL,CAAcuB,GAAd,CAAkBD,GAAlB,EAAuBE,KAAxC;AACD,uBAND;AAOA,2BAAK3B,eAAL,CAAqB4B,eAArB;AACA,2BAAKZ,aAAL,G,CACA;;AACA,2BAAKd,MAAL,CAAY2B,QAAZ,CAAqB,CAAC,WAAD,CAArB;;;;;;;;;AACD;AA3DgC;;AAAA;AAAA,S;;;;gBAV1B;;gBACY;;gBACZ;;;;AAQI9B,4BAAsB,6DALlC,gEAAU;AACT+B,gBAAQ,EAAE,2BADD;AAETC,gBAAQ,EAAR,mFAFS;;AAAA,OAAV,CAKkC,GAAtBhC,sBAAsB,CAAtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNb,UAAMiC,MAAM,GAAW,CACrB;AACEC,YAAI,EAAE,EADR;AAEEC,iBAAS,EAAE;AAFb,OADqB,CAAvB;;UAWaC,mCAAmC;AAAA;AAAA,O;;AAAnCA,yCAAmC,6DAJ/C,+DAAS;AACRC,eAAO,EAAE,CAAC,6DAAaC,QAAb,CAAsBL,MAAtB,CAAD,CADD;AAERM,eAAO,EAAE,CAAC,4DAAD;AAFD,OAAT,CAI+C,GAAnCH,mCAAmC,CAAnC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCZLI,O,GAAY,uD,CAAZA,O;;UAKKC,eAAe;AAgB1B,mCAAc;AAAA;;AAdP,eAAApB,gBAAA,GAAmB,EAAnB;AACC,eAAAqB,cAAA,GAAyB,aAAzB;AACD,eAAAC,iBAAA,GAA4B,EAA5B;AAEA,eAAAC,kBAAA,GAAqB,EAArB;AACC,eAAAC,gBAAA,GAA0B,eAA1B;AACD,eAAAC,mBAAA,GAA8B,EAA9B;AAEA,eAAAC,mBAAA,GAAsB,EAAtB;AACC,eAAAC,iBAAA,GAA2B,gBAA3B;AAED,eAAAC,QAAA,GAAW,EAAX;AACA,eAAAC,cAAA,GAAiB,EAAjB;AAEU;;AAhBS;AAAA;AAAA,iBAiBpB,sBAAa;;;;;;AACjB,2BAAKP,iBAAL,GAAyBQ,IAAI,CAACC,SAAL,CAAe,KAAK/B,gBAApB,CAAzB;AACA,2BAAKyB,mBAAL,GAA2BK,IAAI,CAACC,SAAL,CAAe,KAAKR,kBAApB,CAA3B;AAEA,2BAAKK,QAAL,GAAgB;AACdI,mCAAW,EAAE,KAAKV,iBADJ;AAEdW,qCAAa,EAAE,KAAKR;AAFN,uBAAhB;AAIA,2BAAKI,cAAL,GAAsBC,IAAI,CAACC,SAAL,CAAe,KAAKH,QAApB,CAAtB;;;;;;;;;AACD;AA1ByB;AAAA;AAAA,iBA4BpB,2BAAe;;;;;;;;AACG,6BAAMT,OAAO,CAACb,GAAR,CAAY;AAAED,2BAAG,EAAE,KAAKgB;AAAZ,uBAAZ,CAAN;;;AAAhBa,oC;AACN,2BAAKlC,gBAAL,GAAwB8B,IAAI,CAACK,KAAL,CAAWD,cAAc,CAAC3B,KAA1B,KAAoC,EAA5D;AACAV,6BAAO,CAACC,GAAR,CAAY,kBAAZ;;AAC0B,6BAAMqB,OAAO,CAACb,GAAR,CAAY;AAAED,2BAAG,EAAE,KAAKsB;AAAZ,uBAAZ,CAAN;;;AAApBS,uC;AACN,2BAAKV,mBAAL,GAA2BI,IAAI,CAACK,KAAL,CAAWC,iBAAiB,CAAC7B,KAA7B,KAAuC,EAAlE;;;;;;;;;AACD,WAlCyB,CAkCxB;;AAlCwB;AAAA;AAAA,iBAoCpB,2BAAkB;;;;;;;;AACH,6BAAMY,OAAO,CAACb,GAAR,CAAY;AAAED,2BAAG,EAAE,KAAKgB;AAAZ,uBAAZ,CAAN;;;AAAbgB,gC;AACAC,kC,GAAeR,IAAI,CAACK,KAAL,CAAWE,UAAU,CAAC9B,KAAtB,KAAgC,E;AACrDV,6BAAO,CAACC,GAAR,CAAYwC,YAAZ;AACMC,4B,GAAS;AACbC,4BAAI,EAAE,IAAIC,IAAJ,GAAWC,WAAX,GAAyBC,KAAzB,CAA+B,CAA/B,EAAiC,EAAjC,CADO;AAEbC,4BAAI,EAAE,cAFO;AAGbrC,6BAAK,EAAE+B;AAHM,uB;AAKf,2BAAKO,WAAL,CAAiBN,MAAjB;AACApB,6BAAO,CAAC2B,GAAR,CAAY;AACVzC,2BAAG,EAAE,KAAKgB,cADA;AAEVd,6BAAK,EAAEuB,IAAI,CAACC,SAAL,CAAe,KAAK/B,gBAApB;AAFG,uBAAZ;;;;;;;;;AAID,WAlDyB,CAkDxB;;AAlDwB;AAAA;AAAA,iBAoDpB,6BAAiB;;;;;;;;AACG,6BAAMmB,OAAO,CAACb,GAAR,CAAY;AAAED,2BAAG,EAAE,KAAKmB;AAAZ,uBAAZ,CAAN;;;AAAlBuB,sC;AACN,2BAAKxB,kBAAL,GAA0BO,IAAI,CAACK,KAAL,CAAWY,gBAAgB,CAACxC,KAA5B,KAAsC,EAAhE;AACAV,6BAAO,CAACC,GAAR,CAAY,kBAAZ;;AAC0B,6BAAMqB,OAAO,CAACb,GAAR,CAAY;AAAED,2BAAG,EAAE,KAAKsB;AAAZ,uBAAZ,CAAN;;;AAApBS,uC;AACN,2BAAKV,mBAAL,GAA2BI,IAAI,CAACK,KAAL,CAAWC,iBAAiB,CAAC7B,KAA7B,KAAuC,EAAlE;;;;;;;;;AACD,WA1DyB,CA0DxB;;AA1DwB;AAAA;AAAA,iBA4DpB,6BAAoB;;;;;;;;AACL,6BAAMY,OAAO,CAACb,GAAR,CAAY;AAAED,2BAAG,EAAE,KAAKmB;AAAZ,uBAAZ,CAAN;;;AAAba,gC;AACAC,kC,GAAeR,IAAI,CAACK,KAAL,CAAWE,UAAU,CAAC9B,KAAtB,KAAgC,E;AAC/CgC,4B,GAAS;AACbC,4BAAI,EAAE,IAAIC,IAAJ,GAAWC,WAAX,GAAyBC,KAAzB,CAA+B,CAA/B,EAAiC,EAAjC,CADO;AAEbC,4BAAI,EAAE,gBAFO;AAGbrC,6BAAK,EAAE+B;AAHM,uB;AAKf,2BAAKO,WAAL,CAAiBN,MAAjB;AACApB,6BAAO,CAAC2B,GAAR,CAAY;AACVzC,2BAAG,EAAE,KAAKmB,gBADA;AAEVjB,6BAAK,EAAEuB,IAAI,CAACC,SAAL,CAAe,KAAKR,kBAApB;AAFG,uBAAZ;;;;;;;;;AAID,WAzEyB,CAyExB;;AAzEwB;AAAA;AAAA,iBA2E1B,qBAAYgB,MAAZ,EAAuB;AACrB,iBAAKb,mBAAL,CAAyBsB,OAAzB,CAAiCT,MAAjC;AACA1C,mBAAO,CAACC,GAAR,CAAY,KAAK4B,mBAAjB;AACA7B,mBAAO,CAACC,GAAR,CAAY,KAAK4B,mBAAL,CAAyBuB,MAArC;;AACA,gBAAI,KAAKvB,mBAAL,CAAyBuB,MAAzB,GAAkC,EAAtC,EAA0C;AACxCpD,qBAAO,CAACC,GAAR,CAAY,UAAZ;AACA,mBAAK4B,mBAAL,GAA2B,KAAKA,mBAAL,CAAyBiB,KAAzB,CAA+B,CAA/B,EAAiC,EAAjC,CAA3B;AACA9C,qBAAO,CAACC,GAAR,CAAY,KAAK4B,mBAAjB;AACD;;AACDP,mBAAO,CAAC2B,GAAR,CAAY;AACVzC,iBAAG,EAAE,KAAKsB,iBADA;AAEVpB,mBAAK,EAAEuB,IAAI,CAACC,SAAL,CAAe,KAAKL,mBAApB;AAFG,aAAZ;AAID;AAxFyB;AAAA;AAAA,iBA0F1B,2BAAkB;AAChB,iBAAKJ,iBAAL,GAAyBQ,IAAI,CAACC,SAAL,CAAe,KAAK/B,gBAApB,CAAzB;AACD;AA5FyB;;AAAA;AAAA,S;;;;;;AAAfoB,qBAAe,6DAH3B,iEAAW;AACV8B,kBAAU,EAAE;AADF,OAAX,CAG2B,GAAf9B,eAAe,CAAf;;;;;;;;;;;;;;;;ACTb;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eCGf;;;UAmBa+B,4BAA4B;AAAA;AAAA,O;;AAA5BA,kCAA4B,6DAVxC,+DAAS;AACRnC,eAAO,EAAE,CACP,4DADO,EAEP,0DAFO,EAGP,0DAHO,EAIP,yGAJO,EAKP,kEALO,CADD;AAQRoC,oBAAY,EAAE,CAAC,kFAAD;AARN,OAAT,CAUwC,GAA5BD,4BAA4B,CAA5B;;;;;;;;;;;;;;;;ACtBb;AAAe;;;AAAA","file":"test-field-data-input-test-field-data-input-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { UserDataService } from '../services/user-data.service'; \nimport { Validators, FormBuilder, FormGroup, FormControl, ReactiveFormsModule } from '@angular/forms';\nimport { Router } from '@angular/router';\n\n//notes https://ionicthemes.com/tutorials/about/forms-and-validation-in-ionic\n@Component({\n  selector: 'app-test-field-data-input',\n  templateUrl: './test-field-data-input.page.html',\n  styleUrls: ['./test-field-data-input.page.scss'],\n})\nexport class TestFieldDataInputPage implements OnInit {\n  //initialize form grup\n  public editInfo : FormGroup;\n  \n  //calling data service nd form control to build form\n  constructor(public userDataService: UserDataService, public formBuilder: FormBuilder, private router: Router) {\n    //crreating form control\n    this.editInfo = this.formBuilder.group({\n      //use different valaditator\n      patientName: ['', ],\n      nhsNum: ['', ],\n      carer: ['', ],\n      phoneNo: ['', ],\n      relationship: ['', ],\n      tubeType: ['', ],\n      sizeID:['' , ],\n      shaftLength:['', ],\n      suctionLength:['', ],\n      notes:['', ],\n    });\n  }\n  \n  async ngOnInit() {\n    //load user data must await!!\n    await this.userDataService.loadUserProfile();\n    //updating the form default value with new value\n    this.updateDefault();\n  }\n\n  //updating default value\n  updateDefault() {\n    console.log(\"updating\");\n    this.editInfo.patchValue({\n      patientName: this.userDataService.userProfileValue[\"patientName\"] || \"\",\n      nhsNum: this.userDataService.userProfileValue[\"nhsNum\"] || \"\",\n      carer: this.userDataService.userProfileValue[\"carer\"] || \"\",\n      phoneNo: this.userDataService.userProfileValue[\"phoneNo\"] || \"\",\n      relationship: this.userDataService.userProfileValue[\"relationship\"] || \"\",\n      tubeType: this.userDataService.userProfileValue[\"tubeType\"] || \"\",\n      sizeID: this.userDataService.userProfileValue[\"sizeID\"] || \"\",\n      shaftLength: this.userDataService.userProfileValue[\"shaftLength\"] || \"\",\n      suctionLength: this.userDataService.userProfileValue[\"suctionLength\"] || \"\",\n      notes: this.userDataService.userProfileValue[\"notes\"] || \"\",\n    })\n  }\n\n  // loop and set all values in the DB\n  async processForm() {\n    Object.keys(this.editInfo.controls).forEach(key => {\n      //console.log(\"saving\")\n      //this.saveValue(String(key), String(this.testing.get(key).value));\n      //console.log(String(key), String(this.testing.get(key).value), this.UserDataService.getValue(key));\n      this.userDataService.userProfileValue[key] = this.editInfo.get(key).value;\n      console.log(key, this.editInfo.get(key).value)\n    });\n    this.userDataService.saveUserProfile();\n    this.updateDefault();\n    //go ack to the other page\n    this.router.navigate(['form-temp']);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { TestFieldDataInputPage } from './test-field-data-input.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: TestFieldDataInputPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TestFieldDataInputPageRoutingModule {}\n","import { Injectable } from '@angular/core';\n\nimport { Plugins, Capacitor, } from '@capacitor/core';\n\nconst { Storage } = Plugins;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserDataService {\n\n  public userProfileValue = {};\n  private userProfileKey: string = \"userProfile\";\n  public userProfileString: string = \"\";\n\n  public medicalRecordValue = {};\n  private medicalRecordKey:string = \"medicalRecord\";\n  public medicalRecordString: string = \"\";\n\n  public versionHistoryValue = [];\n  private versionHistoryKey:string = 'versionHistory';\n\n  public exporter = {};\n  public exporterString = \"\";\n\n  constructor() { }\n  async exportData() {\n    this.userProfileString = JSON.stringify(this.userProfileValue);\n    this.medicalRecordString = JSON.stringify(this.medicalRecordValue);\n\n    this.exporter = {\n      userProfile: this.userProfileString,\n      medicalRecord: this.medicalRecordString,\n    }\n    this.exporterString = JSON.stringify(this.exporter);\n  }\n\n  async loadUserProfile(){\n    const userProfileGet= await Storage.get({ key: this.userProfileKey });\n    this.userProfileValue = JSON.parse(userProfileGet.value) || {};\n    console.log(\"finished loading\");\n    const versionHistoryGet = await Storage.get({ key: this.versionHistoryKey });\n    this.versionHistoryValue = JSON.parse(versionHistoryGet.value) || [];\n  } //load user profile from storage\n\n  async saveUserProfile() {\n    const oldDataGet = await Storage.get({ key: this.userProfileKey});\n    const oldDataValue = JSON.parse(oldDataGet.value) || {};\n    console.log(oldDataValue);\n    const toSave = {\n      time: new Date().toISOString().slice(0,16),\n      type: 'User Profile',\n      value: oldDataValue,\n    }\n    this.saveVersion(toSave);\n    Storage.set({\n      key: this.userProfileKey,\n      value: JSON.stringify(this.userProfileValue),\n    })\n  } //save updated user profile to storage\n\n  async loadMedicalRecord(){\n    const medicalRecordGet= await Storage.get({ key: this.medicalRecordKey });\n    this.medicalRecordValue = JSON.parse(medicalRecordGet.value) || {};\n    console.log(\"finished loading\");\n    const versionHistoryGet = await Storage.get({ key: this.versionHistoryKey });\n    this.versionHistoryValue = JSON.parse(versionHistoryGet.value) || [];\n  } //load medical record from storage\n\n  async saveMedicalRecord() {\n    const oldDataGet = await Storage.get({ key: this.medicalRecordKey});\n    const oldDataValue = JSON.parse(oldDataGet.value) || {};\n    const toSave = {\n      time: new Date().toISOString().slice(0,16),\n      type: 'Medical Record',\n      value: oldDataValue,\n    }\n    this.saveVersion(toSave);\n    Storage.set({\n      key: this.medicalRecordKey,\n      value: JSON.stringify(this.medicalRecordValue),\n    })\n  } //save new medical record to storage\n\n  saveVersion(toSave: any){\n    this.versionHistoryValue.unshift(toSave);\n    console.log(this.versionHistoryValue);\n    console.log(this.versionHistoryValue.length);\n    if (this.versionHistoryValue.length > 10) {\n      console.log(\"too long\")\n      this.versionHistoryValue = this.versionHistoryValue.slice(0,10);\n      console.log(this.versionHistoryValue);\n    }\n    Storage.set({\n      key: this.versionHistoryKey,\n      value: JSON.stringify(this.versionHistoryValue)\n    })\n  }\n\n  convertToString() {\n    this.userProfileString = JSON.stringify(this.userProfileValue);\n  }\n}\n","export default \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-buttons slot=\\\"start\\\">  \\n      <ion-menu-button color=\\\"dark\\\"></ion-menu-button>   \\n    </ion-buttons>  \\n    <ion-title>Edit Patient Information</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <!--This is the group for form conrol remember to add ReactiveFormModule to the import of the page module-->\\n  <form [formGroup]=\\\"editInfo\\\" (ngSubmit)=\\\"processForm()\\\">\\n    <ion-item-group>\\n      <ion-toolbar>\\n        <ion-title>Patient Information</ion-title>\\n      </ion-toolbar>\\n      <ion-item>\\n        <ion-label>Patient Name: </ion-label>\\n        <ion-input type=\\\"text\\\" formControlName=\\\"patientName\\\"></ion-input>\\n      </ion-item>\\n      <ion-item>\\n        <ion-label>NHS Number: </ion-label>\\n        <ion-input type=\\\"text\\\" formControlName=\\\"nhsNum\\\"></ion-input>\\n      </ion-item>\\n    </ion-item-group>\\n    <ion-item-group>\\n      <ion-toolbar>\\n        <ion-title>Carer Information</ion-title>\\n      </ion-toolbar>\\n      <ion-item>\\n        <ion-label>Carer: </ion-label>\\n        <ion-input type=\\\"text\\\" formControlName=\\\"carer\\\"></ion-input>\\n      </ion-item>\\n      <ion-item>\\n        <ion-label>Phone Number: </ion-label>\\n        <ion-input type=\\\"text\\\" formControlName=\\\"phoneNo\\\"></ion-input>\\n      </ion-item>\\n      <ion-item>\\n        <ion-label>Relationship: </ion-label>\\n        <ion-input type=\\\"text\\\" formControlName=\\\"relationship\\\"></ion-input>\\n      </ion-item>\\n    </ion-item-group>\\n    <ion-item-group>\\n      <ion-toolbar>\\n        <ion-title>Tube Information</ion-title>\\n      </ion-toolbar>\\n      <ion-item>\\n        <ion-label>Toogle Custom Value</ion-label>\\n        <ion-toggle formControlName=\\\"customize\\\" (ionChange)=\\\"toggleCustom()\\\"></ion-toggle>\\n      </ion-item>\\n      <div *ngIf=\\\"!editInfo.value.customize\\\">\\n        <ion-item>\\n          <ion-label>Tube Type: </ion-label>\\n          <ion-select (ionChange)=\\\"selectedTubeType()\\\" formControlName=\\\"tubeType\\\">\\n            <div *ngFor=\\\"let tubetype of tubeTypes | keyvalue\\\">\\n              <!-- <ion-text>{{tubetype.tubeTypeName}}</ion-text> -->\\n              <ion-select-option value=\\\"{{tubetype.key}}\\\">{{tubetype.key}}</ion-select-option>\\n            </div>\\n          </ion-select>\\n        </ion-item>\\n        <ion-item>\\n          <ion-label>Sub Type: </ion-label>\\n          <ion-select (ionChange)=\\\"selectedSubTubeType()\\\" formControlName=\\\"subType\\\">\\n            <div *ngFor=\\\"let subtype of subtypeList | keyvalue\\\">\\n              <!-- <ion-text>{{tubetype.tubeTypeName}}</ion-text> -->\\n              <ion-select-option value=\\\"{{subtype.key}}\\\">{{subtype.key}}</ion-select-option>\\n            </div>\\n          </ion-select>\\n        </ion-item>\\n        <ion-item>\\n          <ion-label>Size/ID (mm): </ion-label>\\n          <ion-select (ionChange)=\\\"selectedSize()\\\" formControlName=\\\"sizeID\\\">\\n            <div *ngFor=\\\"let sizeID of sizeIDList | keyvalue\\\">\\n              <ion-select-option value=\\\"{{sizeID.key}}\\\">{{sizeID.key}}</ion-select-option>\\n            </div>\\n          </ion-select>\\n        </ion-item>\\n        <ion-item>\\n          <ion-label>Shaft Length (mm): </ion-label>\\n          <ion-select formControlName=\\\"shaftLength\\\">\\n            <ng-container>\\n              <ion-select-option value=\\\"{{shaftLength}}\\\">{{shaftLength}}</ion-select-option>\\n          </ng-container>\\n          </ion-select>\\n        </ion-item> \\n      </div>\\n      <div *ngIf=\\\"editInfo.value.customize\\\">\\n        <ion-item>\\n          <ion-label>Tube Type: </ion-label>\\n          <ion-input type=\\\"text\\\" formControlName=\\\"tubeType\\\"></ion-input>\\n        </ion-item>\\n        <ion-item>\\n          <ion-label>Sub Type: </ion-label>\\n          <ion-input type=\\\"text\\\" formControlName=\\\"subType\\\"></ion-input>\\n        </ion-item>\\n        <ion-item>\\n          <ion-label>Size/ID (mm): </ion-label>\\n          <ion-input type=\\\"text\\\" formControlName=\\\"sizeID\\\"></ion-input>\\n        </ion-item>\\n        <ion-item>\\n          <ion-label>Shaft Length (mm): </ion-label>\\n          <ion-input type=\\\"text\\\" formControlName=\\\"shaftLength\\\"></ion-input>\\n        </ion-item>\\n      </div>\\n      <ion-item>\\n        <ion-label>Suction Length: </ion-label>\\n        <ion-input type=\\\"text\\\" formControlName=\\\"suctionLength\\\"></ion-input>\\n      </ion-item>\\n    </ion-item-group>\\n    <ion-item-group>\\n      <ion-toolbar>\\n        <ion-title>Notes On Patient</ion-title>\\n      </ion-toolbar>\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\">Insert Comment Here.</ion-label>\\n        <ion-textarea rows=\\\"12\\\" formControlName=\\\"notes\\\"></ion-textarea>\\n      </ion-item>\\n    </ion-item-group>\\n    <!--change the ??.valid otherwise it will cause error-->\\n    <ion-button color=\\\"success\\\" expand=\\\"full\\\" type=\\\"submit\\\" [disabled]=\\\"!editInfo.valid\\\">Submit</ion-button>\\n  </form>\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n// must import this two module in the form page and add to @NgModule\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { TestFieldDataInputPageRoutingModule } from './test-field-data-input-routing.module';\n\nimport { TestFieldDataInputPage } from './test-field-data-input.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    TestFieldDataInputPageRoutingModule,\n    ReactiveFormsModule\n  ],\n  declarations: [TestFieldDataInputPage]\n})\nexport class TestFieldDataInputPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ0ZXN0LWZpZWxkLWRhdGEtaW5wdXQucGFnZS5zY3NzIn0= */\";"]}