(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~appointment-reminder-appointment-reminder-module~appointments-appointments-module~saved-appo~92ed99fe"],{

/***/ "Oz3r":
/*!*************************************************!*\
  !*** ./src/app/services/appointment.service.ts ***!
  \*************************************************/
/*! exports provided: AppointmentService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppointmentService", function() { return AppointmentService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _capacitor_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @capacitor/core */ "gcOT");



const { Storage, LocalNotifications } = _capacitor_core__WEBPACK_IMPORTED_MODULE_2__["Plugins"];
let AppointmentService = class AppointmentService {
    constructor() {
        this.appiontment = {};
        //set the strage key for photos can be changed
        this.APPOINTMENT_STORAGE = "appointment";
    }
    loadAppointment() {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            // create a promise that load the data from database
            const appiontmentJSON = yield Storage.get({ key: this.APPOINTMENT_STORAGE });
            // set the current session value using data from DB, if it doesn't exist it wll initialize a empty array
            this.appiontment = JSON.parse(appiontmentJSON.value) || {};
            console.log("finished loading");
        });
    }
    saveValue() {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            // console.log("setting data")
            // convert to strig
            const JSONString = JSON.stringify(this.appiontment);
            // store the value in to the pair
            Storage.set({
                key: this.APPOINTMENT_STORAGE,
                value: JSONString
            });
        });
    }
    setReminder(appointmentTimeStr, appointmentDateStr, reminderTime, doctor, location) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            var notificationTitle = "Appointment at " + appointmentTimeStr + ' on ' + appointmentDateStr;
            var notificationText = "You have an appointment at " + appointmentTimeStr + ' on ' + appointmentDateStr + " with Dr. " + doctor + " at " + location;
            //const pendingList : LocalNotificationPendingList = await LocalNotifications.getPending();
            //const clear = await LocalNotifications.cancel(pendingList);
            //console.log("cleared all previous", clear)
            yield LocalNotifications.schedule({
                notifications: [
                    {
                        id: 1,
                        title: notificationTitle,
                        body: notificationText,
                        schedule: { at: new Date(reminderTime) },
                    }
                ]
            });
            console.log("reminder set");
            const pendingList = yield LocalNotifications.getPending();
            console.log(pendingList);
        });
    }
};
AppointmentService.ctorParameters = () => [];
AppointmentService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    })
], AppointmentService);



/***/ }),

/***/ "QQ9l":
/*!*******************************************************************!*\
  !*** ./src/app/appointment-reminder/appointment-reminder.page.ts ***!
  \*******************************************************************/
/*! exports provided: AppointmentReminderPage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppointmentReminderPage", function() { return AppointmentReminderPage; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_appointment_reminder_page_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./appointment-reminder.page.html */ "r8bU");
/* harmony import */ var _appointment_reminder_page_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./appointment-reminder.page.scss */ "txDb");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ionic/angular */ "TEn/");
/* harmony import */ var _capacitor_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @capacitor/core */ "gcOT");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/forms */ "3Pt+");
/* harmony import */ var _services_appointment_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../services/appointment.service */ "Oz3r");





//load browser plugin

const { Browser } = _capacitor_core__WEBPACK_IMPORTED_MODULE_5__["Plugins"];


let AppointmentReminderPage = class AppointmentReminderPage {
    constructor(formBuilder, appointmentService, modalCtrl) {
        this.formBuilder = formBuilder;
        this.appointmentService = appointmentService;
        this.modalCtrl = modalCtrl;
        this.today = new Date().toISOString();
        this.timeSlots = {
            '30 minutes before': '${1000*60*30}',
            '1 hour before': '${1000*60*60}',
            '2 hours before': '${1000*60*120}',
            '1 day before': '${1000*60*60*24}',
            '2 days before': '${1000*60*60*48}',
            '1 week before': '${1000*60*60*24*7}',
        };
        this.form = this.formBuilder.group({
            appointmentDate: [this.today,],
            appointmentTime: [this.today,],
            alarmDateTime: [this.today,],
            title: [''],
            location: [''],
            doctor: ['']
        });
    }
    openMap() {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            const link = "https://www.google.com/maps/search/?api=1&query=" + this.appointmentService.appiontment["Location"];
            //console.log(link)
            const encoded = encodeURI(link);
            //console.log(encoded)
            yield Browser.open({ url: encoded });
        });
    }
    logForm() {
        this.appointmentService.appiontment["appointmentDate"] = this.form.value["appointmentDate"].slice(0, 10);
        this.appointmentService.appiontment["appointmentTime"] = this.form.value["appointmentTime"].slice(11, 16);
        console.log(this.appointmentService.appiontment["appointmentDate"]);
        console.log(this.appointmentService.appiontment["appointmentTime"]);
        this.appointmentService.appiontment["alarmDateTime"] = this.form.value["alarmDateTime"];
        console.log(this.appointmentService.appiontment["alarmDateTime"]);
        this.appointmentService.appiontment["Title"] = this.form.value["title"];
        this.appointmentService.appiontment["Location"] = this.form.value["location"];
        this.appointmentService.appiontment["Doctor"] = this.form.value["doctor"];
        /*     this.appointmentService.appiontment["Reminder"] = new Date(this.form.value["reminder"]).toString().slice(0, 21);
            const isoReminder = this.appointmentService.appiontment["reminderDate"]+'T'+ this.appointmentService.appiontment["reminderTime"]
            console.log(isoReminder);
            const reminderObj = Date.parse(isoReminder);
            console.log(reminderObj);
            this.appointmentService.setReminder(
              this.appointmentService.appiontment["appointmentTime"],
              this.appointmentService.appiontment["appointmentDate"],
              reminderObj,
              this.appointmentService.appiontment["Doctor"],
              this.appointmentService.appiontment["Location"]) */
        this.appointmentService.saveValue();
        this.isAppointmentSetted = true;
        this.modalCtrl.dismiss();
    }
    ngOnInit() {
    }
    dismiss() {
        this.modalCtrl.dismiss();
    }
    save() {
        this.modalCtrl.dismiss();
    }
};
AppointmentReminderPage.ctorParameters = () => [
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_6__["FormBuilder"] },
    { type: _services_appointment_service__WEBPACK_IMPORTED_MODULE_7__["AppointmentService"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_4__["ModalController"] }
];
AppointmentReminderPage = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-appointment-reminder',
        template: _raw_loader_appointment_reminder_page_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_appointment_reminder_page_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    })
], AppointmentReminderPage);



/***/ }),

/***/ "r8bU":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/appointment-reminder/appointment-reminder.page.html ***!
  \***********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<ion-header>\n  <ion-toolbar>\n    <ion-buttons slot=\"start\">\n      <ion-button color=\"danger\" (click)=\"dismiss()\">Cancel</ion-button>\n    </ion-buttons>\n    <ion-title>New Appointment</ion-title>\n    <ion-buttons slot=\"end\">\n      <ion-button (click)=\"logForm()\">Done</ion-button>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <form [formGroup]=\"form\">\n\n    <ion-card>\n      <ion-item>\n        <ion-input placeholder='Title' formControlName=\"title\"></ion-input>\n      </ion-item>\n      <ion-item>\n        <ion-input placeholder='Doctor' formControlName=\"doctor\"></ion-input>\n      </ion-item>\n      <ion-item lines=\"none\">\n        <ion-input placeholder='Location' formControlName=\"location\"></ion-input>\n      </ion-item>\n    </ion-card>\n\n    <ion-card>\n      <ion-item>\n        <ion-icon name=\"calendar-clear-outline\" slot=\"start\"></ion-icon>\n        <ion-label>Date</ion-label>\n        <ion-datetime \n        placeholder=\"Select Date\"\n        display-format=\"D MMM YYYY\" \n        picker-format=\"D MMM YYYY\" \n        formControlName=\"appointmentDate\"></ion-datetime>\n      </ion-item>\n\n      <ion-item lines=\"none\">\n        <ion-icon name=\"time-outline\" slot=\"start\"></ion-icon>\n        <ion-label>Time</ion-label>\n        <ion-datetime \n        placeholder=\"Select Date\"\n        display-format=\"HH:mm\" \n        picker-format=\"HH:mm\"\n        formControlName=\"appointmentTime\"></ion-datetime>\n      </ion-item>\n    </ion-card>\n\n    <ion-card>\n      <ion-item lines=\"none\">\n        <ion-icon name=\"alarm-outline\" slot=\"start\"></ion-icon>\n        <ion-label>Alarm</ion-label>\n        <ion-select \n        formControlName=\"alarmDateTime\" \n        interface=\"action-sheet\"\n        style=\"max-width: 100%;\">\n          <ion-select-option value={{1000*60*30}}>30 minutes before</ion-select-option>\n          <ion-select-option value={{1000*60*60}}>1 hour before</ion-select-option>\n          <ion-select-option value={{1000*60*120}}>2 hours before</ion-select-option>\n          <ion-select-option value={{1000*60*60*24}}>1 day before</ion-select-option>\n          <ion-select-option value={{1000*60*60*48}}>2 days before</ion-select-option>\n          <ion-select-option value={{1000*60*60*24*7}}>1 week before</ion-select-option>\n        </ion-select>\n\n\n<!--         <ion-datetime \n        placeholder=\"Select Date and Time\"\n        display-format=\"D MMM YYYY HH:mm\" \n        picker-format=\"D MMM YYYY HH:mm\"\n        formControlName=\"alarmDateTime\"></ion-datetime> -->\n      </ion-item>\n    </ion-card>\n\n<!--     <ion-item>\n      <ion-label>Date</ion-label>\n      <ion-datetime formControlName=\"appointmentDate\" display-format=\"YYYY-MM-DD\" picker-format=\"YYYY-MM-DD\" [min]=\"this.dateNow\"></ion-datetime>\n    </ion-item>\n    <ion-item>\n      <ion-label>Time</ion-label>\n      <ion-datetime formControlName=\"appointmentTime\" display-format=\"HH:mm\" picker-format=\"HH:mm\"></ion-datetime>\n    </ion-item>\n\n    <ion-item>\n      <ion-label>Date</ion-label>\n      <ion-datetime formControlName=\"reminderDate\" display-format=\"YYYY-MM-DD\" picker-format=\"YYYY-MM-DD\" [min]=\"this.dateNow\"></ion-datetime>\n    </ion-item>\n    <ion-item>\n      <ion-label>Time</ion-label>\n      <ion-datetime formControlName=\"reminderTime\" display-format=\"HH:mm\" picker-format=\"HH:mm\"></ion-datetime>\n    </ion-item>\n\n    <ion-item>\n      <ion-label>Location</ion-label>\n      <ion-input type=\"text\" formControlName=\"location\"></ion-input>\n    </ion-item>\n    <ion-item>\n      <ion-label>Doctor</ion-label>\n      <ion-input type=\"text\" formControlName=\"doctor\"></ion-input>\n    </ion-item> -->\n\n<!--     <ion-item lines=\"none\" *ngIf=\"isAppointmentSetted\">\n      <ion-icon color=\"success\" slot=\"start\" name=\"checkmark-circle-outline\"></ion-icon>\n      <ion-text color=\"success\" class=\"form-error\">\n        Appointment Saved and Reminder Scheduled.\n      </ion-text>\n    </ion-item> -->\n  </form>\n</ion-content>");

/***/ }),

/***/ "txDb":
/*!*********************************************************************!*\
  !*** ./src/app/appointment-reminder/appointment-reminder.page.scss ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("ion-button {\n  width: 90%;\n  margin: auto;\n  margin-top: 10%;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2FwcG9pbnRtZW50LXJlbWluZGVyLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLFVBQUE7RUFDQSxZQUFBO0VBQ0EsZUFBQTtBQUNKIiwiZmlsZSI6ImFwcG9pbnRtZW50LXJlbWluZGVyLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbImlvbi1idXR0b24ge1xuICAgIHdpZHRoOiA5MCU7XG4gICAgbWFyZ2luOiBhdXRvO1xuICAgIG1hcmdpbi10b3A6IDEwJTtcbn0iXX0= */");

/***/ })

}]);
//# sourceMappingURL=default~appointment-reminder-appointment-reminder-module~appointments-appointments-module~saved-appo~92ed99fe-es2015.js.map