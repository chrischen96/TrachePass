{"version":3,"sources":["webpack:///src/app/services/appointment.service.ts","webpack:///src/app/appointment-reminder/appointment-reminder.page.ts","webpack:///src/app/appointment-reminder/appointment-reminder.page.html","webpack:///src/app/appointment-reminder/appointment-reminder.page.scss"],"names":["Storage","LocalNotifications","AppointmentService","appointment","APPOINTMENT_STORAGE","get","key","appiontmentJSON","JSON","parse","value","console","log","JSONString","stringify","set","date","time","alarm","title","doctor","location","notificationTitle","notificationText","appointmentDateTime","Date","schedule","notifications","body","id","at","getTime","actionTypeId","notifs","providedIn","Browser","AppointmentReminderPage","formBuilder","appointmentService","modalCtrl","today","toISOString","form","group","appointmentDate","appointmentTime","alarmDateTime","link","encoded","encodeURI","open","url","slice","setReminder","saveValue","isAppointmentSetted","dismiss","reload","selector","template"],"mappings":"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","file":"default~appointment-reminder-appointment-reminder-module~appointments-appointments-module~saved-appo~92ed99fe-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\n//import { LocalNotifications } from '@ionic-native/local-notifications/ngx';\nimport { Plugins } from '@capacitor/core';\n//import { LocalNotification, LocalNotificationPendingList, Plugins, } from '@capacitor/core';\nconst { Storage, LocalNotifications } = Plugins;\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppointmentService {\n\n  public appointment = {};\n  //set the strage key for photos can be changed\n  private APPOINTMENT_STORAGE: string = \"appointment\";\n\n  constructor() { }\n\n  async loadAppointment(){\n    // create a promise that load the data from database\n    const appiontmentJSON = await Storage.get({ key: this.APPOINTMENT_STORAGE });\n    // set the current session value using data from DB, if it doesn't exist it wll initialize a empty array\n    this.appointment = JSON.parse(appiontmentJSON.value) || {};\n    console.log(\"finished loading\");\n  }\n\n  saveValue() {\n    const JSONString = JSON.stringify(this.appointment);\n    // store the value in to the pair\n    Storage.set({\n      key: this.APPOINTMENT_STORAGE,\n      value: JSONString\n    })\n  }\n\n   public async setReminder(date, time, alarm = 0, title='', doctor='', location='') {\n    var notificationTitle = title;\n    var notificationText  = \"You have an appointment at \" + time + ' on ' + date + \" with Dr. \" + doctor + \" at \" + location;\n    const appointmentDateTime = new Date(date + 'T' + time)\n    console.log(notificationText);\n    console.log(date + 'T' + time);\n\n/*     this.localNotifications.schedule({\n        title: notificationTitle,\n        text: notificationText,\n        trigger: { at: new Date(appointmentDateTime.getTime() - alarm) },\n      }); */\n      const notifs = await LocalNotifications.schedule({\n        notifications: [\n          {\n            title: notificationTitle,\n            body: notificationText,\n            id: 1,\n            schedule: { at: new Date(appointmentDateTime.getTime() - alarm) },\n            actionTypeId: \"\",\n          }\n        ]\n      });\n      console.log('scheduled notifications', notifs);\n\n    console.log(new Date(appointmentDateTime.getTime() - alarm));\n\n    //const pendingList : LocalNotificationPendingList = await LocalNotifications.getPending();\n    //const clear = await LocalNotifications.cancel(pendingList);\n    //console.log(\"cleared all previous\", clear)\n/*     await LocalNotifications.schedule({\n      notifications:[\n        {\n          id: 1,\n          title: notificationTitle,\n          body: notificationText,\n          schedule: {at: new Date(reminderTime)},\n        }\n      ]\n    })\n    console.log(\"reminder set\");\n    const pendingList : LocalNotificationPendingList = await LocalNotifications.getPending();\n    console.log(pendingList); */\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ModalController } from '@ionic/angular';\n//load browser plugin\nimport { Plugins } from '@capacitor/core';\nconst { Browser } = Plugins;\n\nimport {Validators, FormBuilder, FormGroup } from '@angular/forms';\nimport { AppointmentService } from '../services/appointment.service'; \n\n@Component({\n  selector: 'app-appointment-reminder',\n  templateUrl: './appointment-reminder.page.html',\n  styleUrls: ['./appointment-reminder.page.scss'],\n})\nexport class AppointmentReminderPage implements OnInit {\n\n  public today = new Date().toISOString();\n  public form : FormGroup;\n  public isLocationSetted: Boolean;\n  public isAppointmentSetted: Boolean;\n/*   public todayString = new Date(this.today.toString().slice(0,21)).toISOString();\n  public dateNow = this.todayString.slice(0,10);\n  public timeNow = this.todayString.slice(11,19);\n  public plus1Year = this.today.getFullYear();\n  public plus1YearString = this.plus1Year + 1; */\n/*   public timeSlots = {\n    '30 minutes before': '${1000*60*30}',\n    '1 hour before': '${1000*60*60}',\n    '2 hours before': '${1000*60*120}',\n    '1 day before': '${1000*60*60*24}',\n    '2 days before': '${1000*60*60*48}',\n    '1 week before': '${1000*60*60*24*7}',\n  }; */\n\n  constructor(\n    private formBuilder: FormBuilder, \n    public appointmentService: AppointmentService, \n    public modalCtrl: ModalController,\n  ) {\n    this.form = this.formBuilder.group({\n      appointmentDate: [this.today,],\n      appointmentTime: [this.today,],\n      alarmDateTime: [''],\n      title: [''],\n      doctor: [''],\n      location: [''],\n    });\n  }\n\n  ngOnInit() {\n  }\n\n  async openMap() {\n    \n    const link = \"https://www.google.com/maps/search/?api=1&query=\" + this.appointmentService.appointment[\"Location\"]    \n    //console.log(link)\n    const encoded = encodeURI(link)\n    //console.log(encoded)\n    await Browser.open({url: encoded});\n  }\n\n\n  save(){\n    this.appointmentService.appointment[\"appointmentDate\"] = this.form.value[\"appointmentDate\"].slice(0,10);\n    this.appointmentService.appointment[\"appointmentTime\"] = this.form.value[\"appointmentTime\"].slice(11,16);\n    console.log(this.appointmentService.appointment[\"appointmentDate\"]);\n    console.log(this.appointmentService.appointment[\"appointmentTime\"]);\n    this.appointmentService.appointment[\"alarmDateTime\"] = this.form.value[\"alarmDateTime\"];\n    console.log(this.appointmentService.appointment[\"alarmDateTime\"]);\n    this.appointmentService.appointment[\"title\"] = this.form.value[\"title\"];\n    this.appointmentService.appointment[\"doctor\"] = this.form.value[\"doctor\"];\n    this.appointmentService.appointment[\"location\"] = this.form.value[\"location\"];\n    console.log(this.appointmentService.appointment[\"title\"]);\n    console.log(this.appointmentService.appointment[\"doctor\"]);\n    console.log(this.appointmentService.appointment[\"location\"]);\n/*  this.appointmentService.appointment[\"Reminder\"] = new Date(this.form.value[\"reminder\"]).toString().slice(0, 21);\n    const isoReminder = this.appointmentService.appointment[\"reminderDate\"]+'T'+ this.appointmentService.appointment[\"reminderTime\"]\n    console.log(isoReminder);\n    const reminderObj = Date.parse(isoReminder);\n    console.log(reminderObj);\n     */\n    this.appointmentService.setReminder(\n      this.appointmentService.appointment[\"appointmentDate\"],\n      this.appointmentService.appointment[\"appointmentTime\"],\n      this.appointmentService.appointment[\"alarmDateTime\"],\n      this.appointmentService.appointment[\"title\"],\n      this.appointmentService.appointment[\"doctor\"],\n      this.appointmentService.appointment[\"location\"],\n    );\n    this.appointmentService.saveValue();\n    this.isAppointmentSetted = true;\n    this.modalCtrl.dismiss();\n    location.reload();\n  }\n\n\n\n  dismiss(){\n    this.modalCtrl.dismiss();\n  }\n\n}\n","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-button color=\\\"danger\\\" (click)=\\\"dismiss()\\\">Cancel</ion-button>\\n    </ion-buttons>\\n    <ion-title>New Appointment</ion-title>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button (click)=\\\"save()\\\">Done</ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <form [formGroup]=\\\"form\\\">\\n\\n    <ion-card>\\n      <ion-item>\\n        <ion-input placeholder='Title' formControlName=\\\"title\\\"></ion-input>\\n      </ion-item>\\n      <ion-item>\\n        <ion-input placeholder='Doctor' formControlName=\\\"doctor\\\"></ion-input>\\n      </ion-item>\\n      <ion-item lines=\\\"none\\\">\\n        <ion-input placeholder='Location' formControlName=\\\"location\\\"></ion-input>\\n      </ion-item>\\n    </ion-card>\\n\\n    <ion-card>\\n      <ion-item>\\n        <ion-icon name=\\\"calendar-clear-outline\\\" slot=\\\"start\\\"></ion-icon>\\n        <ion-label>Date</ion-label>\\n        <ion-datetime \\n        placeholder=\\\"Select Date\\\"\\n        display-format=\\\"D MMM YYYY\\\" \\n        picker-format=\\\"D MMM YYYY\\\" \\n        formControlName=\\\"appointmentDate\\\"></ion-datetime>\\n      </ion-item>\\n\\n      <ion-item lines=\\\"none\\\">\\n        <ion-icon name=\\\"time-outline\\\" slot=\\\"start\\\"></ion-icon>\\n        <ion-label>Time</ion-label>\\n        <ion-datetime \\n        placeholder=\\\"Select Date\\\"\\n        display-format=\\\"HH:mm\\\" \\n        picker-format=\\\"HH:mm\\\"\\n        formControlName=\\\"appointmentTime\\\"></ion-datetime>\\n      </ion-item>\\n    </ion-card>\\n\\n    <ion-card>\\n      <ion-item lines=\\\"none\\\">\\n        <ion-icon name=\\\"alarm-outline\\\" slot=\\\"start\\\"></ion-icon>\\n        <ion-label>Alarm</ion-label>\\n        <ion-select \\n        formControlName=\\\"alarmDateTime\\\" \\n        interface=\\\"action-sheet\\\"\\n        style=\\\"max-width: 100%;\\\">\\n        <ion-select-option value={{0}}>At time of event</ion-select-option>\\n          <ion-select-option value={{1000*60*30}}>30 minutes before</ion-select-option>\\n          <ion-select-option value={{1000*60*60}}>1 hour before</ion-select-option>\\n          <ion-select-option value={{1000*60*120}}>2 hours before</ion-select-option>\\n          <ion-select-option value={{1000*60*60*24}}>1 day before</ion-select-option>\\n          <ion-select-option value={{1000*60*60*48}}>2 days before</ion-select-option>\\n          <ion-select-option value={{1000*60*60*24*7}}>1 week before</ion-select-option>\\n        </ion-select>\\n      </ion-item>\\n    </ion-card>\\n  </form>\\n</ion-content>\\n\\n<!--     <ion-item>\\n      <ion-label>Date</ion-label>\\n      <ion-datetime formControlName=\\\"appointmentDate\\\" display-format=\\\"YYYY-MM-DD\\\" picker-format=\\\"YYYY-MM-DD\\\" [min]=\\\"this.dateNow\\\"></ion-datetime>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label>Time</ion-label>\\n      <ion-datetime formControlName=\\\"appointmentTime\\\" display-format=\\\"HH:mm\\\" picker-format=\\\"HH:mm\\\"></ion-datetime>\\n    </ion-item>\\n\\n    <ion-item>\\n      <ion-label>Date</ion-label>\\n      <ion-datetime formControlName=\\\"reminderDate\\\" display-format=\\\"YYYY-MM-DD\\\" picker-format=\\\"YYYY-MM-DD\\\" [min]=\\\"this.dateNow\\\"></ion-datetime>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label>Time</ion-label>\\n      <ion-datetime formControlName=\\\"reminderTime\\\" display-format=\\\"HH:mm\\\" picker-format=\\\"HH:mm\\\"></ion-datetime>\\n    </ion-item>\\n\\n    <ion-item>\\n      <ion-label>Location</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"location\\\"></ion-input>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label>Doctor</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"doctor\\\"></ion-input>\\n    </ion-item> -->\\n\\n<!--     <ion-item lines=\\\"none\\\" *ngIf=\\\"isAppointmentSetted\\\">\\n      <ion-icon color=\\\"success\\\" slot=\\\"start\\\" name=\\\"checkmark-circle-outline\\\"></ion-icon>\\n      <ion-text color=\\\"success\\\" class=\\\"form-error\\\">\\n        Appointment Saved and Reminder Scheduled.\\n      </ion-text>\\n    </ion-item> -->\\n\";","export default \"ion-button {\\n  width: 90%;\\n  margin: auto;\\n  margin-top: 10%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2FwcG9pbnRtZW50LXJlbWluZGVyLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLFVBQUE7RUFDQSxZQUFBO0VBQ0EsZUFBQTtBQUNKIiwiZmlsZSI6ImFwcG9pbnRtZW50LXJlbWluZGVyLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbImlvbi1idXR0b24ge1xuICAgIHdpZHRoOiA5MCU7XG4gICAgbWFyZ2luOiBhdXRvO1xuICAgIG1hcmdpbi10b3A6IDEwJTtcbn0iXX0= */\";"]}