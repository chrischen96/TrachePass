{"version":3,"sources":["webpack:///src/app/services/appointment.service.ts","webpack:///src/app/saved-appointment/saved-appointment.page.html","webpack:///src/app/saved-appointment/saved-appointment.page.scss","webpack:///src/app/saved-appointment/saved-appointment.page.ts"],"names":["Storage","LocalNotifications","AppointmentService","appointments","APPOINTMENT_STORAGE","get","key","appiontmentGet","JSON","parse","value","console","log","requestPermission","getPending","JSONString","stringify","set","appointment","id","date","slice","time","alarm","title","doctor","location","notificationTitle","appointmentDateTime","Date","displayTime","displayDate","notificationText","schedule","notifications","body","at","getTime","sound","attachments","actionTypeId","extra","notifs","providedIn","Browser","SavedAppointmentPage","appointmentService","loginService","modalCtrl","alertController","fb","appointmentList","form","group","appointmentDate","required","alarmDateTime","index","Object","keys","forEach","push","link","encoded","encodeURI","open","url","dismiss","splice","i","length","saveValue","reload","selector","template"],"mappings":"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","file":"default~appointments-appointments-module~saved-appointment-saved-appointment-module-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\n//import { LocalNotifications } from '@ionic-native/local-notifications/ngx';\nimport { LocalNotification, LocalNotificationsPlugin, Plugins } from '@capacitor/core';\n//import { LocalNotification, LocalNotificationPendingList, Plugins, } from '@capacitor/core';\nconst { Storage, LocalNotifications } = Plugins;\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppointmentService {\n  public appointments = {};\n  //set the strage key for photos can be changed\n  private APPOINTMENT_STORAGE: string = \"appointment\";\n\n  constructor(\n  ) { }\n\n  async loadAppointment(){\n    // create a promise that load the data from database\n    const appiontmentGet = await Storage.get({ key: this.APPOINTMENT_STORAGE });\n    // set the current session value using data from DB, if it doesn't exist it wll initialize a empty array\n    this.appointments = JSON.parse(appiontmentGet.value) || {};\n    console.log(this.appointments);\n    console.log(\"finished loading\");\n    await LocalNotifications.requestPermission();\n    console.log(LocalNotifications.getPending());\n  }\n\n  saveValue() {\n    const JSONString = JSON.stringify(this.appointments);\n    // store the value in to the pair\n    Storage.set({\n      key: this.APPOINTMENT_STORAGE,\n      value: JSONString\n    })\n  }\n\n  public async setReminder(appointment:{}, id:number) {\n    const date = appointment[\"appointmentDate\"].slice(0,10);\n    const time = appointment[\"appointmentDate\"].slice(11);\n    const alarm = appointment[\"alarmDateTime\"];\n    const title = appointment[\"title\"];\n    const doctor = appointment[\"doctor\"];\n    const location = appointment[\"location\"];\n\n    const notificationTitle = title;\n    const appointmentDateTime = new Date(appointment['appointmentDate']);\n    const displayTime = time.slice(0, 5)\n    const displayDate = date.slice(8) + '/' + date.slice(5, 7) + '/' + date.slice(0, 4)\n    const notificationText  = \"You have an appointment at \" + displayTime + \" on \" + displayDate + \" with \" + doctor + \" at \" + location;\n    \n    console.log(appointment);\n    console.log(id);\n    const notifs = await LocalNotifications.schedule({\n      notifications: [\n        {\n          title: notificationTitle,\n          body: notificationText,\n          id: id,\n          schedule: { at: new Date(appointmentDateTime.getTime() - alarm) },\n          sound: null,\n          attachments: null,\n          actionTypeId: \"\",\n          extra: null,\n        }\n      ]\n    });\n    console.log(LocalNotifications.getPending());\n  }\n}\n","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-button (click)=\\\"edit()\\\"><ion-icon name=\\\"chevron-back-outline\\\"></ion-icon>Back</ion-button>\\n    </ion-buttons>\\n    <ion-title>Appointments</ion-title>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button color=\\\"danger\\\" (click)=\\\"delete()\\\">Delete</ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-card>\\n    <ion-item>\\n      <ion-label>Title:</ion-label>\\n      <ion-label>{{appointment.title}}</ion-label>\\n    </ion-item>\\n\\n    <ion-item>\\n      <ion-label>Doctor:</ion-label>\\n      <ion-label>{{appointment.doctor}}</ion-label>\\n    </ion-item>\\n\\n    <ion-item lines=\\\"none\\\">\\n      <ion-label>Location:</ion-label>\\n      <ion-label>{{appointment.location}}</ion-label>\\n    </ion-item>\\n  </ion-card>\\n\\n  <!-- <div *ngIf='this.appointment.appointmentDate != \\\"Not Set\\\" && this.appointment.appointmentTime != \\\"Not Set\\\"'>  --> \\n    <ion-card>\\n      <ion-item>\\n        <ion-icon name=\\\"calendar-clear-outline\\\" slot=\\\"start\\\"></ion-icon>\\n        <ion-label>Date</ion-label>\\n        <ion-label>{{appointment.appointmentDate  | date : 'd MMM y'}}</ion-label>\\n      </ion-item>\\n\\n      <ion-item lines=\\\"none\\\">\\n        <ion-icon name=\\\"time-outline\\\" slot=\\\"start\\\"></ion-icon>\\n        <ion-label>Time</ion-label>\\n        <ion-label>{{appointment.appointmentDate  | date : 'HH:mm'}}</ion-label>\\n      </ion-item>\\n    </ion-card>\\n\\n    <ion-button color=\\\"success\\\" expand=\\\"block\\\" (click)=\\\"openMap()\\\">\\n      <ion-icon slot=\\\"start\\\" name=\\\"navigate-circle-outline\\\"></ion-icon>\\n      Show Location on Google Map\\n    </ion-button>\\n\\n<!--     <ion-button color=\\\"danger\\\" expand=\\\"block\\\" (click)=\\\"delete()\\\">\\n      <ion-icon slot=\\\"start\\\" name=\\\"trash-outline\\\"></ion-icon>\\n      <ion-text slot=\\\"end\\\">Delete</ion-text>\\n    </ion-button> -->\\n  <!-- </div> -->\\n\\n</ion-content>\\n\";","export default \"ion-button {\\n  width: 90%;\\n  margin: auto;\\n  margin-top: 10%;\\n}\\n\\n#delete {\\n  margin-top: 100px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NhdmVkLWFwcG9pbnRtZW50LnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLFVBQUE7RUFDQSxZQUFBO0VBQ0EsZUFBQTtBQUNKOztBQUVBO0VBQ0ksaUJBQUE7QUFDSiIsImZpbGUiOiJzYXZlZC1hcHBvaW50bWVudC5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJpb24tYnV0dG9uIHtcbiAgICB3aWR0aDogOTAlO1xuICAgIG1hcmdpbjogYXV0bztcbiAgICBtYXJnaW4tdG9wOiAxMCU7XG59XG5cbiNkZWxldGV7XG4gICAgbWFyZ2luLXRvcDogMTAwcHg7XG59XG4iXX0= */\";","import { Component, Input, OnInit } from '@angular/core';\nimport { ModalController, AlertController } from '@ionic/angular';\nimport { AppointmentReminderPage } from '../appointment-reminder/appointment-reminder.page'\nimport { FormBuilder, FormGroup, FormControl, Validators, ReactiveFormsModule} from '@angular/forms'\n\n//load browser plugin\nimport { Plugins } from '@capacitor/core';\nconst { Browser, LocalNotifications } = Plugins;\n\nimport { AppointmentService } from '../services/appointment.service'; \n\nimport { LoginService } from '../services/login.service'; \nimport { ResourceLoader } from '@angular/compiler';\n\n@Component({\n  selector: 'app-saved-appointment',\n  templateUrl: './saved-appointment.page.html',\n  styleUrls: ['./saved-appointment.page.scss'],\n})\nexport class SavedAppointmentPage implements OnInit {\n  @Input()index:number;\n  public appointment = {};\n  public form: FormGroup;\n  public appointmentList = [];\n\n  public dateTime;\n\n  constructor(\n    public appointmentService: AppointmentService, \n    public loginService: LoginService,\n    private modalCtrl: ModalController,\n    private alertController: AlertController,\n    public fb: FormBuilder,\n  ) {\n    this.form = this.fb.group({\n      appointmentDate: ['', Validators.required],\n      alarmDateTime: ['', Validators.required],\n      title: ['', Validators.required],\n      location: ['', Validators.required],\n      doctor: ['', Validators.required]\n    })\n  }\n\n  async ngOnInit() {\n    this.appointment = this.appointmentService.appointments[this.index];\n    console.log(this.appointment);\n    Object.keys(this.appointmentService.appointments).forEach(key => {\n      this.appointmentList.push(this.appointmentService.appointments[key])\n    })\n/*     Object.keys(this.form.value).forEach( key => {\n      if( this.appointment[key] != null ){\n        this.form.get(key).setValue(this.appointment[key]);\n        console.log(key, this.appointment[key]);\n      }\n    }) */\n    console.log('saved');\n    console.log('Initiate appointment');\n  }\n\n  async openMap() {\n    const link = \"https://www.google.com/maps/search/?api=1&query=\" + this.appointment[\"location\"]    \n    //console.log(link)\n    const encoded = encodeURI(link)\n    //console.log(encoded)\n    await Browser.open({url: encoded});\n  }\n\n  async edit(){\n/*     this.appointment = {};\n    Object.keys(this.form).forEach( key => {\n      this.appointment[key] = this.form.value[key];\n    })\n    console.log(this.appointmentService.appointments);\n    this.appointmentService.appointments[this.index] = this.appointment;\n    this.appointmentService.saveValue();\n    location.reload(); */\n    this.modalCtrl.dismiss();\n  }\n\n  async delete(){\n    console.log(\"delete appointment\");\n    console.log(LocalNotifications.getPending());\n    this.appointmentList.splice(this.index, 1);\n    this.appointmentService.appointments = {};\n    for(let i=0; i<this.appointmentList.length; i++){\n      this.appointmentService.appointments[i] = this.appointmentList[i];\n    }\n    this.appointmentService.saveValue();\n    location.reload();\n\n    /* const alert = await this.alertController.create({\n      header: 'Delete',\n      message: 'Confirm to delete this appointment.',\n      buttons: [\n        {\n          text: 'Cancel',\n          role: 'cancel',\n          cssClass: 'secondary',\n          handler: (cancel) => {\n            console.log('Confirm Cancel: cancel');\n          }\n        }, {\n          text: 'Delete',\n          handler: (blah) => {\n            console.log(LocalNotifications.getPending());\n            this.appointmentList.splice(this.index, 1);\n            this.appointmentService.appointments = {};\n            for(let i=0; i<this.appointmentList.length; i++){\n              this.appointmentService.appointments[i] = this.appointmentList[i];\n            }\n            this.appointmentService.saveValue();\n            location.reload();\n          }\n        }\n      ]\n    });\n    await alert.present(); */\n  }\n\n}\n"]}