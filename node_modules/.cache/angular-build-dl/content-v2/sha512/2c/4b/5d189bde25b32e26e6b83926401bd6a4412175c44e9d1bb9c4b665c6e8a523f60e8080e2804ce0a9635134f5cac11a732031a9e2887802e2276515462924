{"version":3,"sources":["webpack:///src/app/services/appointment.service.ts","webpack:///src/app/appointment-reminder/appointment-reminder.page.ts","webpack:///src/app/appointment-reminder/appointment-reminder.page.html","webpack:///src/app/appointment-reminder/appointment-reminder.page.scss"],"names":["Storage","LocalNotifications","AppointmentService","appiontment","APPOINTMENT_STORAGE","get","key","appiontmentJSON","JSON","parse","value","console","log","JSONString","stringify","set","appointmentTimeStr","appointmentDateStr","reminderTime","doctor","location","notificationTitle","notificationText","schedule","notifications","id","title","body","at","Date","getPending","pendingList","providedIn","Browser","AppointmentReminderPage","formBuilder","appointmentService","modalCtrl","today","toISOString","timeSlots","form","group","appointmentDate","appointmentTime","alarmDateTime","link","encoded","encodeURI","open","url","slice","saveValue","isAppointmentSetted","dismiss","selector","template"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAIwC,uD;UAAhCA,O,yBAAAA,O;UAASC,kB,yBAAAA,kB;;UAKJC,kBAAkB;AAM7B,sCAAc;AAAA;;AAJP,eAAAC,WAAA,GAAc,EAAd,CAIO,CAHd;;AACQ,eAAAC,mBAAA,GAA8B,aAA9B;AAES;;AANY;AAAA;AAAA,iBAQhB,2BAAe;;;;;;;;AAEF,6BAAMJ,OAAO,CAACK,GAAR,CAAY;AAAEC,2BAAG,EAAE,KAAKF;AAAZ,uBAAZ,CAAN;;;AAAlBG,qC;AACN;AACA,2BAAKJ,WAAL,GAAmBK,IAAI,CAACC,KAAL,CAAWF,eAAe,CAACG,KAA3B,KAAqC,EAAxD;AACAC,6BAAO,CAACC,GAAR,CAAY,kBAAZ;;;;;;;;;AACD;AAd4B;AAAA;AAAA,iBAgBhB,qBAAY;;;;;;;AACvB;AACA;AACMC,gC,GAAaL,IAAI,CAACM,SAAL,CAAe,KAAKX,WAApB,C,EACnB;;AACAH,6BAAO,CAACe,GAAR,CAAY;AACVT,2BAAG,EAAE,KAAKF,mBADA;AAEVM,6BAAK,EAAEG;AAFG,uBAAZ;;;;;;;;;AAID;AAzB4B;AAAA;AAAA,iBA2BhB,qBAAYG,kBAAZ,EAAgCC,kBAAhC,EAAmDC,YAAnD,EAAiEC,MAAjE,EAAyEC,QAAzE,EAAmF;;;;;;;AAC1FC,uC,GAAoB,oBAAoBL,kBAApB,GAAyC,MAAzC,GAAkDC,kB;AACtEK,sC,GAAoB,gCAAgCN,kBAAhC,GAAqD,MAArD,GAA8DC,kBAA9D,GAAmF,YAAnF,GAAkGE,MAAlG,GAA2G,MAA3G,GAAoHC,Q,EAC5I;AACA;AACA;;;AACA,6BAAMnB,kBAAkB,CAACsB,QAAnB,CAA4B;AAChCC,qCAAa,EAAC,CACZ;AACEC,4BAAE,EAAE,CADN;AAEEC,+BAAK,EAAEL,iBAFT;AAGEM,8BAAI,EAAEL,gBAHR;AAIEC,kCAAQ,EAAE;AAACK,8BAAE,EAAE,IAAIC,IAAJ,CAASX,YAAT;AAAL;AAJZ,yBADY;AADkB,uBAA5B,CAAN;;;AAUAP,6BAAO,CAACC,GAAR,CAAY,cAAZ;;AACmD,6BAAMX,kBAAkB,CAAC6B,UAAnB,EAAN;;;AAA7CC,iC;AACNpB,6BAAO,CAACC,GAAR,CAAYmB,WAAZ;;;;;;;;;AACD;AA9C4B;;AAAA;AAAA,S;;;;;;AAAlB7B,wBAAkB,6DAH9B,iEAAW;AACV8B,kBAAU,EAAE;AADF,OAAX,CAG8B,GAAlB9B,kBAAkB,CAAlB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eCPb;;;UAEQ+B,O,GAAY,uD,CAAZA,O;;UAUKC,uBAAuB;AAoBlC,yCACUC,WADV,EAESC,kBAFT,EAGSC,SAHT,EAGmC;AAAA;;AAFzB,eAAAF,WAAA,GAAAA,WAAA;AACD,eAAAC,kBAAA,GAAAA,kBAAA;AACA,eAAAC,SAAA,GAAAA,SAAA;AArBF,eAAAC,KAAA,GAAQ,IAAIT,IAAJ,GAAWU,WAAX,EAAR;AASA,eAAAC,SAAA,GAAY;AACjB,iCAAqB,eADJ;AAEjB,6BAAiB,eAFA;AAGjB,8BAAkB,gBAHD;AAIjB,4BAAgB,kBAJC;AAKjB,6BAAiB,kBALA;AAMjB,6BAAiB;AANA,WAAZ;AAcL,eAAKC,IAAL,GAAY,KAAKN,WAAL,CAAiBO,KAAjB,CAAuB;AACjCC,2BAAe,EAAE,CAAC,KAAKL,KAAN,CADgB;AAEjCM,2BAAe,EAAE,CAAC,KAAKN,KAAN,CAFgB;AAGjCO,yBAAa,EAAE,CAAC,KAAKP,KAAN,CAHkB;AAIjCZ,iBAAK,EAAE,CAAC,EAAD,CAJ0B;AAKjCN,oBAAQ,EAAE,CAAC,EAAD,CALuB;AAMjCD,kBAAM,EAAE,CAAC,EAAD;AANyB,WAAvB,CAAZ;AAQD;;AAjCiC;AAAA;AAAA,iBAmC5B,mBAAU;;;;;;;AAER2B,0B,GAAO,qDAAqD,KAAKV,kBAAL,CAAwBjC,WAAxB,CAAoC,UAApC,C,EAClE;;AACM4C,6B,GAAUC,SAAS,CAACF,IAAD,C,EACzB;;;AACA,6BAAMb,OAAO,CAACgB,IAAR,CAAa;AAACC,2BAAG,EAAEH;AAAN,uBAAb,CAAN;;;;;;;;;AACD;AA1CiC;AAAA;AAAA,iBA6ClC,mBAAO;AACL,iBAAKX,kBAAL,CAAwBjC,WAAxB,CAAoC,iBAApC,IAAyD,KAAKsC,IAAL,CAAU/B,KAAV,CAAgB,iBAAhB,EAAmCyC,KAAnC,CAAyC,CAAzC,EAA2C,EAA3C,CAAzD;AACA,iBAAKf,kBAAL,CAAwBjC,WAAxB,CAAoC,iBAApC,IAAyD,KAAKsC,IAAL,CAAU/B,KAAV,CAAgB,iBAAhB,EAAmCyC,KAAnC,CAAyC,EAAzC,EAA4C,EAA5C,CAAzD;AACAxC,mBAAO,CAACC,GAAR,CAAY,KAAKwB,kBAAL,CAAwBjC,WAAxB,CAAoC,iBAApC,CAAZ;AACAQ,mBAAO,CAACC,GAAR,CAAY,KAAKwB,kBAAL,CAAwBjC,WAAxB,CAAoC,iBAApC,CAAZ;AACA,iBAAKiC,kBAAL,CAAwBjC,WAAxB,CAAoC,eAApC,IAAuD,KAAKsC,IAAL,CAAU/B,KAAV,CAAgB,eAAhB,CAAvD;AACAC,mBAAO,CAACC,GAAR,CAAY,KAAKwB,kBAAL,CAAwBjC,WAAxB,CAAoC,eAApC,CAAZ;AACA,iBAAKiC,kBAAL,CAAwBjC,WAAxB,CAAoC,OAApC,IAA+C,KAAKsC,IAAL,CAAU/B,KAAV,CAAgB,OAAhB,CAA/C;AACA,iBAAK0B,kBAAL,CAAwBjC,WAAxB,CAAoC,UAApC,IAAkD,KAAKsC,IAAL,CAAU/B,KAAV,CAAgB,UAAhB,CAAlD;AACA,iBAAK0B,kBAAL,CAAwBjC,WAAxB,CAAoC,QAApC,IAAgD,KAAKsC,IAAL,CAAU/B,KAAV,CAAgB,QAAhB,CAAhD;AACJ;;;;;;;;;;;;AAWI,iBAAK0B,kBAAL,CAAwBgB,SAAxB;AACA,iBAAKC,mBAAL,GAA2B,IAA3B;AACA,iBAAKhB,SAAL,CAAeiB,OAAf;AACD;AArEiC;AAAA;AAAA,iBAuElC,oBAAW,CACV;AAxEiC;AAAA;AAAA,iBA0ElC,mBAAO;AACL,iBAAKjB,SAAL,CAAeiB,OAAf;AACD;AA5EiC;AAAA;AAAA,iBA8ElC,gBAAI;AACF,iBAAKjB,SAAL,CAAeiB,OAAf;AACD;AAhFiC;;AAAA;AAAA,S;;;;gBARhB;;gBACX;;gBANA;;;;AAaIpB,6BAAuB,6DALnC,gEAAU;AACTqB,gBAAQ,EAAE,0BADD;AAETC,gBAAQ,EAAR,kFAFS;;AAAA,OAAV,CAKmC,GAAvBtB,uBAAuB,CAAvB;;;;;;;;;;;;;;;;ACdb;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA","file":"default~appointment-reminder-appointment-reminder-module~appointments-appointments-module~saved-appo~92ed99fe-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { LocalNotification, LocalNotificationPendingList, Plugins, } from '@capacitor/core';\n\nconst { Storage, LocalNotifications } = Plugins;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppointmentService {\n\n  public appiontment = {};\n  //set the strage key for photos can be changed\n  private APPOINTMENT_STORAGE: string = \"appointment\";\n\n  constructor() { }\n\n  public async loadAppointment(){\n    // create a promise that load the data from database\n    const appiontmentJSON = await Storage.get({ key: this.APPOINTMENT_STORAGE });\n    // set the current session value using data from DB, if it doesn't exist it wll initialize a empty array\n    this.appiontment = JSON.parse(appiontmentJSON.value) || {};\n    console.log(\"finished loading\");\n  }\n\n  public async saveValue() {\n    // console.log(\"setting data\")\n    // convert to strig\n    const JSONString = JSON.stringify(this.appiontment);\n    // store the value in to the pair\n    Storage.set({\n      key: this.APPOINTMENT_STORAGE,\n      value: JSONString\n    })\n  }\n\n  public async setReminder(appointmentTimeStr, appointmentDateStr,reminderTime, doctor, location) {\n    var notificationTitle = \"Appointment at \" + appointmentTimeStr + ' on ' + appointmentDateStr;\n    var notificationText  = \"You have an appointment at \" + appointmentTimeStr + ' on ' + appointmentDateStr + \" with Dr. \" + doctor + \" at \" + location;\n    //const pendingList : LocalNotificationPendingList = await LocalNotifications.getPending();\n    //const clear = await LocalNotifications.cancel(pendingList);\n    //console.log(\"cleared all previous\", clear)\n    await LocalNotifications.schedule({\n      notifications:[\n        {\n          id: 1,\n          title: notificationTitle,\n          body: notificationText,\n          schedule: {at: new Date(reminderTime)},\n        }\n      ]\n    })\n    console.log(\"reminder set\");\n    const pendingList : LocalNotificationPendingList = await LocalNotifications.getPending();\n    console.log(pendingList);\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ModalController } from '@ionic/angular';\n//load browser plugin\nimport { Plugins } from '@capacitor/core';\nconst { Browser } = Plugins;\n\nimport {Validators, FormBuilder, FormGroup } from '@angular/forms';\nimport { AppointmentService } from '../services/appointment.service'; \n\n@Component({\n  selector: 'app-appointment-reminder',\n  templateUrl: './appointment-reminder.page.html',\n  styleUrls: ['./appointment-reminder.page.scss'],\n})\nexport class AppointmentReminderPage implements OnInit {\n\n  public today = new Date().toISOString();\n/*   public todayString = new Date(this.today.toString().slice(0,21)).toISOString();\n  public dateNow = this.todayString.slice(0,10);\n  public timeNow = this.todayString.slice(11,19);\n  public plus1Year = this.today.getFullYear();\n  public plus1YearString = this.plus1Year + 1; */\n  public form : FormGroup;\n  public isLocationSetted: Boolean;\n  public isAppointmentSetted: Boolean;\n  public timeSlots = {\n    '30 minutes before': '${1000*60*30}',\n    '1 hour before': '${1000*60*60}',\n    '2 hours before': '${1000*60*120}',\n    '1 day before': '${1000*60*60*24}',\n    '2 days before': '${1000*60*60*48}',\n    '1 week before': '${1000*60*60*24*7}',\n  };\n\n  constructor(\n    private formBuilder: FormBuilder, \n    public appointmentService: AppointmentService, \n    public modalCtrl: ModalController,\n  ) {\n    this.form = this.formBuilder.group({\n      appointmentDate: [this.today,],\n      appointmentTime: [this.today,],\n      alarmDateTime: [this.today,],\n      title: [''],\n      location: [''],\n      doctor: ['']\n    });\n  }\n\n  async openMap() {\n    \n    const link = \"https://www.google.com/maps/search/?api=1&query=\" + this.appointmentService.appiontment[\"Location\"]    \n    //console.log(link)\n    const encoded = encodeURI(link)\n    //console.log(encoded)\n    await Browser.open({url: encoded});\n  }\n\n\n  logForm(){\n    this.appointmentService.appiontment[\"appointmentDate\"] = this.form.value[\"appointmentDate\"].slice(0,10);\n    this.appointmentService.appiontment[\"appointmentTime\"] = this.form.value[\"appointmentTime\"].slice(11,16);\n    console.log(this.appointmentService.appiontment[\"appointmentDate\"]);\n    console.log(this.appointmentService.appiontment[\"appointmentTime\"]);\n    this.appointmentService.appiontment[\"alarmDateTime\"] = this.form.value[\"alarmDateTime\"];\n    console.log(this.appointmentService.appiontment[\"alarmDateTime\"]);\n    this.appointmentService.appiontment[\"Title\"] = this.form.value[\"title\"];\n    this.appointmentService.appiontment[\"Location\"] = this.form.value[\"location\"];\n    this.appointmentService.appiontment[\"Doctor\"] = this.form.value[\"doctor\"];\n/*     this.appointmentService.appiontment[\"Reminder\"] = new Date(this.form.value[\"reminder\"]).toString().slice(0, 21);\n    const isoReminder = this.appointmentService.appiontment[\"reminderDate\"]+'T'+ this.appointmentService.appiontment[\"reminderTime\"]\n    console.log(isoReminder);\n    const reminderObj = Date.parse(isoReminder);\n    console.log(reminderObj);\n    this.appointmentService.setReminder(\n      this.appointmentService.appiontment[\"appointmentTime\"], \n      this.appointmentService.appiontment[\"appointmentDate\"], \n      reminderObj, \n      this.appointmentService.appiontment[\"Doctor\"], \n      this.appointmentService.appiontment[\"Location\"]) */\n    this.appointmentService.saveValue();\n    this.isAppointmentSetted = true;\n    this.modalCtrl.dismiss();\n  }\n\n  ngOnInit() {\n  }\n\n  dismiss(){\n    this.modalCtrl.dismiss();\n  }\n\n  save(){\n    this.modalCtrl.dismiss();\n  }\n\n}\n","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-button color=\\\"danger\\\" (click)=\\\"dismiss()\\\">Cancel</ion-button>\\n    </ion-buttons>\\n    <ion-title>New Appointment</ion-title>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button (click)=\\\"logForm()\\\">Done</ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <form [formGroup]=\\\"form\\\">\\n\\n    <ion-card>\\n      <ion-item>\\n        <ion-input placeholder='Title' formControlName=\\\"title\\\"></ion-input>\\n      </ion-item>\\n      <ion-item>\\n        <ion-input placeholder='Doctor' formControlName=\\\"doctor\\\"></ion-input>\\n      </ion-item>\\n      <ion-item lines=\\\"none\\\">\\n        <ion-input placeholder='Location' formControlName=\\\"location\\\"></ion-input>\\n      </ion-item>\\n    </ion-card>\\n\\n    <ion-card>\\n      <ion-item>\\n        <ion-icon name=\\\"calendar-clear-outline\\\" slot=\\\"start\\\"></ion-icon>\\n        <ion-label>Date</ion-label>\\n        <ion-datetime \\n        placeholder=\\\"Select Date\\\"\\n        display-format=\\\"D MMM YYYY\\\" \\n        picker-format=\\\"D MMM YYYY\\\" \\n        formControlName=\\\"appointmentDate\\\"></ion-datetime>\\n      </ion-item>\\n\\n      <ion-item lines=\\\"none\\\">\\n        <ion-icon name=\\\"time-outline\\\" slot=\\\"start\\\"></ion-icon>\\n        <ion-label>Time</ion-label>\\n        <ion-datetime \\n        placeholder=\\\"Select Date\\\"\\n        display-format=\\\"HH:mm\\\" \\n        picker-format=\\\"HH:mm\\\"\\n        formControlName=\\\"appointmentTime\\\"></ion-datetime>\\n      </ion-item>\\n    </ion-card>\\n\\n    <ion-card>\\n      <ion-item lines=\\\"none\\\">\\n        <ion-icon name=\\\"alarm-outline\\\" slot=\\\"start\\\"></ion-icon>\\n        <ion-label>Alarm</ion-label>\\n        <ion-select \\n        formControlName=\\\"alarmDateTime\\\" \\n        interface=\\\"action-sheet\\\"\\n        style=\\\"max-width: 100%;\\\">\\n          <ion-select-option value={{1000*60*30}}>30 minutes before</ion-select-option>\\n          <ion-select-option value={{1000*60*60}}>1 hour before</ion-select-option>\\n          <ion-select-option value={{1000*60*120}}>2 hours before</ion-select-option>\\n          <ion-select-option value={{1000*60*60*24}}>1 day before</ion-select-option>\\n          <ion-select-option value={{1000*60*60*48}}>2 days before</ion-select-option>\\n          <ion-select-option value={{1000*60*60*24*7}}>1 week before</ion-select-option>\\n        </ion-select>\\n\\n\\n<!--         <ion-datetime \\n        placeholder=\\\"Select Date and Time\\\"\\n        display-format=\\\"D MMM YYYY HH:mm\\\" \\n        picker-format=\\\"D MMM YYYY HH:mm\\\"\\n        formControlName=\\\"alarmDateTime\\\"></ion-datetime> -->\\n      </ion-item>\\n    </ion-card>\\n\\n<!--     <ion-item>\\n      <ion-label>Date</ion-label>\\n      <ion-datetime formControlName=\\\"appointmentDate\\\" display-format=\\\"YYYY-MM-DD\\\" picker-format=\\\"YYYY-MM-DD\\\" [min]=\\\"this.dateNow\\\"></ion-datetime>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label>Time</ion-label>\\n      <ion-datetime formControlName=\\\"appointmentTime\\\" display-format=\\\"HH:mm\\\" picker-format=\\\"HH:mm\\\"></ion-datetime>\\n    </ion-item>\\n\\n    <ion-item>\\n      <ion-label>Date</ion-label>\\n      <ion-datetime formControlName=\\\"reminderDate\\\" display-format=\\\"YYYY-MM-DD\\\" picker-format=\\\"YYYY-MM-DD\\\" [min]=\\\"this.dateNow\\\"></ion-datetime>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label>Time</ion-label>\\n      <ion-datetime formControlName=\\\"reminderTime\\\" display-format=\\\"HH:mm\\\" picker-format=\\\"HH:mm\\\"></ion-datetime>\\n    </ion-item>\\n\\n    <ion-item>\\n      <ion-label>Location</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"location\\\"></ion-input>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label>Doctor</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"doctor\\\"></ion-input>\\n    </ion-item> -->\\n\\n<!--     <ion-item lines=\\\"none\\\" *ngIf=\\\"isAppointmentSetted\\\">\\n      <ion-icon color=\\\"success\\\" slot=\\\"start\\\" name=\\\"checkmark-circle-outline\\\"></ion-icon>\\n      <ion-text color=\\\"success\\\" class=\\\"form-error\\\">\\n        Appointment Saved and Reminder Scheduled.\\n      </ion-text>\\n    </ion-item> -->\\n  </form>\\n</ion-content>\";","export default \"ion-button {\\n  width: 90%;\\n  margin: auto;\\n  margin-top: 10%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2FwcG9pbnRtZW50LXJlbWluZGVyLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLFVBQUE7RUFDQSxZQUFBO0VBQ0EsZUFBQTtBQUNKIiwiZmlsZSI6ImFwcG9pbnRtZW50LXJlbWluZGVyLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbImlvbi1idXR0b24ge1xuICAgIHdpZHRoOiA5MCU7XG4gICAgbWFyZ2luOiBhdXRvO1xuICAgIG1hcmdpbi10b3A6IDEwJTtcbn0iXX0= */\";"]}