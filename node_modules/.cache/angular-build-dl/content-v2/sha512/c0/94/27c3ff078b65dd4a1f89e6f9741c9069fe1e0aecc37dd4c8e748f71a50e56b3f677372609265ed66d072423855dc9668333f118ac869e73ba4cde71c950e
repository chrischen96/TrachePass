{"version":3,"sources":["webpack:///src/app/pathology/pathology.page.ts","webpack:///src/app/pathology/pathology.module.ts","webpack:///src/app/services/user-data.service.ts","webpack:///src/app/pathology/pathology.page.html","webpack:///src/app/pathology/pathology-routing.module.ts","webpack:///src/app/pathology/pathology.page.scss"],"names":["PathologyPage","modalCtrl","userDataService","medicalRecord","pathology","intubatation","airwayGrade","tubeSize","details","loadMedicalRecord","Object","keys","medicalRecordValue","forEach","key","includes","console","log","create","component","backdropDismiss","componentProps","isModal","modal","present","selector","template","PathologyPageModule","imports","declarations","Storage","UserDataService","userProfileValue","userProfileKey","userProfileString","medicalRecordKey","medicalRecordString","versionHistoryValue","versionHistoryKey","exporter","exporterString","JSON","stringify","userProfile","get","userProfileGet","parse","value","versionHistoryGet","oldDataGet","oldDataValue","toSave","time","Date","toISOString","slice","type","saveVersion","set","medicalRecordGet","unshift","length","providedIn","routes","path","PathologyPageRoutingModule","forChild","exports"],"mappings":"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","file":"pathology-pathology-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ModalController } from '@ionic/angular';\nimport { EditPathologyPage } from '../edit-pathology/edit-pathology.page';\nimport { UserDataService } from '../services/user-data.service'\n\n@Component({\n  selector: 'app-pathology',\n  templateUrl: './pathology.page.html',\n  styleUrls: ['./pathology.page.scss'],\n})\nexport class PathologyPage implements OnInit {\n  public medicalRecord = {\n    pathology: '',\n    intubatation: '',\n    airwayGrade: '',\n    tubeSize: '',\n    details: '',\n  }\n  \n  constructor(\n    private modalCtrl:ModalController,\n    public userDataService: UserDataService,\n  ) { \n  }\n\n  async ngOnInit() {\n    await this.userDataService.loadMedicalRecord();\n    Object.keys(this.userDataService.medicalRecordValue).forEach(key => {\n      if(Object.keys(this.medicalRecord).includes(key)){\n        this.medicalRecord[key]=this.userDataService.medicalRecordValue[key];\n      }\n      console.log(key, this.medicalRecord[key]);\n    })\n  }\n\n  async edit(){\n    const modal = await this.modalCtrl.create({\n      component: EditPathologyPage,\n      backdropDismiss: false,\n      componentProps: {\n        isModal: true,\n      },\n    });\n    modal.present();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { PathologyPageRoutingModule } from './pathology-routing.module';\n\nimport { PathologyPage } from './pathology.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    PathologyPageRoutingModule\n  ],\n  declarations: [PathologyPage]\n})\nexport class PathologyPageModule {}\n","import { Injectable } from '@angular/core';\n\nimport { Plugins, Capacitor, } from '@capacitor/core';\n\nconst { Storage } = Plugins;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserDataService {\n\n  public userProfileValue = {};\n  public userProfileKey: string = \"userProfile\";\n  public userProfileString: string = \"\";\n\n  public medicalRecordValue = {};\n  public medicalRecordKey:string = \"medicalRecord\";\n  public medicalRecordString: string = \"\";\n\n  public versionHistoryValue = [];\n  public versionHistoryKey:string = 'versionHistory';\n\n  public exporter = {};\n  public exporterString = \"\";\n\n  constructor() { }\n  async exportData() {\n    this.userProfileString = JSON.stringify(this.userProfileValue);\n    this.medicalRecordString = JSON.stringify(this.medicalRecordValue);\n\n    this.exporter = {\n      userProfile: this.userProfileString,\n      medicalRecord: this.medicalRecordString,\n    }\n    this.exporterString = JSON.stringify(this.exporter);\n  }\n\n  async loadUserProfile(){\n    const userProfileGet= await Storage.get({ key: this.userProfileKey });\n    this.userProfileValue = JSON.parse(userProfileGet.value) || {};\n    console.log(\"finished loading\");\n    const versionHistoryGet = await Storage.get({ key: this.versionHistoryKey });\n    this.versionHistoryValue = JSON.parse(versionHistoryGet.value) || [];\n  } //load user profile from storage\n\n  async saveUserProfile() {\n    const oldDataGet = await Storage.get({ key: this.userProfileKey});\n    const oldDataValue = JSON.parse(oldDataGet.value) || {};\n    console.log(oldDataValue);\n    const toSave = {\n      time: new Date().toISOString().slice(0,16),\n      type: 'User Profile',\n      value: oldDataValue,\n    }\n    this.saveVersion(toSave);\n    Storage.set({\n      key: this.userProfileKey,\n      value: JSON.stringify(this.userProfileValue),\n    })\n  } //save updated user profile to storage\n\n  async loadMedicalRecord(){\n    const medicalRecordGet= await Storage.get({ key: this.medicalRecordKey });\n    this.medicalRecordValue = JSON.parse(medicalRecordGet.value) || {};\n    console.log(\"finished loading\");\n    const versionHistoryGet = await Storage.get({ key: this.versionHistoryKey });\n    this.versionHistoryValue = JSON.parse(versionHistoryGet.value) || [];\n  } //load medical record from storage\n\n  async saveMedicalRecord() {\n    const oldDataGet = await Storage.get({ key: this.medicalRecordKey});\n    const oldDataValue = JSON.parse(oldDataGet.value) || {};\n    const toSave = {\n      time: new Date().toISOString().slice(0,16),\n      type: 'Medical Record',\n      value: oldDataValue,\n    }\n    this.saveVersion(toSave);\n    Storage.set({\n      key: this.medicalRecordKey,\n      value: JSON.stringify(this.medicalRecordValue),\n    })\n  } //save new medical record to storage\n\n  saveVersion(toSave: any){\n    this.versionHistoryValue.unshift(toSave);\n    console.log(this.versionHistoryValue);\n    console.log(this.versionHistoryValue.length);\n    if (this.versionHistoryValue.length > 10) {\n      console.log(\"too long\")\n      this.versionHistoryValue = this.versionHistoryValue.slice(0,10);\n      console.log(this.versionHistoryValue);\n    }\n    Storage.set({\n      key: this.versionHistoryKey,\n      value: JSON.stringify(this.versionHistoryValue)\n    })\n  }\n\n  convertToString() {\n    this.userProfileString = JSON.stringify(this.userProfileValue);\n  }\n}\n","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button defaultHref=\\\"medical-record\\\"></ion-back-button>\\n    </ion-buttons>\\n    <ion-title>Airway Pathology</ion-title>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button (click)=\\\"edit()\\\">Edit</ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-card>\\n    <ion-card-header>\\n      <ion-card-title>Reason for Tracheostomy</ion-card-title>\\n    </ion-card-header>\\n    <ion-card-content *ngIf=\\\"medicalRecord.pathology!=''\\\">\\n      {{medicalRecord.pathology}}\\n    </ion-card-content>\\n    <ion-card-content *ngIf=\\\"medicalRecord.pathology==''\\\">\\n      No content\\n    </ion-card-content>\\n  </ion-card>\\n\\n  <ion-card>\\n    <ion-card-header>\\n      <ion-card-title>Is Upper Airway Intubatable?</ion-card-title>\\n    </ion-card-header>\\n    <ion-card-content class=\\\"airway\\\" *ngIf=\\\"medicalRecord.intubatation!=true && medicalRecord.intubatation!=false\\\">\\n      {{medicalRecord.intubatation}}\\n    </ion-card-content>\\n    <ion-card-content class=\\\"airway\\\" *ngIf=\\\"medicalRecord.intubatation==false\\\">\\n      No\\n    </ion-card-content>\\n    <ion-card-content class=\\\"airway\\\" *ngIf=\\\"medicalRecord.intubatation==true\\\">\\n      Yes\\n    </ion-card-content>\\n    <div *ngIf=\\\"medicalRecord.intubatation==true\\\">\\n      <ion-list>\\n        <ion-item>\\n          <ion-label>Airway Grade:</ion-label>\\n          <ion-label>{{medicalRecord.airwayGrade}}</ion-label>\\n        </ion-item>\\n        <ion-item>\\n          <ion-label>Endotracheal Tube Size:</ion-label>\\n          <ion-label>{{medicalRecord.tubeSize}}</ion-label>\\n        </ion-item>\\n        <ion-item lines=\\\"none\\\">\\n          <ion-label>Details:</ion-label> \\n          <ion-label></ion-label> \\n        </ion-item>\\n        <ion-card-content>{{medicalRecord.details}}</ion-card-content>\\n      </ion-list>\\n    </div>\\n\\n  </ion-card>\\n\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { PathologyPage } from './pathology.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PathologyPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class PathologyPageRoutingModule {}\n","export default \"ion-card-title {\\n  font-size: medium;\\n  font-weight: bold;\\n  color: #ff7800;\\n}\\n\\nion-card-header {\\n  padding-top: 15px;\\n  padding-bottom: 10px;\\n}\\n\\nion-card-content {\\n  padding-top: 0px;\\n  padding-bottom: 15px;\\n  color: black;\\n}\\n\\nion-label:last-child {\\n  position: absolute;\\n  right: 5%;\\n  font-weight: bold;\\n}\\n\\n.airway {\\n  font-weight: bold;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3BhdGhvbG9neS5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxpQkFBQTtFQUNBLGlCQUFBO0VBQ0EsY0FBQTtBQUNKOztBQUVBO0VBQ0ksaUJBQUE7RUFDQSxvQkFBQTtBQUNKOztBQUVBO0VBQ0ksZ0JBQUE7RUFDQSxvQkFBQTtFQUNBLFlBQUE7QUFDSjs7QUFHQTtFQUNJLGtCQUFBO0VBQ0EsU0FBQTtFQUNBLGlCQUFBO0FBQUo7O0FBR0E7RUFDSSxpQkFBQTtBQUFKIiwiZmlsZSI6InBhdGhvbG9neS5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJpb24tY2FyZC10aXRsZSB7XG4gICAgZm9udC1zaXplOm1lZGl1bTtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICBjb2xvcjpyZ2IoMjU1LCAxMjAsIDApO1xufVxuXG5pb24tY2FyZC1oZWFkZXIge1xuICAgIHBhZGRpbmctdG9wOiAxNXB4O1xuICAgIHBhZGRpbmctYm90dG9tOiAxMHB4O1xufVxuXG5pb24tY2FyZC1jb250ZW50e1xuICAgIHBhZGRpbmctdG9wOiAwcHg7XG4gICAgcGFkZGluZy1ib3R0b206IDE1cHg7XG4gICAgY29sb3I6IGJsYWNrO1xuICAgIC8vZm9udC1zaXplOiAxNHB4O1xufVxuXG5pb24tbGFiZWw6bGFzdC1jaGlsZCB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHJpZ2h0OiA1JTtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuLmFpcndheSB7XG4gICAgZm9udC13ZWlnaHQ6Ym9sZDtcbn0iXX0= */\";"]}