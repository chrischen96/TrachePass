(function () {
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  (window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~appointment-reminder-appointment-reminder-module~appointments-appointments-module~saved-appo~92ed99fe"], {
    /***/
    "Oz3r":
    /*!*************************************************!*\
      !*** ./src/app/services/appointment.service.ts ***!
      \*************************************************/

    /*! exports provided: AppointmentService */

    /***/
    function Oz3r(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AppointmentService", function () {
        return AppointmentService;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _ionic_native_local_notifications_ngx__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @ionic-native/local-notifications/ngx */
      "Bg0J");
      /* harmony import */


      var _capacitor_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @capacitor/core */
      "gcOT"); //import { LocalNotification, LocalNotificationPendingList, Plugins, } from '@capacitor/core';


      var Storage = _capacitor_core__WEBPACK_IMPORTED_MODULE_3__["Plugins"].Storage;

      var AppointmentService = /*#__PURE__*/function () {
        function AppointmentService(localNotifications) {
          _classCallCheck(this, AppointmentService);

          this.localNotifications = localNotifications;
          this.appointment = {}; //set the strage key for photos can be changed

          this.APPOINTMENT_STORAGE = "appointment";
        }

        _createClass(AppointmentService, [{
          key: "loadAppointment",
          value: function loadAppointment() {
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
              var appiontmentJSON;
              return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      _context.next = 2;
                      return Storage.get({
                        key: this.APPOINTMENT_STORAGE
                      });

                    case 2:
                      appiontmentJSON = _context.sent;
                      // set the current session value using data from DB, if it doesn't exist it wll initialize a empty array
                      this.appointment = JSON.parse(appiontmentJSON.value) || {};
                      console.log("finished loading");

                    case 5:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee, this);
            }));
          }
        }, {
          key: "saveValue",
          value: function saveValue() {
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
              var JSONString;
              return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      // console.log("setting data")
                      // convert to strig
                      JSONString = JSON.stringify(this.appointment); // store the value in to the pair

                      Storage.set({
                        key: this.APPOINTMENT_STORAGE,
                        value: JSONString
                      });

                    case 2:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, _callee2, this);
            }));
          }
        }, {
          key: "setReminder",
          value: function setReminder(appointmentTimeStr, appointmentDateStr, reminderTime, title, doctor, location) {
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
              var notificationTitle, notificationText, appointmentDateTime;
              return regeneratorRuntime.wrap(function _callee3$(_context3) {
                while (1) {
                  switch (_context3.prev = _context3.next) {
                    case 0:
                      notificationTitle = title;
                      notificationText = "You have an appointment at " + appointmentTimeStr + ' on ' + appointmentDateStr + " with Dr. " + doctor + " at " + location;
                      appointmentDateTime = new Date(appointmentDateStr + 'T' + appointmentTimeStr);
                      console.log(appointmentDateTime), this.localNotifications.schedule({
                        title: notificationTitle,
                        text: notificationText,
                        trigger: {
                          at: new Date(appointmentDateTime.getTime() - reminderTime)
                        }
                      });
                      console.log(new Date(appointmentDateTime.getTime() - reminderTime)); //const pendingList : LocalNotificationPendingList = await LocalNotifications.getPending();
                      //const clear = await LocalNotifications.cancel(pendingList);
                      //console.log("cleared all previous", clear)

                      /*     await LocalNotifications.schedule({
                            notifications:[
                              {
                                id: 1,
                                title: notificationTitle,
                                body: notificationText,
                                schedule: {at: new Date(reminderTime)},
                              }
                            ]
                          })
                          console.log("reminder set");
                          const pendingList : LocalNotificationPendingList = await LocalNotifications.getPending();
                          console.log(pendingList); */

                    case 5:
                    case "end":
                      return _context3.stop();
                  }
                }
              }, _callee3, this);
            }));
          }
        }]);

        return AppointmentService;
      }();

      AppointmentService.ctorParameters = function () {
        return [{
          type: _ionic_native_local_notifications_ngx__WEBPACK_IMPORTED_MODULE_2__["LocalNotifications"]
        }];
      };

      AppointmentService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
      })], AppointmentService);
      /***/
    },

    /***/
    "QQ9l":
    /*!*******************************************************************!*\
      !*** ./src/app/appointment-reminder/appointment-reminder.page.ts ***!
      \*******************************************************************/

    /*! exports provided: AppointmentReminderPage */

    /***/
    function QQ9l(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AppointmentReminderPage", function () {
        return AppointmentReminderPage;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _raw_loader_appointment_reminder_page_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! raw-loader!./appointment-reminder.page.html */
      "r8bU");
      /* harmony import */


      var _appointment_reminder_page_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./appointment-reminder.page.scss */
      "txDb");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _ionic_angular__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @ionic/angular */
      "TEn/");
      /* harmony import */


      var _capacitor_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @capacitor/core */
      "gcOT");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/forms */
      "3Pt+");
      /* harmony import */


      var _services_appointment_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! ../services/appointment.service */
      "Oz3r"); //load browser plugin


      var Browser = _capacitor_core__WEBPACK_IMPORTED_MODULE_5__["Plugins"].Browser;

      var AppointmentReminderPage = /*#__PURE__*/function () {
        /*   public todayString = new Date(this.today.toString().slice(0,21)).toISOString();
          public dateNow = this.todayString.slice(0,10);
          public timeNow = this.todayString.slice(11,19);
          public plus1Year = this.today.getFullYear();
          public plus1YearString = this.plus1Year + 1; */

        /*   public timeSlots = {
            '30 minutes before': '${1000*60*30}',
            '1 hour before': '${1000*60*60}',
            '2 hours before': '${1000*60*120}',
            '1 day before': '${1000*60*60*24}',
            '2 days before': '${1000*60*60*48}',
            '1 week before': '${1000*60*60*24*7}',
          }; */
        function AppointmentReminderPage(formBuilder, appointmentService, modalCtrl) {
          _classCallCheck(this, AppointmentReminderPage);

          this.formBuilder = formBuilder;
          this.appointmentService = appointmentService;
          this.modalCtrl = modalCtrl;
          this.today = new Date().toISOString();
          this.form = this.formBuilder.group({
            appointmentDate: [this.today],
            appointmentTime: [this.today],
            alarmDateTime: [''],
            title: [''],
            location: [''],
            doctor: ['']
          });
        }

        _createClass(AppointmentReminderPage, [{
          key: "ngOnInit",
          value: function ngOnInit() {}
        }, {
          key: "openMap",
          value: function openMap() {
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
              var link, encoded;
              return regeneratorRuntime.wrap(function _callee4$(_context4) {
                while (1) {
                  switch (_context4.prev = _context4.next) {
                    case 0:
                      link = "https://www.google.com/maps/search/?api=1&query=" + this.appointmentService.appointment["Location"]; //console.log(link)

                      encoded = encodeURI(link); //console.log(encoded)

                      _context4.next = 4;
                      return Browser.open({
                        url: encoded
                      });

                    case 4:
                    case "end":
                      return _context4.stop();
                  }
                }
              }, _callee4, this);
            }));
          }
        }, {
          key: "save",
          value: function save() {
            this.appointmentService.appointment["appointmentDate"] = this.form.value["appointmentDate"].slice(0, 10);
            this.appointmentService.appointment["appointmentTime"] = this.form.value["appointmentTime"].slice(11, 16);
            console.log(this.appointmentService.appointment["appointmentDate"]);
            console.log(this.appointmentService.appointment["appointmentTime"]);
            this.appointmentService.appointment["alarmDateTime"] = this.form.value["alarmDateTime"];
            console.log(this.appointmentService.appointment["alarmDateTime"]);
            this.appointmentService.appointment["title"] = this.form.value["title"];
            this.appointmentService.appointment["location"] = this.form.value["location"];
            this.appointmentService.appointment["doctor"] = this.form.value["doctor"];
            /*     this.appointmentService.appointment["Reminder"] = new Date(this.form.value["reminder"]).toString().slice(0, 21);
                const isoReminder = this.appointmentService.appointment["reminderDate"]+'T'+ this.appointmentService.appointment["reminderTime"]
                console.log(isoReminder);
                const reminderObj = Date.parse(isoReminder);
                console.log(reminderObj);
                 */

            this.appointmentService.saveValue();
            this.appointmentService.setReminder(this.appointmentService.appointment["appointmentTime"], this.appointmentService.appointment["appointmentDate"], this.appointmentService.appointment["alarmDateTime"], this.appointmentService.appointment["Title"], this.appointmentService.appointment["Location"], this.appointmentService.appointment["Doctor"]);
            this.isAppointmentSetted = true;
            this.modalCtrl.dismiss();
            location.reload();
          }
        }, {
          key: "dismiss",
          value: function dismiss() {
            this.modalCtrl.dismiss();
          }
        }]);

        return AppointmentReminderPage;
      }();

      AppointmentReminderPage.ctorParameters = function () {
        return [{
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_6__["FormBuilder"]
        }, {
          type: _services_appointment_service__WEBPACK_IMPORTED_MODULE_7__["AppointmentService"]
        }, {
          type: _ionic_angular__WEBPACK_IMPORTED_MODULE_4__["ModalController"]
        }];
      };

      AppointmentReminderPage = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-appointment-reminder',
        template: _raw_loader_appointment_reminder_page_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_appointment_reminder_page_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
      })], AppointmentReminderPage);
      /***/
    },

    /***/
    "r8bU":
    /*!***********************************************************************************************************!*\
      !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/appointment-reminder/appointment-reminder.page.html ***!
      \***********************************************************************************************************/

    /*! exports provided: default */

    /***/
    function r8bU(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "<ion-header>\n  <ion-toolbar>\n    <ion-buttons slot=\"start\">\n      <ion-button color=\"danger\" (click)=\"dismiss()\">Cancel</ion-button>\n    </ion-buttons>\n    <ion-title>New Appointment</ion-title>\n    <ion-buttons slot=\"end\">\n      <ion-button (click)=\"save()\">Done</ion-button>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <form [formGroup]=\"form\">\n\n    <ion-card>\n      <ion-item>\n        <ion-input placeholder='Title' formControlName=\"title\"></ion-input>\n      </ion-item>\n      <ion-item>\n        <ion-input placeholder='Doctor' formControlName=\"doctor\"></ion-input>\n      </ion-item>\n      <ion-item lines=\"none\">\n        <ion-input placeholder='Location' formControlName=\"location\"></ion-input>\n      </ion-item>\n    </ion-card>\n\n    <ion-card>\n      <ion-item>\n        <ion-icon name=\"calendar-clear-outline\" slot=\"start\"></ion-icon>\n        <ion-label>Date</ion-label>\n        <ion-datetime \n        placeholder=\"Select Date\"\n        display-format=\"D MMM YYYY\" \n        picker-format=\"D MMM YYYY\" \n        formControlName=\"appointmentDate\"></ion-datetime>\n      </ion-item>\n\n      <ion-item lines=\"none\">\n        <ion-icon name=\"time-outline\" slot=\"start\"></ion-icon>\n        <ion-label>Time</ion-label>\n        <ion-datetime \n        placeholder=\"Select Date\"\n        display-format=\"HH:mm\" \n        picker-format=\"HH:mm\"\n        formControlName=\"appointmentTime\"></ion-datetime>\n      </ion-item>\n    </ion-card>\n\n    <ion-card>\n      <ion-item lines=\"none\">\n        <ion-icon name=\"alarm-outline\" slot=\"start\"></ion-icon>\n        <ion-label>Alarm</ion-label>\n        <ion-select \n        formControlName=\"alarmDateTime\" \n        interface=\"action-sheet\"\n        style=\"max-width: 100%;\">\n        <ion-select-option value={{0}}>At time of event</ion-select-option>\n          <ion-select-option value={{1000*60*30}}>30 minutes before</ion-select-option>\n          <ion-select-option value={{1000*60*60}}>1 hour before</ion-select-option>\n          <ion-select-option value={{1000*60*120}}>2 hours before</ion-select-option>\n          <ion-select-option value={{1000*60*60*24}}>1 day before</ion-select-option>\n          <ion-select-option value={{1000*60*60*48}}>2 days before</ion-select-option>\n          <ion-select-option value={{1000*60*60*24*7}}>1 week before</ion-select-option>\n        </ion-select>\n      </ion-item>\n    </ion-card>\n  </form>\n</ion-content>\n\n<!--     <ion-item>\n      <ion-label>Date</ion-label>\n      <ion-datetime formControlName=\"appointmentDate\" display-format=\"YYYY-MM-DD\" picker-format=\"YYYY-MM-DD\" [min]=\"this.dateNow\"></ion-datetime>\n    </ion-item>\n    <ion-item>\n      <ion-label>Time</ion-label>\n      <ion-datetime formControlName=\"appointmentTime\" display-format=\"HH:mm\" picker-format=\"HH:mm\"></ion-datetime>\n    </ion-item>\n\n    <ion-item>\n      <ion-label>Date</ion-label>\n      <ion-datetime formControlName=\"reminderDate\" display-format=\"YYYY-MM-DD\" picker-format=\"YYYY-MM-DD\" [min]=\"this.dateNow\"></ion-datetime>\n    </ion-item>\n    <ion-item>\n      <ion-label>Time</ion-label>\n      <ion-datetime formControlName=\"reminderTime\" display-format=\"HH:mm\" picker-format=\"HH:mm\"></ion-datetime>\n    </ion-item>\n\n    <ion-item>\n      <ion-label>Location</ion-label>\n      <ion-input type=\"text\" formControlName=\"location\"></ion-input>\n    </ion-item>\n    <ion-item>\n      <ion-label>Doctor</ion-label>\n      <ion-input type=\"text\" formControlName=\"doctor\"></ion-input>\n    </ion-item> -->\n\n<!--     <ion-item lines=\"none\" *ngIf=\"isAppointmentSetted\">\n      <ion-icon color=\"success\" slot=\"start\" name=\"checkmark-circle-outline\"></ion-icon>\n      <ion-text color=\"success\" class=\"form-error\">\n        Appointment Saved and Reminder Scheduled.\n      </ion-text>\n    </ion-item> -->\n";
      /***/
    },

    /***/
    "txDb":
    /*!*********************************************************************!*\
      !*** ./src/app/appointment-reminder/appointment-reminder.page.scss ***!
      \*********************************************************************/

    /*! exports provided: default */

    /***/
    function txDb(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "ion-button {\n  width: 90%;\n  margin: auto;\n  margin-top: 10%;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2FwcG9pbnRtZW50LXJlbWluZGVyLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLFVBQUE7RUFDQSxZQUFBO0VBQ0EsZUFBQTtBQUNKIiwiZmlsZSI6ImFwcG9pbnRtZW50LXJlbWluZGVyLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbImlvbi1idXR0b24ge1xuICAgIHdpZHRoOiA5MCU7XG4gICAgbWFyZ2luOiBhdXRvO1xuICAgIG1hcmdpbi10b3A6IDEwJTtcbn0iXX0= */";
      /***/
    }
  }]);
})();
//# sourceMappingURL=default~appointment-reminder-appointment-reminder-module~appointments-appointments-module~saved-appo~92ed99fe-es5.js.map