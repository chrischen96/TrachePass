{"version":3,"sources":["webpack:///src/app/version-history/version-history.page.ts","webpack:///src/app/services/user-data.service.ts","webpack:///src/app/version-history/version-history.module.ts","webpack:///src/app/version-history/version-history.page.html","webpack:///src/app/version-history/version-history.page.scss","webpack:///src/app/version-history/version-history-routing.module.ts"],"names":["VersionHistoryPage","userDataService","modalCtrl","versionHistory","loadUserProfile","loadMedicalRecord","versionHistoryValue","console","log","index","entry","value","create","component","componentProps","date","time","type","JSON","parse","cssClass","modal","present","onWillDismiss","data","restoreValues","userProfileValue","saveUserProfile","medicalRecordValue","saveMedicalRecord","selector","template","Storage","UserDataService","userProfileKey","userProfileString","medicalRecordKey","versionHistoryKey","get","key","userProfileGet","versionHistoryGet","oldDataGet","oldDataValue","toSave","Date","toISOString","slice","saveVersion","set","stringify","medicalRecordGet","unshift","length","providedIn","VersionHistoryPageModule","imports","declarations","routes","path","VersionHistoryPageRoutingModule","forChild","exports"],"mappings":"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","file":"version-history-version-history-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ModalController } from '@ionic/angular';\nimport { UserDataService } from '../services/user-data.service';\nimport { OpenVersionPage } from '../open-version/open-version.page'\nimport { ThrowStmt } from '@angular/compiler';\nimport { computeStackId } from '@ionic/angular/directives/navigation/stack-utils';\n\n@Component({\n  selector: 'app-version-history',\n  templateUrl: './version-history.page.html',\n  styleUrls: ['./version-history.page.scss'],\n})\nexport class VersionHistoryPage implements OnInit {\n  public versionHistory = [];\n\n  constructor(\n    public userDataService: UserDataService, \n    public modalCtrl: ModalController\n  ) { }\n\n  async ngOnInit() {\n    await this.userDataService.loadUserProfile();\n    await this.userDataService.loadMedicalRecord();\n    this.versionHistory = this.userDataService.versionHistoryValue;\n    console.log(this.versionHistory);\n  }\n\n  async openVersion(index: string | number) {\n    //console.log(typeof this.userDataService.old[index]);\n    const entry = this.versionHistory[index];\n    console.log(typeof entry.value)\n    console.log(entry);\n    console.log(entry.value);\n    const modal = await this.modalCtrl.create({\n      component: OpenVersionPage,\n      componentProps: {\n        date: entry.time,\n        type: entry.type,\n        value: JSON.parse(entry.value),\n      },\n      cssClass: 'login-modal'\n    });\n    await modal.present();\n    const { data } = await modal.onWillDismiss();\n    console.log(data.restoreValues);\n    console.log(typeof data.restoreValues);\n    if (data.restoreValues == true){\n      if(entry.type == 'User Profile'){\n        this.userDataService.userProfileValue = entry.value;\n        this.userDataService.saveUserProfile();\n      } else {\n        this.userDataService.medicalRecordValue = entry.value;\n        this.userDataService.saveMedicalRecord();\n      }\n      \n    }\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Plugins, Capacitor, } from '@capacitor/core';\n\nconst { Storage } = Plugins;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserDataService {\n\n  public userProfileValue = {};\n  private userProfileKey: string = \"userProfile\";\n  public userProfileString: string = \"\";\n\n  public medicalRecordValue = {};\n  private medicalRecordKey:string = \"medicalRecord\";\n\n  public versionHistoryValue = [];\n  private versionHistoryKey:string = 'versionHistory';\n\n  constructor() { }\n\n  async loadUserProfile(){\n    const userProfileGet= await Storage.get({ key: this.userProfileKey });\n    this.userProfileValue = JSON.parse(userProfileGet.value) || {};\n    console.log(\"finished loading\");\n    const versionHistoryGet = await Storage.get({ key: this.versionHistoryKey });\n    this.versionHistoryValue = JSON.parse(versionHistoryGet.value) || [];\n  } //load user profile from storage\n\n  async saveUserProfile() {\n    const oldDataGet = await Storage.get({ key: this.userProfileKey});\n    const oldDataValue = JSON.parse(oldDataGet.value) || {};\n    const toSave = {\n      time: new Date().toISOString().slice(0,16),\n      type: 'User Profile',\n      value: oldDataValue,\n    }\n    this.saveVersion(toSave);\n    Storage.set({\n      key: this.userProfileKey,\n      value: JSON.stringify(this.userProfileValue),\n    })\n  } //save updated user profile to storage\n\n  async loadMedicalRecord(){\n    const medicalRecordGet= await Storage.get({ key: this.medicalRecordKey });\n    this.medicalRecordValue = JSON.parse(medicalRecordGet.value) || {};\n    console.log(\"finished loading\");\n    const versionHistoryGet = await Storage.get({ key: this.versionHistoryKey });\n    this.versionHistoryValue = JSON.parse(versionHistoryGet.value) || [];\n  } //load medical record from storage\n\n  async saveMedicalRecord() {\n    const oldDataGet = await Storage.get({ key: this.medicalRecordKey});\n    const oldDataValue = JSON.parse(oldDataGet.value) || {};\n    const toSave = {\n      time: new Date().toISOString().slice(0,16),\n      type: 'Medical History',\n      value: JSON.stringify(oldDataValue),\n    }\n    this.saveVersion(toSave);\n    Storage.set({\n      key: this.medicalRecordKey,\n      value: JSON.stringify(this.medicalRecordValue),\n    })\n  } //save new medical record to storage\n\n  saveVersion(toSave: any){\n    this.versionHistoryValue.unshift(toSave);\n    console.log(this.versionHistoryValue);\n    console.log(this.versionHistoryValue.length);\n    if (this.versionHistoryValue.length > 10) {\n      console.log(\"too long\")\n      this.versionHistoryValue = this.versionHistoryValue.slice(0,10);\n      console.log(this.versionHistoryValue);\n    }\n    Storage.set({\n      key: this.versionHistoryKey,\n      value: JSON.stringify(this.versionHistoryValue)\n    })\n  }\n\n  convertToString() {\n    this.userProfileString = JSON.stringify(this.userProfileValue);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { VersionHistoryPageRoutingModule } from './version-history-routing.module';\n\nimport { VersionHistoryPage } from './version-history.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    VersionHistoryPageRoutingModule\n  ],\n  declarations: [VersionHistoryPage]\n})\nexport class VersionHistoryPageModule {}\n","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button defaultHref=\\\"home\\\"></ion-back-button>\\n    </ion-buttons>\\n    <ion-title>Version History</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-item *ngFor=\\\"let history of versionHistory; index as i\\\">\\n    <ion-label>\\n      <h2>{{history.time | date:'medium'}}</h2>\\n      <h3>{{history.type}}</h3>\\n    </ion-label>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button (click)=\\\"openVersion(i)\\\">View</ion-button>\\n    </ion-buttons>\\n  </ion-item>\\n</ion-content>\\n\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ2ZXJzaW9uLWhpc3RvcnkucGFnZS5zY3NzIn0= */\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { VersionHistoryPage } from './version-history.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: VersionHistoryPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class VersionHistoryPageRoutingModule {}\n"]}