{"version":3,"sources":["webpack:///src/app/services/photo.service.ts","webpack:///src/app/services/user-data.service.ts","webpack:///src/app/view-operative-history/view-operative-history.module.ts","webpack:///src/app/view-operative-history/view-operative-history-routing.module.ts"],"names":["Camera","Filesystem","Storage","PhotoService","platform","photos","PHOTO_STORAGE","convertBlobToBase64","blob","Promise","resolve","reject","reader","FileReader","onerror","onload","result","readAsDataURL","is","photo","readFile","path","filepath","directory","Data","webviewPath","data","deleteFile","splice","length","set","key","value","JSON","stringify","console","log","index","getPhoto","resultType","Uri","source","direction","Rear","quality","capturedPhoto","savePicture","savedImageFile","unshift","cameraPhoto","readAsBase64","base64Data","fileName","Date","toISOString","slice","writeFile","savedFile","uri","convertFileSrc","webPath","file","fetch","response","providedIn","UserDataService","userProfileValue","userProfileKey","userProfileString","medicalRecordValue","medicalRecordKey","medicalRecordString","versionHistoryValue","versionHistoryKey","exporter","exporterString","userProfile","medicalRecord","get","userProfileGet","parse","versionHistoryGet","oldDataGet","oldDataValue","toSave","time","type","saveVersion","medicalRecordGet","ViewOperativeHistoryPageModule","imports","declarations","routes","component","ViewOperativeHistoryPageRoutingModule","forChild","exports"],"mappings":"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","file":"view-operative-history-view-operative-history-module-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Platform } from '@ionic/angular';\nimport { Plugins, CameraResultType, Capacitor, FilesystemDirectory, CameraPhoto, CameraSource, CameraDirection } from '@capacitor/core';\n\nconst { Camera, Filesystem, Storage } = Plugins;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PhotoService {\n  //initiate array for storing photo webpath\n  public photos: Photo[] = [];\n  //set the strage key for photos can be changed\n  private PHOTO_STORAGE: string = \"photos\";\n  //setting platform\n  private platform: Platform;\n\n  constructor(platform: Platform) {\n    this.platform = platform;\n  }\n\n  //loading photo\n  public async loadSaved(photos:Photo[]) {\n    // Retrieve cached photo array data\n    //const photoList = await Storage.get({ key: this.PHOTO_STORAGE });\n    //this.photos = JSON.parse(photoList.value) || [];\n    // Easiest way to detect when running on the web:\n    // “when the platform is NOT hybrid, do this”\n    if (!this.platform.is('hybrid')) {\n      // Display the photo by reading into base64 format\n      for (let photo of photos) {\n        // Read each saved photo's data from the Filesystem\n        const readFile = await Filesystem.readFile({\n            path: photo.filepath,\n            directory: FilesystemDirectory.Data\n        });\n        // Web platform only: Load the photo as base64 data\n        photo.webviewPath = `data:image/jpeg;base64,${readFile.data}`;\n      }\n    }\n  }\n\n  //reset\n  public reset(){\n    for (let photo of this.photos) {\n      // Read each saved photo's data from the Filesystem\n      const deleteFile = Filesystem.deleteFile({\n          path: photo.filepath,\n          directory: FilesystemDirectory.Data\n      });\n    }\n    //emptying photo array\n    this.photos.splice(0, this.photos.length);\n    Storage.set({\n      key: this.PHOTO_STORAGE,\n      value: JSON.stringify(this.photos)\n    });\n    console.log(this.photos);\n    console.log(\"done deleting all\");\n  }\n\n  //removing photo\n  public removePhoto(index) {\n    // remove from file system\n    console.log(\"before\");\n    console.log(this.photos);\n    Filesystem.deleteFile({\n      path: this.photos[index].filepath,\n      directory: FilesystemDirectory.Data\n    });\n    console.log(\"deleted\");\n    console.log(this.photos[index].filepath);\n    console.log(\"editing array\");\n    this.photos.splice(index, 1);\n    Storage.set({\n      key: this.PHOTO_STORAGE,\n      value: JSON.stringify(this.photos)\n    });\n    console.log(\"after\");\n    console.log(this.photos);\n  }\n\n  //edited\n  public async addNewToGallery(photos:Photo[]) {\n    // Take a photo\n    const capturedPhoto = await Camera.getPhoto({\n      resultType: CameraResultType.Uri,\n      source: CameraSource.Camera,\n      direction: CameraDirection.Rear,\n      quality: 100\n    });\n\n    // Save the picture and add it to photo collection (array pointing it to the file lo)\n    const savedImageFile = await this.savePicture(capturedPhoto);\n    photos.unshift(savedImageFile);\n    console.log(\"New Phoo array\");\n    console.log(JSON.stringify(photos))\n    return JSON.stringify(photos);\n    //str\n/*     Storage.set({\n      key: this.PHOTO_STORAGE,\n      value: JSON.stringify(this.photos)\n    }); */\n  }\n\n  //function to save photo\n  private async savePicture(cameraPhoto: CameraPhoto) {\n    const base64Data = await this.readAsBase64(cameraPhoto);\n    // Write the file to the data directory\n    const fileName = new Date().toISOString().slice(0,19) + '.jpeg';\n    const savedFile = await Filesystem.writeFile({\n      path: fileName,\n      data: base64Data,\n      directory: FilesystemDirectory.Data\n    });\n    if (this.platform.is('hybrid')) {\n      // Display the new image by rewriting the 'file://' path to HTTP\n      // Details: https://ionicframework.com/docs/building/webview#file-protocol\n      return {\n        filepath: savedFile.uri,\n        webviewPath: Capacitor.convertFileSrc(savedFile.uri),\n      };\n    }\n    else {\n      // Use webPath to display the new image instead of base64 since it's\n      // already loaded into memory\n      return {\n        filepath: fileName,\n        webviewPath: cameraPhoto.webPath\n      };\n    }\n  }\n\n  //reading as base 64\n  private async readAsBase64(cameraPhoto: CameraPhoto) {\n    if (this.platform.is('hybrid')) {\n      // Read the file into base64 format\n      const file = await Filesystem.readFile({\n        path: cameraPhoto.path\n      });\n      return file.data;\n    }\n    else {\n      // Fetch the photo, read as a blob, then convert to base64 format\n      const response = await fetch(cameraPhoto.webPath);\n      const blob = await response.blob();\n      return await this.convertBlobToBase64(blob) as string;\n    }\n  }\n\n  convertBlobToBase64 = (blob: Blob) => new Promise((resolve, reject) => {\n    const reader = new FileReader;\n    reader.onerror = reject;\n    reader.onload = () => {\n        resolve(reader.result);\n    };\n    reader.readAsDataURL(blob);\n  });\n}\n\n//interface\nexport interface Photo {\n  filepath: string;\n  webviewPath: string;\n}\n","import { Injectable } from '@angular/core';\n\nimport { Plugins, Capacitor, } from '@capacitor/core';\n\nconst { Storage } = Plugins;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserDataService {\n\n  public userProfileValue = {};\n  public userProfileKey: string = \"userProfile\";\n  public userProfileString: string = \"\";\n\n  public medicalRecordValue = {};\n  public medicalRecordKey:string = \"medicalRecord\";\n  public medicalRecordString: string = \"\";\n\n  public versionHistoryValue = [];\n  public versionHistoryKey:string = 'versionHistory';\n\n  public exporter = {};\n  public exporterString = \"\";\n\n  constructor() { }\n  async exportData() {\n    this.userProfileString = JSON.stringify(this.userProfileValue);\n    this.medicalRecordString = JSON.stringify(this.medicalRecordValue);\n\n    this.exporter = {\n      userProfile: this.userProfileString,\n      medicalRecord: this.medicalRecordString,\n    }\n    this.exporterString = JSON.stringify(this.exporter);\n  }\n\n  async loadUserProfile(){\n    const userProfileGet= await Storage.get({ key: this.userProfileKey });\n    this.userProfileValue = JSON.parse(userProfileGet.value) || {};\n    console.log(\"finished loading\");\n    const versionHistoryGet = await Storage.get({ key: this.versionHistoryKey });\n    this.versionHistoryValue = JSON.parse(versionHistoryGet.value) || [];\n  } //load user profile from storage\n\n  async saveUserProfile() {\n    const oldDataGet = await Storage.get({ key: this.userProfileKey});\n    const oldDataValue = JSON.parse(oldDataGet.value) || {};\n    console.log(oldDataValue);\n    const toSave = {\n      time: new Date().toISOString().slice(0,16),\n      type: 'User Profile',\n      value: oldDataValue,\n    }\n    this.saveVersion(toSave);\n    Storage.set({\n      key: this.userProfileKey,\n      value: JSON.stringify(this.userProfileValue),\n    })\n  } //save updated user profile to storage\n\n  async loadMedicalRecord(){\n    const medicalRecordGet= await Storage.get({ key: this.medicalRecordKey });\n    this.medicalRecordValue = JSON.parse(medicalRecordGet.value) || {};\n    console.log(\"finished loading\");\n    const versionHistoryGet = await Storage.get({ key: this.versionHistoryKey });\n    this.versionHistoryValue = JSON.parse(versionHistoryGet.value) || [];\n  } //load medical record from storage\n\n  async saveMedicalRecord() {\n    const oldDataGet = await Storage.get({ key: this.medicalRecordKey});\n    const oldDataValue = JSON.parse(oldDataGet.value) || {};\n    const toSave = {\n      time: new Date().toISOString().slice(0,16),\n      type: 'Medical Record',\n      value: oldDataValue,\n    }\n    this.saveVersion(toSave);\n    Storage.set({\n      key: this.medicalRecordKey,\n      value: JSON.stringify(this.medicalRecordValue),\n    })\n  } //save new medical record to storage\n\n  saveVersion(toSave: any){\n    this.versionHistoryValue.unshift(toSave);\n    console.log(this.versionHistoryValue);\n    console.log(this.versionHistoryValue.length);\n    if (this.versionHistoryValue.length > 10) {\n      console.log(\"too long\")\n      this.versionHistoryValue = this.versionHistoryValue.slice(0,10);\n      console.log(this.versionHistoryValue);\n    }\n    Storage.set({\n      key: this.versionHistoryKey,\n      value: JSON.stringify(this.versionHistoryValue)\n    })\n  }\n\n  convertToString() {\n    this.userProfileString = JSON.stringify(this.userProfileValue);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule} from '@angular/forms'\nimport { IonicModule } from '@ionic/angular';\n\nimport { ViewOperativeHistoryPageRoutingModule } from './view-operative-history-routing.module';\n\nimport { ViewOperativeHistoryPage } from './view-operative-history.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    IonicModule,\n    ViewOperativeHistoryPageRoutingModule\n  ],\n  declarations: [ViewOperativeHistoryPage]\n})\nexport class ViewOperativeHistoryPageModule {}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ViewOperativeHistoryPage } from './view-operative-history.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ViewOperativeHistoryPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ViewOperativeHistoryPageRoutingModule {}\n"]}