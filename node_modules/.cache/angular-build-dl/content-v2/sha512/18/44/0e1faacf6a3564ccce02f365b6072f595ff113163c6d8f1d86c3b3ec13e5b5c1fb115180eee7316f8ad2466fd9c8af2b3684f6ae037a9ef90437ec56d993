{"version":3,"sources":["webpack:///src/app/edit-operative-history/edit-operative-history.page.ts","webpack:///src/app/services/user-data.service.ts","webpack:///src/app/edit-operative-history/edit-operative-history.page.scss","webpack:///src/app/edit-operative-history/edit-operative-history.page.html"],"names":["EditOperativeHistoryPage","modalCtrl","fb","userDataService","history","tuple","operativeHistoryString","operativeHistoryJSON","x","typeOptions","form","group","date","required","type","details","medicalRecordValue","JSON","parse","Object","keys","length","toString","console","log","dismiss","controls","forEach","key","value","stringify","saveMedicalRecord","location","reload","numColumns","numOptions","columnOptions","create","columns","getColumns","buttons","text","role","handler","setValue","picker","present","i","push","name","options","getColumnOptions","columnIndex","selector","template","Storage","UserDataService","userProfileValue","userProfileKey","userProfileString","medicalRecordKey","medicalRecordString","versionHistoryValue","versionHistoryKey","exporter","exporterString","userProfile","medicalRecord","get","userProfileGet","versionHistoryGet","oldDataGet","oldDataValue","toSave","time","Date","toISOString","slice","saveVersion","set","medicalRecordGet","unshift","providedIn"],"mappings":"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","file":"default~edit-operative-history-edit-operative-history-module~operative-history-operative-history-module-es5.js","sourcesContent":["import { Component, OnInit, Input } from '@angular/core';\nimport { ModalController } from '@ionic/angular';\nimport { FormBuilder, FormGroup, FormControl, Validators, ReactiveFormsModule} from '@angular/forms'\nimport { UserDataService } from '../services/user-data.service'; \nimport { pickerController } from '@ionic/core'\n\n@Component({\n  selector: 'app-edit-operative-history',\n  templateUrl: './edit-operative-history.page.html',\n  styleUrls: ['./edit-operative-history.page.scss'],\n})\nexport class EditOperativeHistoryPage implements OnInit {\n  public form: FormGroup;\n  public history = {};\n  public tuple = [];\n  public operativeHistoryString = '';\n  public operativeHistoryJSON = {};\n  public x = '0';\n  public typeOptions = [\n    [\n      'Surgery',\n      'MLB',\n    ]\n  ]\n\n  constructor(\n    private modalCtrl:ModalController,\n    public fb: FormBuilder,\n    public userDataService:UserDataService,\n  ) { \n    this.form = this.fb.group({\n      date: ['',Validators.required],\n      type: ['',Validators.required],\n      details: ['',Validators.required],\n    });\n  }\n\n  ngOnInit() {\n    this.operativeHistoryString = this.userDataService.medicalRecordValue['operativeHistory'];\n    if(this.operativeHistoryString!='' && this.operativeHistoryString!=null){\n      this.operativeHistoryJSON = JSON.parse(this.operativeHistoryString);\n    }\n    if(this.operativeHistoryJSON!=null && this.operativeHistoryJSON!={}){\n      this.x = Object.keys(this.operativeHistoryJSON).length.toString();\n      console.log(this.x);\n    }\n  }\n\n  dismiss(){\n    this.modalCtrl.dismiss();\n  }\n\n  save(){\n/*     Object.keys(this.form.controls).forEach(key => {\n      this.userDataService.medicalRecordValue[key]=this.form.value[key];\n      console.log(key, this.form.get(key).value)\n    }); */\n    Object.keys(this.form.controls).forEach(key => {\n      this.history[key]=this.form.value[key];\n      console.log(key, this.history[key]);\n    });\n    // construct a JSON, then stringify it to store\n    this.operativeHistoryJSON[this.x] = JSON.stringify(this.history);\n    this.operativeHistoryString = JSON.stringify(this.operativeHistoryJSON);\n    this.userDataService.medicalRecordValue['operativeHistory'] = this.operativeHistoryString;\n    console.log(this.userDataService.medicalRecordValue['operativeHistory']);\n    this.userDataService.saveMedicalRecord();\n    this.modalCtrl.dismiss();\n    location.reload();\n  }\n\n  async openPicker(numColumns = 1, numOptions = 2, columnOptions = this.typeOptions){\n    const picker = await pickerController.create({\n      columns: this.getColumns(numColumns, numOptions, columnOptions),\n      buttons: [\n        {\n          text: 'Cancel',\n          role: 'cancel'\n        },\n        {\n          text: 'Confirm',\n          handler: (value) => {\n            console.log(value);\n            this.form.controls['type'].setValue(value['col-0']['text']);\n          }\n        }\n      ]\n    });\n    await picker.present();\n  }\n\n  getColumns(numColumns, numOptions, columnOptions) {\n    let columns = [];\n    for (let i = 0; i < numColumns; i++) {\n      columns.push({\n        name: `col-${i}`,\n        options: this.getColumnOptions(i, numOptions, columnOptions)\n      });\n    }\n    return columns;\n  }\n\n  getColumnOptions(columnIndex, numOptions, columnOptions) {\n    let options = [];\n    for (let i = 0; i < numOptions; i++) {\n      options.push({\n        text: columnOptions[columnIndex][i % numOptions],\n        value: i\n      })\n    }\n    return options;\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Plugins, Capacitor, } from '@capacitor/core';\n\nconst { Storage } = Plugins;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserDataService {\n\n  public userProfileValue = {};\n  public userProfileKey: string = \"userProfile\";\n  public userProfileString: string = \"\";\n\n  public medicalRecordValue = {};\n  public medicalRecordKey:string = \"medicalRecord\";\n  public medicalRecordString: string = \"\";\n\n  public versionHistoryValue = [];\n  public versionHistoryKey:string = 'versionHistory';\n\n  public exporter = {};\n  public exporterString = \"\";\n\n  constructor() { }\n  async exportData() {\n    this.userProfileString = JSON.stringify(this.userProfileValue);\n    this.medicalRecordString = JSON.stringify(this.medicalRecordValue);\n\n    this.exporter = {\n      userProfile: this.userProfileString,\n      medicalRecord: this.medicalRecordString,\n    }\n    this.exporterString = JSON.stringify(this.exporter);\n  }\n\n  async loadUserProfile(){\n    const userProfileGet= await Storage.get({ key: this.userProfileKey });\n    this.userProfileValue = JSON.parse(userProfileGet.value) || {};\n    console.log(\"finished loading\");\n    const versionHistoryGet = await Storage.get({ key: this.versionHistoryKey });\n    this.versionHistoryValue = JSON.parse(versionHistoryGet.value) || [];\n  } //load user profile from storage\n\n  async saveUserProfile() {\n    const oldDataGet = await Storage.get({ key: this.userProfileKey});\n    const oldDataValue = JSON.parse(oldDataGet.value) || {};\n    console.log(oldDataValue);\n    const toSave = {\n      time: new Date().toISOString().slice(0,16),\n      type: 'User Profile',\n      value: oldDataValue,\n    }\n    this.saveVersion(toSave);\n    Storage.set({\n      key: this.userProfileKey,\n      value: JSON.stringify(this.userProfileValue),\n    })\n  } //save updated user profile to storage\n\n  async loadMedicalRecord(){\n    const medicalRecordGet= await Storage.get({ key: this.medicalRecordKey });\n    this.medicalRecordValue = JSON.parse(medicalRecordGet.value) || {};\n    console.log(\"finished loading\");\n    const versionHistoryGet = await Storage.get({ key: this.versionHistoryKey });\n    this.versionHistoryValue = JSON.parse(versionHistoryGet.value) || [];\n  } //load medical record from storage\n\n  async saveMedicalRecord() {\n    const oldDataGet = await Storage.get({ key: this.medicalRecordKey});\n    const oldDataValue = JSON.parse(oldDataGet.value) || {};\n    const toSave = {\n      time: new Date().toISOString().slice(0,16),\n      type: 'Medical Record',\n      value: oldDataValue,\n    }\n    this.saveVersion(toSave);\n    Storage.set({\n      key: this.medicalRecordKey,\n      value: JSON.stringify(this.medicalRecordValue),\n    })\n  } //save new medical record to storage\n\n  saveVersion(toSave: any){\n    this.versionHistoryValue.unshift(toSave);\n    console.log(this.versionHistoryValue);\n    console.log(this.versionHistoryValue.length);\n    if (this.versionHistoryValue.length > 10) {\n      console.log(\"too long\")\n      this.versionHistoryValue = this.versionHistoryValue.slice(0,10);\n      console.log(this.versionHistoryValue);\n    }\n    Storage.set({\n      key: this.versionHistoryKey,\n      value: JSON.stringify(this.versionHistoryValue)\n    })\n  }\n\n  convertToString() {\n    this.userProfileString = JSON.stringify(this.userProfileValue);\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJlZGl0LW9wZXJhdGl2ZS1oaXN0b3J5LnBhZ2Uuc2NzcyJ9 */\";","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-button color=\\\"danger\\\" (click)=\\\"dismiss()\\\">Cancel</ion-button>\\n    </ion-buttons>\\n    <ion-title>Add New Record</ion-title>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button (click)=\\\"save()\\\">Done</ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <form [formGroup]=\\\"form\\\">\\n    <ion-list>\\n      <ion-list-header lines=\\\"full\\\">\\n        <ion-label>\\n          Operative History\\n        </ion-label>\\n      </ion-list-header>\\n\\n      <ion-item>\\n        <ion-label>Date</ion-label>\\n        <ion-datetime placeholder=\\\"Select Date\\\"\\n        display-format=\\\"D MMM YYYY\\\" \\n        picker-format=\\\"D MMM YYYY\\\" \\n        formControlName=\\\"date\\\" \\n        style=\\\"color: dodgerblue;\\\"></ion-datetime>\\n      </ion-item>\\n\\n      <ion-item>\\n        <ion-label>Type</ion-label>\\n        <ion-input \\n          formControlName=\\\"type\\\" \\n          placeholder=\\\"Operation Type\\\"\\n          style=\\\"color: dodgerblue; text-align: end;\\\">\\n        </ion-input>\\n      </ion-item>\\n\\n      <ion-item>\\n        <ion-label position=\\\"stacked\\\">Details</ion-label>\\n        <ion-textarea rows=\\\"15\\\" placeholder=\\\"Enter Details\\\" formControlName=\\\"details\\\"></ion-textarea>\\n      </ion-item>\\n    </ion-list>\\n  </form>\\n</ion-content>\\n\";"]}