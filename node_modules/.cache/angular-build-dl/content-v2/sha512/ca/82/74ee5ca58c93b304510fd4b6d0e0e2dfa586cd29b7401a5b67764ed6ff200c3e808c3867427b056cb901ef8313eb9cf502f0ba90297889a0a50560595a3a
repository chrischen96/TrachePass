{"version":3,"sources":["webpack:///src/app/services/photo.service.ts","webpack:///src/app/edit-operative-history/edit-operative-history.page.ts","webpack:///src/app/services/user-data.service.ts","webpack:///src/app/edit-operative-history/edit-operative-history.page.scss","webpack:///src/app/edit-operative-history/edit-operative-history.page.html"],"names":["Camera","Filesystem","Storage","PhotoService","platform","photos","PHOTO_STORAGE","convertBlobToBase64","blob","Promise","resolve","reject","reader","FileReader","onerror","onload","result","readAsDataURL","is","photo","readFile","path","filepath","directory","Data","webviewPath","data","deleteFile","splice","length","set","key","value","JSON","stringify","console","log","index","getPhoto","resultType","Uri","source","direction","Rear","quality","capturedPhoto","savePicture","savedImageFile","unshift","cameraPhoto","readAsBase64","base64Data","fileName","Date","toISOString","slice","writeFile","savedFile","uri","convertFileSrc","webPath","file","fetch","response","providedIn","EditOperativeHistoryPage","modalCtrl","fb","userDataService","photoService","history","tuple","operativeHistoryString","operativeHistoryJSON","histories","form","group","date","required","type","details","medicalRecordValue","parse","addNewToGallery","dismiss","Object","keys","controls","forEach","dateNum","now","push","i","j","lastKey","saveMedicalRecord","location","reload","srcPath","create","component","componentProps","src","cssClass","keyboardClose","showBackdrop","modal","present","selector","template","UserDataService","userProfileValue","userProfileKey","userProfileString","medicalRecordKey","medicalRecordString","versionHistoryValue","versionHistoryKey","exporter","exporterString","userProfile","medicalRecord","get","userProfileGet","versionHistoryGet","oldDataGet","oldDataValue","toSave","time","saveVersion","medicalRecordGet"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAIwC,uD;UAAhCA,M,yBAAAA,M;UAAQC,U,yBAAAA,U;UAAYC,O,yBAAAA,O;;UAKfC,YAAY;AAQvB,8BAAYC,QAAZ,EAAgC;AAAA;;AAPhC;AACO,eAAAC,MAAA,GAAkB,EAAlB,CAMyB,CALhC;;AACQ,eAAAC,aAAA,GAAwB,QAAxB;;AAyIR,eAAAC,mBAAA,GAAsB,UAACC,IAAD;AAAA,mBAAgB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACrE,kBAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,oBAAM,CAACE,OAAP,GAAiBH,MAAjB;;AACAC,oBAAM,CAACG,MAAP,GAAgB,YAAM;AAClBL,uBAAO,CAACE,MAAM,CAACI,MAAR,CAAP;AACH,eAFD;;AAGAJ,oBAAM,CAACK,aAAP,CAAqBT,IAArB;AACD,aAPqC,CAAhB;AAAA,WAAtB;;AApIE,eAAKJ,QAAL,GAAgBA,QAAhB;AACD,SAVsB,CAYvB;;;AAZuB;AAAA;AAAA,iBAaV,mBAAUC,MAAV,EAA0B;;;;;;;;0BAMhC,KAAKD,QAAL,CAAcc,EAAd,CAAiB,QAAjB,C;;;;;AACH;6DACkBb,M;;;;;;;;;;;AAATc,2B;;AAEU,6BAAMlB,UAAU,CAACmB,QAAX,CAAoB;AACvCC,4BAAI,EAAEF,KAAK,CAACG,QAD2B;AAEvCC,iCAAS,EAAE,oEAAoBC;AAFQ,uBAApB,CAAN;;;AAAXJ,8B;AAIN;AACAD,2BAAK,CAACM,WAAN,oCAA8CL,QAAQ,CAACM,IAAvD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGL,WA/BsB,CAiCvB;;AAjCuB;AAAA;AAAA,iBAkChB,iBAAK;AAAA,wDACQ,KAAKrB,MADb;AAAA;;AAAA;AACV,qEAA+B;AAAA,oBAAtBc,KAAsB;AAC7B;AACA,oBAAMQ,UAAU,GAAG1B,UAAU,CAAC0B,UAAX,CAAsB;AACrCN,sBAAI,EAAEF,KAAK,CAACG,QADyB;AAErCC,2BAAS,EAAE,oEAAoBC;AAFM,iBAAtB,CAAnB;AAID,eAPS,CAQV;;AARU;AAAA;AAAA;AAAA;AAAA;;AASV,iBAAKnB,MAAL,CAAYuB,MAAZ,CAAmB,CAAnB,EAAsB,KAAKvB,MAAL,CAAYwB,MAAlC;AACA3B,mBAAO,CAAC4B,GAAR,CAAY;AACVC,iBAAG,EAAE,KAAKzB,aADA;AAEV0B,mBAAK,EAAEC,IAAI,CAACC,SAAL,CAAe,KAAK7B,MAApB;AAFG,aAAZ;AAIA8B,mBAAO,CAACC,GAAR,CAAY,KAAK/B,MAAjB;AACA8B,mBAAO,CAACC,GAAR,CAAY,mBAAZ;AACD,WAlDsB,CAoDvB;;AApDuB;AAAA;AAAA,iBAqDhB,qBAAYC,KAAZ,EAAmB;AACxB;AACAF,mBAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,mBAAO,CAACC,GAAR,CAAY,KAAK/B,MAAjB;AACAJ,sBAAU,CAAC0B,UAAX,CAAsB;AACpBN,kBAAI,EAAE,KAAKhB,MAAL,CAAYgC,KAAZ,EAAmBf,QADL;AAEpBC,uBAAS,EAAE,oEAAoBC;AAFX,aAAtB;AAIAW,mBAAO,CAACC,GAAR,CAAY,SAAZ;AACAD,mBAAO,CAACC,GAAR,CAAY,KAAK/B,MAAL,CAAYgC,KAAZ,EAAmBf,QAA/B;AACAa,mBAAO,CAACC,GAAR,CAAY,eAAZ;AACA,iBAAK/B,MAAL,CAAYuB,MAAZ,CAAmBS,KAAnB,EAA0B,CAA1B;AACAnC,mBAAO,CAAC4B,GAAR,CAAY;AACVC,iBAAG,EAAE,KAAKzB,aADA;AAEV0B,mBAAK,EAAEC,IAAI,CAACC,SAAL,CAAe,KAAK7B,MAApB;AAFG,aAAZ;AAIA8B,mBAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,mBAAO,CAACC,GAAR,CAAY,KAAK/B,MAAjB;AACD,WAvEsB,CAyEvB;;AAzEuB;AAAA;AAAA,iBA0EV,yBAAgBA,MAAhB,EAAgC;;;;;;;;AAErB,6BAAML,MAAM,CAACsC,QAAP,CAAgB;AAC1CC,kCAAU,EAAE,iEAAiBC,GADa;AAE1CC,8BAAM,EAAE,6DAAazC,MAFqB;AAG1C0C,iCAAS,EAAE,gEAAgBC,IAHe;AAI1CC,+BAAO,EAAE;AAJiC,uBAAhB,CAAN;;;AAAhBC,mC;;AAQiB,6BAAM,KAAKC,WAAL,CAAiBD,aAAjB,CAAN;;;AAAjBE,oC;AACN1C,4BAAM,CAAC2C,OAAP,CAAeD,cAAf;AACAZ,6BAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,6BAAO,CAACC,GAAR,CAAYH,IAAI,CAACC,SAAL,CAAe7B,MAAf,CAAZ;wDACO4B,IAAI,CAACC,SAAL,CAAe7B,MAAf,C;;;;;;;;;AAMR,WA9FsB,CAgGvB;;AAhGuB;AAAA;AAAA,iBAiGT,qBAAY4C,WAAZ,EAAsC;;;;;;;;AAC/B,6BAAM,KAAKC,YAAL,CAAkBD,WAAlB,CAAN;;;AAAbE,gC;AACN;AACMC,8B,GAAW,IAAIC,IAAJ,GAAWC,WAAX,GAAyBC,KAAzB,CAA+B,CAA/B,EAAiC,EAAjC,IAAuC,O;;AACtC,6BAAMtD,UAAU,CAACuD,SAAX,CAAqB;AAC3CnC,4BAAI,EAAE+B,QADqC;AAE3C1B,4BAAI,EAAEyB,UAFqC;AAG3C5B,iCAAS,EAAE,oEAAoBC;AAHY,uBAArB,CAAN;;;AAAZiC,+B;;2BAKF,KAAKrD,QAAL,CAAcc,EAAd,CAAiB,QAAjB,C;;;;;wDAGK;AACLI,gCAAQ,EAAEmC,SAAS,CAACC,GADf;AAELjC,mCAAW,EAAE,0DAAUkC,cAAV,CAAyBF,SAAS,CAACC,GAAnC;AAFR,uB;;;wDAQA;AACLpC,gCAAQ,EAAE8B,QADL;AAEL3B,mCAAW,EAAEwB,WAAW,CAACW;AAFpB,uB;;;;;;;;;AAKV,WA1HsB,CA4HvB;;AA5HuB;AAAA;AAAA,iBA6HT,sBAAaX,WAAb,EAAuC;;;;;;;2BAC/C,KAAK7C,QAAL,CAAcc,EAAd,CAAiB,QAAjB,C;;;;;;AAEW,6BAAMjB,UAAU,CAACmB,QAAX,CAAoB;AACrCC,4BAAI,EAAE4B,WAAW,CAAC5B;AADmB,uBAApB,CAAN;;;AAAPwC,0B;wDAGCA,IAAI,CAACnC,I;;;;AAIK,6BAAMoC,KAAK,CAACb,WAAW,CAACW,OAAb,CAAX;;;AAAXG,8B;;AACO,6BAAMA,QAAQ,CAACvD,IAAT,EAAN;;;AAAPA,0B;;AACC,6BAAM,KAAKD,mBAAL,CAAyBC,IAAzB,CAAN;;;;;;;;;;;;AAEV;AA3IsB;;AAAA;AAAA,S;;;;gBARhB;;;;AAQIL,kBAAY,6DAHxB,iEAAW;AACV6D,kBAAU,EAAE;AADF,OAAX,CAGwB,GAAZ7D,YAAY,CAAZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCGA8D,wBAAwB;AASnC,0CACUC,SADV,EAESC,EAFT,EAGSC,eAHT,EAISC,YAJT,EAImC;AAAA;;AAHzB,eAAAH,SAAA,GAAAA,SAAA;AACD,eAAAC,EAAA,GAAAA,EAAA;AACA,eAAAC,eAAA,GAAAA,eAAA;AACA,eAAAC,YAAA,GAAAA,YAAA;AAXF,eAAAC,OAAA,GAAU,EAAV;AACA,eAAAC,KAAA,GAAQ,EAAR;AACA,eAAAC,sBAAA,GAAyB,EAAzB;AACA,eAAAC,oBAAA,GAAuB,EAAvB;AACA,eAAApE,MAAA,GAAS,EAAT;AACA,eAAAqE,SAAA,GAAY,EAAZ;AAQL,eAAKC,IAAL,GAAY,KAAKR,EAAL,CAAQS,KAAR,CAAc;AACxBC,gBAAI,EAAE,CAAC,EAAD,EAAI,0DAAWC,QAAf,CADkB;AAExBC,gBAAI,EAAE,CAAC,EAAD,EAAI,0DAAWD,QAAf,CAFkB;AAGxBE,mBAAO,EAAE,CAAC,EAAD,EAAI,0DAAWF,QAAf;AAHe,WAAd,CAAZ;AAKA,eAAKR,OAAL,CAAa,QAAb,IAAyB,EAAzB;AACD;;AArBkC;AAAA;AAAA,iBAuBnC,oBAAW;AACT,iBAAKE,sBAAL,GAA8B,KAAKJ,eAAL,CAAqBa,kBAArB,CAAwC,kBAAxC,CAA9B;;AACA,gBAAG,KAAKT,sBAAL,IAA6B,EAA7B,IAAmC,KAAKA,sBAAL,IAA6B,IAAnE,EAAwE;AACtE,mBAAKC,oBAAL,GAA4BxC,IAAI,CAACiD,KAAL,CAAW,KAAKV,sBAAhB,CAA5B;AACD;AACF;AA5BkC;AAAA;AAAA,iBA8B7B,6BAAiB;;;;;;;AACI,6BAAM,KAAKH,YAAL,CAAkBc,eAAlB,CAAkC,KAAK9E,MAAvC,CAAN;;;AAAzB,2BAAKiE,OAAL,CAAa,QAAb,C;AACA,2BAAKjE,MAAL,GAAc4B,IAAI,CAACiD,KAAL,CAAW,KAAKZ,OAAL,CAAa,QAAb,CAAX,CAAd;;;;;;;;;AACD;AAjCkC;AAAA;AAAA,iBAmCnC,mBAAO;AACL,iBAAKJ,SAAL,CAAekB,OAAf;AACD;AArCkC;AAAA;AAAA,iBAuC7B,gBAAI;;;;;;;;;;AACRC,4BAAM,CAACC,IAAP,CAAY,KAAKX,IAAL,CAAUY,QAAtB,EAAgCC,OAAhC,CAAwC,UAAAzD,GAAG,EAAI;AAC7C,6BAAI,CAACuC,OAAL,CAAavC,GAAb,IAAkB,KAAI,CAAC4C,IAAL,CAAU3C,KAAV,CAAgBD,GAAhB,CAAlB;AACAI,+BAAO,CAACC,GAAR,CAAYL,GAAZ,EAAiB,KAAI,CAACuC,OAAL,CAAavC,GAAb,CAAjB;AACD,uBAHD;AAIAI,6BAAO,CAACC,GAAR,CAAY,QAAZ,EAAsB,KAAKkC,OAAL,CAAa,QAAb,CAAtB;AACMmB,6B,GAAUpC,IAAI,CAACqC,GAAL,E;AAChB,2BAAKjB,oBAAL,CAA0BgB,OAA1B,IAAqC,KAAKnB,OAA1C;AAEAe,4BAAM,CAACC,IAAP,CAAY,KAAKb,oBAAjB,EAAuCe,OAAvC,CAA+C,UAAAzD,GAAG,EAAI;AACpD,6BAAI,CAAC2C,SAAL,CAAeiB,IAAf,CAAoB,KAAI,CAAClB,oBAAL,CAA0B1C,GAA1B,CAApB;;AACAI,+BAAO,CAACC,GAAR,CAAY,KAAI,CAACsC,SAAjB;AACD,uBAHD;;AAKA,2BAAQkB,CAAR,GAAU,CAAV,EAAaA,CAAC,GAAC,KAAKlB,SAAL,CAAe7C,MAA9B,EAAsC+D,CAAC,EAAvC,EAA0C;AACxC,6BAAQC,CAAR,GAAUD,CAAC,GAAC,CAAZ,EAAeC,CAAC,GAAC,KAAKnB,SAAL,CAAe7C,MAAhC,EAAwCgE,CAAC,EAAzC,EAA4C;AAC1C,8BAAG,KAAKnB,SAAL,CAAekB,CAAf,EAAkBf,IAAlB,GAAuB,KAAKH,SAAL,CAAemB,CAAf,EAAkBhB,IAA5C,EAAiD;AAC3CP,mCAD2C,GACjC,KAAKI,SAAL,CAAekB,CAAf,CADiC;AAE/C,iCAAKlB,SAAL,CAAekB,CAAf,IAAkB,KAAKlB,SAAL,CAAemB,CAAf,CAAlB;AACA,iCAAKnB,SAAL,CAAemB,CAAf,IAAkBvB,OAAlB;AACD;AACF;AACF;;AAED,2BAAQsB,EAAR,GAAU,CAAV,EAAaA,EAAC,GAAC,KAAKlB,SAAL,CAAe7C,MAA9B,EAAsC+D,EAAC,EAAvC,EAA0C;AACxC,6BAAKnB,oBAAL,CAA0BmB,EAA1B,IAA6B,KAAKlB,SAAL,CAAekB,EAAf,CAA7B;AACD;;AAEKE,6B,GAAQT,MAAM,CAACC,IAAP,CAAY,KAAKb,oBAAjB,EAAuCY,MAAM,CAACC,IAAP,CAAY,KAAKb,oBAAjB,EAAuC5C,MAAvC,GAA8C,CAArF,C;AACd,6BAAO,KAAK4C,oBAAL,CAA0BqB,OAA1B,CAAP;AAEA,2BAAKtB,sBAAL,GAA8BvC,IAAI,CAACC,SAAL,CAAe,KAAKuC,oBAApB,CAA9B;AACA,2BAAKL,eAAL,CAAqBa,kBAArB,CAAwC,kBAAxC,IAA8D,KAAKT,sBAAnE,C,CACA;;AAEArC,6BAAO,CAACC,GAAR,CAAY,KAAKgC,eAAL,CAAqBa,kBAArB,CAAwC,kBAAxC,CAAZ;AACA,2BAAKb,eAAL,CAAqB2B,iBAArB;AACA,2BAAK7B,SAAL,CAAekB,OAAf;AACAY,8BAAQ,CAACC,MAAT;;;;;;;;;AACD;AA9EkC;AAAA;AAAA,iBAgF7B,oBAAWC,OAAX,EAAoB;;;;;;;;AACV,6BAAM,KAAKhC,SAAL,CAAeiC,MAAf,CAAsB;AACxCC,iCAAS,EAAE,2EAD6B;AAExCC,sCAAc,EAAE;AACdC,6BAAG,EAAEJ;AADS,yBAFwB;AAKxCK,gCAAQ,EAAE,gBAL8B;AAMxCC,qCAAa,EAAE,IANyB;AAOxCC,oCAAY,EAAE;AAP0B,uBAAtB,CAAN;;;AAARC,2B;;AASN,6BAAMA,KAAK,CAACC,OAAN,EAAN;;;;;;;;;AACD;AA3FkC;;AAAA;AAAA,S;;;;gBAX5B;;gBACA;;gBACA;;gBACA;;;;AAQI1C,8BAAwB,6DALpC,gEAAU;AACT2C,gBAAQ,EAAE,4BADD;AAETC,gBAAQ,EAAR,oFAFS;;AAAA,OAAV,CAKoC,GAAxB5C,wBAAwB,CAAxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCRL/D,O,GAAY,uD,CAAZA,O;;UAKK4G,eAAe;AAgB1B,mCAAc;AAAA;;AAdP,eAAAC,gBAAA,GAAmB,EAAnB;AACA,eAAAC,cAAA,GAAyB,aAAzB;AACA,eAAAC,iBAAA,GAA4B,EAA5B;AAEA,eAAAhC,kBAAA,GAAqB,EAArB;AACA,eAAAiC,gBAAA,GAA0B,eAA1B;AACA,eAAAC,mBAAA,GAA8B,EAA9B;AAEA,eAAAC,mBAAA,GAAsB,EAAtB;AACA,eAAAC,iBAAA,GAA2B,gBAA3B;AAEA,eAAAC,QAAA,GAAW,EAAX;AACA,eAAAC,cAAA,GAAiB,EAAjB;AAEU;;AAhBS;AAAA;AAAA,iBAiBpB,sBAAa;;;;;;AACjB,2BAAKN,iBAAL,GAAyBhF,IAAI,CAACC,SAAL,CAAe,KAAK6E,gBAApB,CAAzB;AACA,2BAAKI,mBAAL,GAA2BlF,IAAI,CAACC,SAAL,CAAe,KAAK+C,kBAApB,CAA3B;AAEA,2BAAKqC,QAAL,GAAgB;AACdE,mCAAW,EAAE,KAAKP,iBADJ;AAEdQ,qCAAa,EAAE,KAAKN;AAFN,uBAAhB;AAIA,2BAAKI,cAAL,GAAsBtF,IAAI,CAACC,SAAL,CAAe,KAAKoF,QAApB,CAAtB;;;;;;;;;AACD;AA1ByB;AAAA;AAAA,iBA4BpB,2BAAe;;;;;;;;AACG,6BAAMpH,OAAO,CAACwH,GAAR,CAAY;AAAE3F,2BAAG,EAAE,KAAKiF;AAAZ,uBAAZ,CAAN;;;AAAhBW,oC;AACN,2BAAKZ,gBAAL,GAAwB9E,IAAI,CAACiD,KAAL,CAAWyC,cAAc,CAAC3F,KAA1B,KAAoC,EAA5D;AACAG,6BAAO,CAACC,GAAR,CAAY,kBAAZ;;AAC0B,6BAAMlC,OAAO,CAACwH,GAAR,CAAY;AAAE3F,2BAAG,EAAE,KAAKsF;AAAZ,uBAAZ,CAAN;;;AAApBO,uC;AACN,2BAAKR,mBAAL,GAA2BnF,IAAI,CAACiD,KAAL,CAAW0C,iBAAiB,CAAC5F,KAA7B,KAAuC,EAAlE;;;;;;;;;AACD,WAlCyB,CAkCxB;;AAlCwB;AAAA;AAAA,iBAoCpB,2BAAkB;;;;;;;;AACH,6BAAM9B,OAAO,CAACwH,GAAR,CAAY;AAAE3F,2BAAG,EAAE,KAAKiF;AAAZ,uBAAZ,CAAN;;;AAAba,gC;AACAC,kC,GAAe7F,IAAI,CAACiD,KAAL,CAAW2C,UAAU,CAAC7F,KAAtB,KAAgC,E;AACrDG,6BAAO,CAACC,GAAR,CAAY0F,YAAZ;AACMC,4B,GAAS;AACbC,4BAAI,EAAE,IAAI3E,IAAJ,GAAWC,WAAX,GAAyBC,KAAzB,CAA+B,CAA/B,EAAiC,EAAjC,CADO;AAEbwB,4BAAI,EAAE,cAFO;AAGb/C,6BAAK,EAAE8F;AAHM,uB;AAKf,2BAAKG,WAAL,CAAiBF,MAAjB;AACA7H,6BAAO,CAAC4B,GAAR,CAAY;AACVC,2BAAG,EAAE,KAAKiF,cADA;AAEVhF,6BAAK,EAAEC,IAAI,CAACC,SAAL,CAAe,KAAK6E,gBAApB;AAFG,uBAAZ;;;;;;;;;AAID,WAlDyB,CAkDxB;;AAlDwB;AAAA;AAAA,iBAoDpB,6BAAiB;;;;;;;;AACG,6BAAM7G,OAAO,CAACwH,GAAR,CAAY;AAAE3F,2BAAG,EAAE,KAAKmF;AAAZ,uBAAZ,CAAN;;;AAAlBgB,sC;AACN,2BAAKjD,kBAAL,GAA0BhD,IAAI,CAACiD,KAAL,CAAWgD,gBAAgB,CAAClG,KAA5B,KAAsC,EAAhE;AACAG,6BAAO,CAACC,GAAR,CAAY,kBAAZ;;AAC0B,6BAAMlC,OAAO,CAACwH,GAAR,CAAY;AAAE3F,2BAAG,EAAE,KAAKsF;AAAZ,uBAAZ,CAAN;;;AAApBO,uC;AACN,2BAAKR,mBAAL,GAA2BnF,IAAI,CAACiD,KAAL,CAAW0C,iBAAiB,CAAC5F,KAA7B,KAAuC,EAAlE;;;;;;;;;AACD,WA1DyB,CA0DxB;;AA1DwB;AAAA;AAAA,iBA4DpB,6BAAoB;;;;;;;;AACL,6BAAM9B,OAAO,CAACwH,GAAR,CAAY;AAAE3F,2BAAG,EAAE,KAAKmF;AAAZ,uBAAZ,CAAN;;;AAAbW,gC;AACAC,kC,GAAe7F,IAAI,CAACiD,KAAL,CAAW2C,UAAU,CAAC7F,KAAtB,KAAgC,E;AAC/C+F,4B,GAAS;AACbC,4BAAI,EAAE,IAAI3E,IAAJ,GAAWC,WAAX,GAAyBC,KAAzB,CAA+B,CAA/B,EAAiC,EAAjC,CADO;AAEbwB,4BAAI,EAAE,gBAFO;AAGb/C,6BAAK,EAAE8F;AAHM,uB;AAKf,2BAAKG,WAAL,CAAiBF,MAAjB;AACA7H,6BAAO,CAAC4B,GAAR,CAAY;AACVC,2BAAG,EAAE,KAAKmF,gBADA;AAEVlF,6BAAK,EAAEC,IAAI,CAACC,SAAL,CAAe,KAAK+C,kBAApB;AAFG,uBAAZ;;;;;;;;;AAID,WAzEyB,CAyExB;;AAzEwB;AAAA;AAAA,iBA2E1B,qBAAY8C,MAAZ,EAAuB;AACrB,iBAAKX,mBAAL,CAAyBpE,OAAzB,CAAiC+E,MAAjC;AACA5F,mBAAO,CAACC,GAAR,CAAY,KAAKgF,mBAAjB;AACAjF,mBAAO,CAACC,GAAR,CAAY,KAAKgF,mBAAL,CAAyBvF,MAArC;;AACA,gBAAI,KAAKuF,mBAAL,CAAyBvF,MAAzB,GAAkC,EAAtC,EAA0C;AACxCM,qBAAO,CAACC,GAAR,CAAY,UAAZ;AACA,mBAAKgF,mBAAL,GAA2B,KAAKA,mBAAL,CAAyB7D,KAAzB,CAA+B,CAA/B,EAAiC,EAAjC,CAA3B;AACApB,qBAAO,CAACC,GAAR,CAAY,KAAKgF,mBAAjB;AACD;;AACDlH,mBAAO,CAAC4B,GAAR,CAAY;AACVC,iBAAG,EAAE,KAAKsF,iBADA;AAEVrF,mBAAK,EAAEC,IAAI,CAACC,SAAL,CAAe,KAAKkF,mBAApB;AAFG,aAAZ;AAID;AAxFyB;AAAA;AAAA,iBA0F1B,2BAAkB;AAChB,iBAAKH,iBAAL,GAAyBhF,IAAI,CAACC,SAAL,CAAe,KAAK6E,gBAApB,CAAzB;AACD;AA5FyB;;AAAA;AAAA,S;;;;;;AAAfD,qBAAe,6DAH3B,iEAAW;AACV9C,kBAAU,EAAE;AADF,OAAX,CAG2B,GAAf8C,eAAe,CAAf;;;;;;;;;;;;;;;;ACTb;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA","file":"default~edit-operative-history-edit-operative-history-module~operative-history-operative-history-module-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Platform } from '@ionic/angular';\nimport { Plugins, CameraResultType, Capacitor, FilesystemDirectory, CameraPhoto, CameraSource, CameraDirection } from '@capacitor/core';\n\nconst { Camera, Filesystem, Storage } = Plugins;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PhotoService {\n  //initiate array for storing photo webpath\n  public photos: Photo[] = [];\n  //set the strage key for photos can be changed\n  private PHOTO_STORAGE: string = \"photos\";\n  //setting platform\n  private platform: Platform;\n\n  constructor(platform: Platform) {\n    this.platform = platform;\n  }\n\n  //loading photo\n  public async loadSaved(photos:Photo[]) {\n    // Retrieve cached photo array data\n    //const photoList = await Storage.get({ key: this.PHOTO_STORAGE });\n    //this.photos = JSON.parse(photoList.value) || [];\n    // Easiest way to detect when running on the web:\n    // “when the platform is NOT hybrid, do this”\n    if (!this.platform.is('hybrid')) {\n      // Display the photo by reading into base64 format\n      for (let photo of photos) {\n        // Read each saved photo's data from the Filesystem\n        const readFile = await Filesystem.readFile({\n            path: photo.filepath,\n            directory: FilesystemDirectory.Data\n        });\n        // Web platform only: Load the photo as base64 data\n        photo.webviewPath = `data:image/jpeg;base64,${readFile.data}`;\n      }\n    }\n  }\n\n  //reset\n  public reset(){\n    for (let photo of this.photos) {\n      // Read each saved photo's data from the Filesystem\n      const deleteFile = Filesystem.deleteFile({\n          path: photo.filepath,\n          directory: FilesystemDirectory.Data\n      });\n    }\n    //emptying photo array\n    this.photos.splice(0, this.photos.length);\n    Storage.set({\n      key: this.PHOTO_STORAGE,\n      value: JSON.stringify(this.photos)\n    });\n    console.log(this.photos);\n    console.log(\"done deleting all\");\n  }\n\n  //removing photo\n  public removePhoto(index) {\n    // remove from file system\n    console.log(\"before\");\n    console.log(this.photos);\n    Filesystem.deleteFile({\n      path: this.photos[index].filepath,\n      directory: FilesystemDirectory.Data\n    });\n    console.log(\"deleted\");\n    console.log(this.photos[index].filepath);\n    console.log(\"editing array\");\n    this.photos.splice(index, 1);\n    Storage.set({\n      key: this.PHOTO_STORAGE,\n      value: JSON.stringify(this.photos)\n    });\n    console.log(\"after\");\n    console.log(this.photos);\n  }\n\n  //edited\n  public async addNewToGallery(photos:Photo[]) {\n    // Take a photo\n    const capturedPhoto = await Camera.getPhoto({\n      resultType: CameraResultType.Uri,\n      source: CameraSource.Camera,\n      direction: CameraDirection.Rear,\n      quality: 100\n    });\n\n    // Save the picture and add it to photo collection (array pointing it to the file lo)\n    const savedImageFile = await this.savePicture(capturedPhoto);\n    photos.unshift(savedImageFile);\n    console.log(\"New Phoo array\");\n    console.log(JSON.stringify(photos))\n    return JSON.stringify(photos);\n    //str\n/*     Storage.set({\n      key: this.PHOTO_STORAGE,\n      value: JSON.stringify(this.photos)\n    }); */\n  }\n\n  //function to save photo\n  private async savePicture(cameraPhoto: CameraPhoto) {\n    const base64Data = await this.readAsBase64(cameraPhoto);\n    // Write the file to the data directory\n    const fileName = new Date().toISOString().slice(0,19) + '.jpeg';\n    const savedFile = await Filesystem.writeFile({\n      path: fileName,\n      data: base64Data,\n      directory: FilesystemDirectory.Data\n    });\n    if (this.platform.is('hybrid')) {\n      // Display the new image by rewriting the 'file://' path to HTTP\n      // Details: https://ionicframework.com/docs/building/webview#file-protocol\n      return {\n        filepath: savedFile.uri,\n        webviewPath: Capacitor.convertFileSrc(savedFile.uri),\n      };\n    }\n    else {\n      // Use webPath to display the new image instead of base64 since it's\n      // already loaded into memory\n      return {\n        filepath: fileName,\n        webviewPath: cameraPhoto.webPath\n      };\n    }\n  }\n\n  //reading as base 64\n  private async readAsBase64(cameraPhoto: CameraPhoto) {\n    if (this.platform.is('hybrid')) {\n      // Read the file into base64 format\n      const file = await Filesystem.readFile({\n        path: cameraPhoto.path\n      });\n      return file.data;\n    }\n    else {\n      // Fetch the photo, read as a blob, then convert to base64 format\n      const response = await fetch(cameraPhoto.webPath);\n      const blob = await response.blob();\n      return await this.convertBlobToBase64(blob) as string;\n    }\n  }\n\n  convertBlobToBase64 = (blob: Blob) => new Promise((resolve, reject) => {\n    const reader = new FileReader;\n    reader.onerror = reject;\n    reader.onload = () => {\n        resolve(reader.result);\n    };\n    reader.readAsDataURL(blob);\n  });\n}\n\n//interface\nexport interface Photo {\n  filepath: string;\n  webviewPath: string;\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { ModalController } from '@ionic/angular';\nimport { FormBuilder, FormGroup, FormControl, Validators, ReactiveFormsModule} from '@angular/forms'\nimport { UserDataService } from '../services/user-data.service'; \nimport { PhotoService } from '../services/photo.service';\nimport { ViewerModalComponent } from 'ngx-ionic-image-viewer';\n\n@Component({\n  selector: 'app-edit-operative-history',\n  templateUrl: './edit-operative-history.page.html',\n  styleUrls: ['./edit-operative-history.page.scss'],\n})\nexport class EditOperativeHistoryPage implements OnInit {\n  public form: FormGroup;\n  public history = {};\n  public tuple = [];\n  public operativeHistoryString = '';\n  public operativeHistoryJSON = {};\n  public photos = [];\n  public histories = [];\n\n  constructor(\n    private modalCtrl:ModalController,\n    public fb: FormBuilder,\n    public userDataService:UserDataService,\n    public photoService: PhotoService,\n  ) { \n    this.form = this.fb.group({\n      date: ['',Validators.required],\n      type: ['',Validators.required],\n      details: ['',Validators.required],\n    });\n    this.history['photos'] = '';\n  }\n\n  ngOnInit() {\n    this.operativeHistoryString = this.userDataService.medicalRecordValue['operativeHistory'];\n    if(this.operativeHistoryString!='' && this.operativeHistoryString!=null){\n      this.operativeHistoryJSON = JSON.parse(this.operativeHistoryString);\n    }\n  }\n\n  async addPhotoToGallery(){\n    this.history['photos'] = await this.photoService.addNewToGallery(this.photos);\n    this.photos = JSON.parse(this.history['photos']);\n  }\n\n  dismiss(){\n    this.modalCtrl.dismiss();\n  }\n\n  async save(){\n    Object.keys(this.form.controls).forEach(key => {\n      this.history[key]=this.form.value[key];\n      console.log(key, this.history[key]);\n    });\n    console.log('photos', this.history['photos'])\n    const dateNum = Date.now();\n    this.operativeHistoryJSON[dateNum] = this.history;\n\n    Object.keys(this.operativeHistoryJSON).forEach(key => {\n      this.histories.push(this.operativeHistoryJSON[key]);\n      console.log(this.histories);\n    });\n\n    for(let i=0; i<this.histories.length; i++){\n      for(let j=i+1; j<this.histories.length; j++){\n        if(this.histories[i].date<this.histories[j].date){\n          let history = this.histories[i];\n          this.histories[i]=this.histories[j];\n          this.histories[j]=history;\n        }  \n      }\n    }\n\n    for(let i=0; i<this.histories.length; i++){\n      this.operativeHistoryJSON[i]=this.histories[i];\n    }\n\n    const lastKey=Object.keys(this.operativeHistoryJSON)[Object.keys(this.operativeHistoryJSON).length-1];\n    delete this.operativeHistoryJSON[lastKey];\n\n    this.operativeHistoryString = JSON.stringify(this.operativeHistoryJSON);\n    this.userDataService.medicalRecordValue['operativeHistory'] = this.operativeHistoryString;\n    // construct a JSON, then stringify it to store\n\n    console.log(this.userDataService.medicalRecordValue['operativeHistory']);\n    this.userDataService.saveMedicalRecord();\n    this.modalCtrl.dismiss();\n    location.reload();\n  }\n\n  async openViewer(srcPath) {\n    const modal = await this.modalCtrl.create({\n      component: ViewerModalComponent,\n      componentProps: {\n        src: srcPath\n      },\n      cssClass: 'ion-img-viewer',\n      keyboardClose: true,\n      showBackdrop: true\n    });\n    await modal.present();\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Plugins, Capacitor, } from '@capacitor/core';\n\nconst { Storage } = Plugins;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserDataService {\n\n  public userProfileValue = {};\n  public userProfileKey: string = \"userProfile\";\n  public userProfileString: string = \"\";\n\n  public medicalRecordValue = {};\n  public medicalRecordKey:string = \"medicalRecord\";\n  public medicalRecordString: string = \"\";\n\n  public versionHistoryValue = [];\n  public versionHistoryKey:string = 'versionHistory';\n\n  public exporter = {};\n  public exporterString = \"\";\n\n  constructor() { }\n  async exportData() {\n    this.userProfileString = JSON.stringify(this.userProfileValue);\n    this.medicalRecordString = JSON.stringify(this.medicalRecordValue);\n\n    this.exporter = {\n      userProfile: this.userProfileString,\n      medicalRecord: this.medicalRecordString,\n    }\n    this.exporterString = JSON.stringify(this.exporter);\n  }\n\n  async loadUserProfile(){\n    const userProfileGet= await Storage.get({ key: this.userProfileKey });\n    this.userProfileValue = JSON.parse(userProfileGet.value) || {};\n    console.log(\"finished loading\");\n    const versionHistoryGet = await Storage.get({ key: this.versionHistoryKey });\n    this.versionHistoryValue = JSON.parse(versionHistoryGet.value) || [];\n  } //load user profile from storage\n\n  async saveUserProfile() {\n    const oldDataGet = await Storage.get({ key: this.userProfileKey});\n    const oldDataValue = JSON.parse(oldDataGet.value) || {};\n    console.log(oldDataValue);\n    const toSave = {\n      time: new Date().toISOString().slice(0,16),\n      type: 'User Profile',\n      value: oldDataValue,\n    }\n    this.saveVersion(toSave);\n    Storage.set({\n      key: this.userProfileKey,\n      value: JSON.stringify(this.userProfileValue),\n    })\n  } //save updated user profile to storage\n\n  async loadMedicalRecord(){\n    const medicalRecordGet= await Storage.get({ key: this.medicalRecordKey });\n    this.medicalRecordValue = JSON.parse(medicalRecordGet.value) || {};\n    console.log(\"finished loading\");\n    const versionHistoryGet = await Storage.get({ key: this.versionHistoryKey });\n    this.versionHistoryValue = JSON.parse(versionHistoryGet.value) || [];\n  } //load medical record from storage\n\n  async saveMedicalRecord() {\n    const oldDataGet = await Storage.get({ key: this.medicalRecordKey});\n    const oldDataValue = JSON.parse(oldDataGet.value) || {};\n    const toSave = {\n      time: new Date().toISOString().slice(0,16),\n      type: 'Medical Record',\n      value: oldDataValue,\n    }\n    this.saveVersion(toSave);\n    Storage.set({\n      key: this.medicalRecordKey,\n      value: JSON.stringify(this.medicalRecordValue),\n    })\n  } //save new medical record to storage\n\n  saveVersion(toSave: any){\n    this.versionHistoryValue.unshift(toSave);\n    console.log(this.versionHistoryValue);\n    console.log(this.versionHistoryValue.length);\n    if (this.versionHistoryValue.length > 10) {\n      console.log(\"too long\")\n      this.versionHistoryValue = this.versionHistoryValue.slice(0,10);\n      console.log(this.versionHistoryValue);\n    }\n    Storage.set({\n      key: this.versionHistoryKey,\n      value: JSON.stringify(this.versionHistoryValue)\n    })\n  }\n\n  convertToString() {\n    this.userProfileString = JSON.stringify(this.userProfileValue);\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJlZGl0LW9wZXJhdGl2ZS1oaXN0b3J5LnBhZ2Uuc2NzcyJ9 */\";","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-button color=\\\"danger\\\" (click)=\\\"dismiss()\\\">Cancel</ion-button>\\n    </ion-buttons>\\n    <ion-title>Add New Record</ion-title>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button (click)=\\\"save()\\\">Done</ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <form [formGroup]=\\\"form\\\">\\n    <ion-list>\\n      <ion-list-header lines=\\\"full\\\">\\n        <ion-label>\\n          Operative History\\n        </ion-label>\\n      </ion-list-header>\\n\\n      <ion-item>\\n        <ion-label>Date</ion-label>\\n        <ion-datetime placeholder=\\\"Select Date\\\"\\n        display-format=\\\"D MMM YYYY\\\" \\n        picker-format=\\\"D MMM YYYY\\\" \\n        formControlName=\\\"date\\\" \\n        style=\\\"color: dodgerblue;\\\"></ion-datetime>\\n      </ion-item>\\n\\n      <ion-item lines=\\\"full\\\">\\n        <ion-label>Type</ion-label>\\n        <ion-input \\n          formControlName=\\\"type\\\" \\n          placeholder=\\\"Operation Type\\\"\\n          style=\\\"color: dodgerblue; text-align: end;\\\">\\n        </ion-input>\\n      </ion-item>\\n\\n      <ion-item lines=\\\"full\\\"> \\n        <ion-label position=\\\"stacked\\\">Details</ion-label>\\n        <ion-textarea rows=\\\"7\\\"\\n        placeholder=\\\"Enter Details\\\" \\n        formControlName=\\\"details\\\"></ion-textarea>\\n      </ion-item>\\n    </ion-list>\\n  </form>\\n\\n  <ion-grid>\\n    <ion-row>\\n    <ion-col size=\\\"6\\\"\\n      *ngFor=\\\"let photo of photos; index as position; let counter = index\\\">\\n        <ion-img [src]=\\\"photo.webviewPath\\\" (click)=\\\"openViewer(photo.webviewPath)\\\"></ion-img>\\n    </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n  <ion-fab vertical=\\\"bottom\\\" horizontal=\\\"center\\\" slot=\\\"fixed\\\" style=\\\"margin-bottom: 15%;\\\">\\n    <ion-fab-button (click)=\\\"addPhotoToGallery()\\\">\\n      <ion-icon name=\\\"camera\\\"></ion-icon>\\n    </ion-fab-button>\\n  </ion-fab>\\n</ion-content>\\n\";"]}