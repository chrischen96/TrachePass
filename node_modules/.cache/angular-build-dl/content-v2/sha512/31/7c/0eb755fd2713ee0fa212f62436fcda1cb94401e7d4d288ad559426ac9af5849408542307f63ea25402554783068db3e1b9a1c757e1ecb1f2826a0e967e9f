{"version":3,"sources":["webpack:///src/app/services/appointment.service.ts","webpack:///src/app/appointment-reminder/appointment-reminder.page.ts","webpack:///src/app/appointment-reminder/appointment-reminder-routing.module.ts","webpack:///src/app/appointment-reminder/appointment-reminder.module.ts","webpack:///src/app/appointment-reminder/appointment-reminder.page.html","webpack:///src/app/appointment-reminder/appointment-reminder.page.scss"],"names":["Storage","LocalNotifications","AppointmentService","appiontment","APOINTMENT_STORSGE","get","key","appiontmentJSON","JSON","parse","value","console","log","JSONString","stringify","set","appointmentTimeStr","reminderTime","doctor","location","notificationTitle","notificationText","getPending","pendingList","clear","cancel","schedule","notifications","id","title","body","at","Date","providedIn","AppointmentReminderPage","formBuilder","appointmentService","today","todayString","toISOString","plus1Year","getFullYear","plus1YearString","loadAppointment","sceduler","group","time","reminder","saveValue","reminderObj","setReminder","selector","template","routes","path","component","AppointmentReminderPageRoutingModule","imports","forChild","exports","AppointmentReminderPageModule","declarations"],"mappings":"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","file":"appointment-reminder-appointment-reminder-module-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { LocalNotification, LocalNotificationPendingList, Plugins, } from '@capacitor/core';\n\nconst { Storage, LocalNotifications } = Plugins;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppointmentService {\n\n  public appiontment = {};\n  //set the strage key for photos can be changed\n  private APOINTMENT_STORSGE: string = \"appointment\";\n\n  constructor() { }\n\n  public async loadAppointment(){\n    // create a promise that load the data from database\n    const appiontmentJSON = await Storage.get({ key: this.APOINTMENT_STORSGE });\n    // set the current session value using data from DB, if it doesn't exist it wll initialize a empty array\n    this.appiontment = JSON.parse(appiontmentJSON.value) || {};\n    console.log(\"finished loading\");\n  }\n\n  public async saveValue() {\n    // console.log(\"setting data\")\n    // convert to strig\n    const JSONString = JSON.stringify(this.appiontment);\n    // store the value in to the pair\n    Storage.set({\n      key: this.APOINTMENT_STORSGE,\n      value: JSONString\n    })\n  }\n\n  public async setReminder(appointmentTimeStr, reminderTime, doctor, location) {\n    var notificationTitle = \"Appointment at \" + appointmentTimeStr;\n    var notificationText  = \"You have an appointment at \" + appointmentTimeStr + \" with Dr. \" + doctor + \" at \" + location;\n    const pendingList : LocalNotificationPendingList = await LocalNotifications.getPending();\n    const clear = LocalNotifications.cancel(pendingList);\n    console.log(\"cleared all previous\", clear)\n    const schedule = LocalNotifications.schedule({\n      notifications:[\n        {\n          id: 1,\n          title: notificationTitle,\n          body: notificationText,\n          schedule: {at: new Date(reminderTime)},\n        }\n      ]\n    })\n    console.log(\"reminder set\", schedule);\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\nimport {Validators, FormBuilder, FormGroup } from '@angular/forms';\nimport { AppointmentService } from '../services/appointment.service'; \n\n@Component({\n  selector: 'app-appointment-reminder',\n  templateUrl: './appointment-reminder.page.html',\n  styleUrls: ['./appointment-reminder.page.scss'],\n})\nexport class AppointmentReminderPage implements OnInit {\n\n  public today = new Date();\n  public todayString = this.today.toISOString();\n  public plus1Year = this.today.getFullYear();\n  public plus1YearString = this.plus1Year + 1;\n  private sceduler : FormGroup;\n\n  constructor( private formBuilder: FormBuilder, private appointmentService: AppointmentService ) {\n    this.appointmentService.loadAppointment();\n    this.sceduler = this.formBuilder.group({\n      time: [this.todayString,],\n      reminder: [this.todayString,],\n      location: [''],\n      doctor: ['']\n    });\n  }\n\n\n  logForm(){\n    this.appointmentService.appiontment[\"AppointmentTime\"] = this.sceduler.value[\"time\"];\n    this.appointmentService.appiontment[\"Location\"] = this.sceduler.value[\"location\"];\n    this.appointmentService.appiontment[\"Doctor\"] = this.sceduler.value[\"doctor\"];\n    this.appointmentService.appiontment[\"Reminder\"] = this.sceduler.value[\"reminder\"];\n    this.appointmentService.saveValue();\n    const reminderObj = Date.parse(this.appointmentService.appiontment[\"Reminder\"]);\n    this.appointmentService.setReminder(this.appointmentService.appiontment[\"AppointmentTime\"], reminderObj, this.appointmentService.appiontment[\"Doctor\"], this.appointmentService.appiontment[\"Location\"])\n  }\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { AppointmentReminderPage } from './appointment-reminder.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AppointmentReminderPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AppointmentReminderPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n// must import this two module in the form page and add to @NgModule\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { AppointmentReminderPageRoutingModule } from './appointment-reminder-routing.module';\n\nimport { AppointmentReminderPage } from './appointment-reminder.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    AppointmentReminderPageRoutingModule,\n    ReactiveFormsModule\n  ],\n  declarations: [AppointmentReminderPage]\n})\nexport class AppointmentReminderPageModule {}\n","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title>appointment-reminder</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-item>\\n    <ion-label>Stored Appiontment time</ion-label>\\n    <ion-text>{{this.appointmentService.appiontment[\\\"AppointmentTime\\\"] || \\\"No Set\\\"}}</ion-text>\\n  </ion-item>\\n  <ion-item>\\n    <ion-label>Stored Locaton</ion-label>\\n    <ion-text>{{this.appointmentService.appiontment[\\\"Location\\\"] || \\\"No Set\\\"}}</ion-text>\\n  </ion-item>\\n  <ion-item>\\n    <ion-label>Stored Doctor</ion-label>\\n    <ion-text>{{this.appointmentService.appiontment[\\\"Doctor\\\"] || \\\"No Set\\\"}}</ion-text>\\n  </ion-item>\\n  <form [formGroup]=\\\"sceduler\\\" (ngSubmit)=\\\"logForm()\\\">\\n    <ion-item>\\n      <ion-label>New Appiontment time</ion-label>\\n      <ion-datetime formControlName=\\\"time\\\" display-format=\\\"YYYY-MM-DD HH:mm\\\" picker-format=\\\"YYYY-MM-DDTHH:mm\\\" [min]=\\\"this.todayString\\\" [max]=\\\"this.plus1YearString\\\"></ion-datetime>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label>New Reminder time</ion-label>\\n      <ion-datetime formControlName=\\\"reminder\\\" display-format=\\\"YYYY-MM-DD HH:mm\\\" picker-format=\\\"YYYY-MM-DDTHH:mm\\\" [min]=\\\"this.todayString\\\" [max]=\\\"this.plus1YearString\\\"></ion-datetime>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label>Locaton</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"location\\\"></ion-input>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label>Doctor</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"doctor\\\"></ion-input>\\n    </ion-item>\\n    <button ion-button type=\\\"submit\\\" [disabled]=\\\"!sceduler.valid\\\">Submit</button>\\n  </form>\\n</ion-content>\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhcHBvaW50bWVudC1yZW1pbmRlci5wYWdlLnNjc3MifQ== */\";"]}