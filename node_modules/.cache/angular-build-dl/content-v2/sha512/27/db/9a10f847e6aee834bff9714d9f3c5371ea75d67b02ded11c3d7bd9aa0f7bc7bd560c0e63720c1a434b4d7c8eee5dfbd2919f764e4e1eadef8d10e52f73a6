{"version":3,"sources":["webpack:///src/app/pathology/pathology.page.ts","webpack:///src/app/pathology/pathology.module.ts","webpack:///src/app/services/user-data.service.ts","webpack:///src/app/pathology/pathology.page.html","webpack:///src/app/pathology/pathology-routing.module.ts","webpack:///src/app/pathology/pathology.page.scss"],"names":["PathologyPage","modalCtrl","userDataService","medicalRecord","pathology","otherMedicalConditions","loadMedicalRecord","Object","keys","medicalRecordValue","forEach","key","includes","console","log","create","component","backdropDismiss","componentProps","isModal","modal","present","selector","template","PathologyPageModule","imports","declarations","Storage","UserDataService","userProfileValue","userProfileKey","userProfileString","medicalRecordKey","get","userProfileGet","JSON","parse","value","set","stringify","medicalRecordGet","providedIn","routes","path","PathologyPageRoutingModule","forChild","exports"],"mappings":"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","file":"pathology-pathology-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ModalController } from '@ionic/angular';\nimport { EditPathologyPage } from '../edit-pathology/edit-pathology.page';\nimport { UserDataService } from '../services/user-data.service'\n\n@Component({\n  selector: 'app-pathology',\n  templateUrl: './pathology.page.html',\n  styleUrls: ['./pathology.page.scss'],\n})\nexport class PathologyPage implements OnInit {\n  private medicalRecord = {\n    pathology: 'Click Edit to add something.',\n    otherMedicalConditions: 'Click Edit to add something.',\n  }\n  \n  constructor(\n    private modalCtrl:ModalController,\n    public userDataService: UserDataService,\n  ) { \n  }\n\n  async ngOnInit() {\n    await this.userDataService.loadMedicalRecord();\n    Object.keys(this.userDataService.medicalRecordValue).forEach(key => {\n      if(Object.keys(this.medicalRecord).includes(key)){\n        this.medicalRecord[key]=this.userDataService.medicalRecordValue[key];\n      }\n      console.log(key, this.medicalRecord[key]);\n    })\n  }\n\n  async edit(){\n    const modal = await this.modalCtrl.create({\n      component: EditPathologyPage,\n      backdropDismiss: false,\n      componentProps: {\n        isModal: true\n      },\n    });\n    modal.present();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { PathologyPageRoutingModule } from './pathology-routing.module';\n\nimport { PathologyPage } from './pathology.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    PathologyPageRoutingModule\n  ],\n  declarations: [PathologyPage]\n})\nexport class PathologyPageModule {}\n","import { Injectable } from '@angular/core';\n\nimport { Plugins, Capacitor, } from '@capacitor/core';\n\nconst { Storage } = Plugins;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserDataService {\n\n  public userProfileValue = {};\n  private userProfileKey: string = \"userProfile\";\n  public userProfileString: string = \"\";\n\n  public medicalRecordValue = {};\n  private medicalRecordKey:string = \"medicalRecord\";\n\n  constructor() { }\n\n  async loadUserProfile(){\n    const userProfileGet= await Storage.get({ key: this.userProfileKey });\n    this.userProfileValue = JSON.parse(userProfileGet.value) || {};\n    console.log(\"finished loading\");\n  } //load user profile from storage\n\n  saveUserProfile() {\n    Storage.set({\n      key: this.userProfileKey,\n      value: JSON.stringify(this.userProfileValue),\n    })\n  } //save updated user profile to storage\n\n  async loadMedicalRecord(){\n    const medicalRecordGet= await Storage.get({ key: this.medicalRecordKey });\n    this.medicalRecordValue = JSON.parse(medicalRecordGet.value) || {};\n    console.log(\"finished loading\");\n  } //load medical record from storage\n\n  saveMedicalRecord() {\n    Storage.set({\n      key: this.medicalRecordKey,\n      value: JSON.stringify(this.medicalRecordValue),\n    })\n  } //save new medical record to storage\n\n  convertToString() {\n    this.userProfileString = JSON.stringify(this.userProfileValue);\n  }\n}\n","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button defaultHref=\\\"/medical-record\\\"></ion-back-button>\\n    </ion-buttons>\\n    <ion-title>Pathology</ion-title>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button (click)=\\\"edit()\\\">Edit</ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-card>\\n    <ion-card-header>\\n      <ion-card-title>Underlying Airway Pathology</ion-card-title>\\n    </ion-card-header>\\n    <ion-card-content>\\n      {{medicalRecord.pathology}}\\n    </ion-card-content>\\n  </ion-card>\\n\\n  <ion-card>\\n    <ion-card-header>\\n      <ion-card-title>Other Medical Conditions</ion-card-title>\\n    </ion-card-header>\\n    <ion-card-content>\\n      {{medicalRecord.otherMedicalConditions}}\\n    </ion-card-content>\\n  </ion-card>\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { PathologyPage } from './pathology.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PathologyPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class PathologyPageRoutingModule {}\n","export default \"ion-card-title {\\n  font-size: medium;\\n  font-weight: bold;\\n  color: #ff7800;\\n}\\n\\nion-card-header {\\n  padding-top: 15px;\\n  padding-bottom: 12px;\\n}\\n\\nion-card-content {\\n  padding-bottom: 15px;\\n}\\n\\nion-card-content {\\n  color: black;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3BhdGhvbG9neS5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxpQkFBQTtFQUNBLGlCQUFBO0VBQ0EsY0FBQTtBQUNKOztBQUVBO0VBQ0ksaUJBQUE7RUFDQSxvQkFBQTtBQUNKOztBQUVBO0VBQ0ksb0JBQUE7QUFDSjs7QUFFQTtFQUNJLFlBQUE7QUFDSiIsImZpbGUiOiJwYXRob2xvZ3kucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiaW9uLWNhcmQtdGl0bGUge1xuICAgIGZvbnQtc2l6ZTptZWRpdW07XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgY29sb3I6cmdiKDI1NSwgMTIwLCAwKTtcbn1cblxuaW9uLWNhcmQtaGVhZGVyIHtcbiAgICBwYWRkaW5nLXRvcDogMTVweDtcbiAgICBwYWRkaW5nLWJvdHRvbTogMTJweDtcbn1cblxuaW9uLWNhcmQtY29udGVudHtcbiAgICBwYWRkaW5nLWJvdHRvbTogMTVweDtcbn1cblxuaW9uLWNhcmQtY29udGVudHtcbiAgICBjb2xvcjogYmxhY2s7XG59Il19 */\";"]}