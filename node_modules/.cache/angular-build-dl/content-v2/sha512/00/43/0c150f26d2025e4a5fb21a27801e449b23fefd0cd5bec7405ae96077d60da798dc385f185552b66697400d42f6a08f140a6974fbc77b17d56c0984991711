{"version":3,"sources":["webpack:///src/app/tracheostomy-details/tracheostomy-details.module.ts","webpack:///src/app/services/user-data.service.ts","webpack:///src/app/tracheostomy-details/tracheostomy-details.page.html","webpack:///src/app/tracheostomy-details/tracheostomy-details-routing.module.ts","webpack:///src/app/tracheostomy-details/tracheostomy-details.page.ts","webpack:///src/app/tracheostomy-details/tracheostomy-details.page.scss"],"names":["TracheostomyDetailsPageModule","imports","declarations","Storage","UserDataService","userProfileValue","userProfileKey","userProfileString","medicalRecordValue","medicalRecordKey","get","key","userProfileGet","JSON","parse","value","console","log","set","stringify","medicalRecordGet","providedIn","routes","path","component","TracheostomyDetailsPageRoutingModule","forChild","exports","TracheostomyDetailsPage","modalCtrl","userDataService","medicalRecord","tubeSize","tubeType","suctionLength","shaftLength","scheduleForChange","loadMedicalRecord","Object","keys","forEach","includes","create","backdropDismiss","componentProps","isModal","modal","present","selector","template"],"mappings":"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","file":"tracheostomy-details-tracheostomy-details-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { TracheostomyDetailsPageRoutingModule } from './tracheostomy-details-routing.module';\n\nimport { TracheostomyDetailsPage } from './tracheostomy-details.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    TracheostomyDetailsPageRoutingModule\n  ],\n  declarations: [TracheostomyDetailsPage]\n})\nexport class TracheostomyDetailsPageModule {}\n","import { Injectable } from '@angular/core';\n\nimport { Plugins, Capacitor, } from '@capacitor/core';\n\nconst { Storage } = Plugins;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserDataService {\n\n  public userProfileValue = {};\n  private userProfileKey: string = \"userProfile\";\n  public userProfileString: string = \"\";\n\n  public medicalRecordValue = {};\n  private medicalRecordKey:string = \"medicalRecord\";\n\n  constructor() { }\n\n  async loadUserProfile(){\n    const userProfileGet= await Storage.get({ key: this.userProfileKey });\n    this.userProfileValue = JSON.parse(userProfileGet.value) || {};\n    console.log(\"finished loading\");\n  } //load user profile from storage\n\n  saveUserProfile() {\n    Storage.set({\n      key: this.userProfileKey,\n      value: JSON.stringify(this.userProfileValue),\n    })\n  } //save updated user profile to storage\n\n  async loadMedicalRecord(){\n    const medicalRecordGet= await Storage.get({ key: this.medicalRecordKey });\n    this.medicalRecordValue = JSON.parse(medicalRecordGet.value) || {};\n    console.log(\"finished loading\");\n  } //load medical record from storage\n\n  saveMedicalRecord() {\n    Storage.set({\n      key: this.medicalRecordKey,\n      value: JSON.stringify(this.medicalRecordValue),\n    })\n  } //save new medical record to storage\n\n  convertToString() {\n    this.userProfileString = JSON.stringify(this.userProfileValue);\n  }\n}\n","export default \"<ion-header>\\n  <ion-toolbar >\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button defaultHref=\\\"/medical-record\\\"></ion-back-button>\\n    </ion-buttons>\\n    <ion-title>Details</ion-title>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button (click)=\\\"edit()\\\">Edit</ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content fullscreen>\\n<!--   <ion-list>\\n    <ion-list-header lines=\\\"full\\\">\\n      <ion-label>\\n        Details\\n      </ion-label>\\n    </ion-list-header>\\n\\n    <ion-item>\\n      <ion-label>\\n        <h2>Tube Size</h2>\\n        <h1>6.5 cm</h1>\\n      </ion-label>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label>\\n        <h2>Tube type</h2>\\n        <h1>Uncuffed</h1>\\n      </ion-label>\\n    </ion-item>\\n  </ion-list> -->\\n\\n  <ion-card>\\n    <ion-card-header>\\n      <ion-card-subtitle>Tube Size</ion-card-subtitle>\\n      <ion-card-title>{{medicalRecord.tubeSize}}\\n        <b *ngIf=\\\"medicalRecord.tubeSize != 'Unkown'\\\">mm</b>\\n      </ion-card-title>\\n    </ion-card-header>\\n  </ion-card>\\n\\n  <ion-card>\\n    <ion-card-header>\\n      <ion-card-subtitle>Tube Type</ion-card-subtitle>\\n      <ion-card-title>{{medicalRecord.tubeType}}</ion-card-title>\\n    </ion-card-header>\\n  </ion-card>\\n\\n  <ion-card>\\n    <ion-card-header>\\n      <ion-card-subtitle>Suction Length</ion-card-subtitle>\\n      <ion-card-title>{{medicalRecord.suctionLength}}\\n        <b *ngIf=\\\"medicalRecord.suctionLength != 'Unkown'\\\">mm</b>\\n      </ion-card-title>\\n    </ion-card-header>\\n  </ion-card>\\n\\n  <ion-card>\\n    <ion-card-header>\\n      <ion-card-subtitle>Shaft Length</ion-card-subtitle>\\n      <ion-card-title>{{medicalRecord.shaftLength}}\\n        <b *ngIf=\\\"medicalRecord.shaftLength != 'Unkown'\\\">mm</b>\\n      </ion-card-title>\\n    </ion-card-header>\\n  </ion-card>\\n\\n  <ion-card *ngIf=\\\"medicalRecord.scheduleForChange != 'Unkown'\\\">\\n    <ion-card-header>\\n      <ion-card-subtitle>Schedule for tube change</ion-card-subtitle>\\n      <ion-card-title>{{medicalRecord.scheduleForChange | date : 'd MMM y'}}</ion-card-title>\\n    </ion-card-header>\\n  </ion-card>\\n\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { TracheostomyDetailsPage } from './tracheostomy-details.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: TracheostomyDetailsPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TracheostomyDetailsPageRoutingModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { ModalController } from '@ionic/angular';\nimport { EditTracheostomyDetailsPage } from '../edit-tracheostomy-details/edit-tracheostomy-details.page';\nimport { UserDataService } from '../services/user-data.service';\n\n@Component({\n  selector: 'app-tracheostomy-details',\n  templateUrl: './tracheostomy-details.page.html',\n  styleUrls: ['./tracheostomy-details.page.scss'],\n})\nexport class TracheostomyDetailsPage implements OnInit {\n  private medicalRecord = {\n    tubeSize: 'Unkown',\n    tubeType: 'Unkown',\n    suctionLength: 'Unkown',\n    shaftLength: 'Unkown',\n    scheduleForChange: 'Unkown',\n  }\n\n  constructor(\n    private modalCtrl:ModalController,\n    public userDataService: UserDataService,\n  ) {\n\n  }\n\n  async ngOnInit() {\n    await this.userDataService.loadMedicalRecord();\n    Object.keys(this.userDataService.medicalRecordValue).forEach(key => {\n      if(Object.keys(this.medicalRecord).includes(key)){\n        this.medicalRecord[key]=this.userDataService.medicalRecordValue[key];\n      }\n      console.log(key, this.medicalRecord[key]);\n    })\n    console.log(this.medicalRecord);\n  }\n\n  async edit(){\n    const modal = await this.modalCtrl.create({\n      component: EditTracheostomyDetailsPage,\n      backdropDismiss: false,\n      componentProps: {\n        isModal: true\n      },\n    });\n    modal.present();\n  }\n\n}\n","export default \"ion-card-title {\\n  font-size: 22px;\\n  margin-top: 8px;\\n}\\n\\nion-card-subtitle {\\n  font-size: 14px;\\n  color: dodgerblue;\\n}\\n\\nion-card {\\n  margin-bottom: -8px;\\n}\\n\\nion-card-header {\\n  padding-top: 12px;\\n  padding-bottom: 12px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3RyYWNoZW9zdG9teS1kZXRhaWxzLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGVBQUE7RUFDQSxlQUFBO0FBQ0o7O0FBRUE7RUFDSSxlQUFBO0VBQ0EsaUJBQUE7QUFDSjs7QUFFQTtFQUNJLG1CQUFBO0FBQ0o7O0FBRUE7RUFDSSxpQkFBQTtFQUNBLG9CQUFBO0FBQ0oiLCJmaWxlIjoidHJhY2hlb3N0b215LWRldGFpbHMucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiaW9uLWNhcmQtdGl0bGUge1xuICAgIGZvbnQtc2l6ZTogMjJweDtcbiAgICBtYXJnaW4tdG9wOiA4cHg7XG59XG5cbmlvbi1jYXJkLXN1YnRpdGxlIHtcbiAgICBmb250LXNpemU6IDE0cHg7XG4gICAgY29sb3I6ZG9kZ2VyYmx1ZTtcbn1cblxuaW9uLWNhcmQge1xuICAgIG1hcmdpbi1ib3R0b206IC04cHg7XG59XG5cbmlvbi1jYXJkLWhlYWRlciB7XG4gICAgcGFkZGluZy10b3A6IDEycHg7XG4gICAgcGFkZGluZy1ib3R0b206IDEycHg7XG59Il19 */\";"]}